"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@near-js+crypto@1.4.1";
exports.ids = ["vendor-chunks/@near-js+crypto@1.4.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/constants.cjs":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/constants.cjs ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.KeySize = exports.KeyType = void 0;\n/** All supported key types */\nvar KeyType;\n(function (KeyType) {\n    KeyType[KeyType[\"ED25519\"] = 0] = \"ED25519\";\n    KeyType[KeyType[\"SECP256K1\"] = 1] = \"SECP256K1\";\n})(KeyType || (exports.KeyType = KeyType = {}));\nexports.KeySize = {\n    SECRET_KEY: 32,\n    ED25519_PUBLIC_KEY: 32,\n    SECP256k1_PUBLIC_KEY: 64,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrY3J5cHRvQDEuNC4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9jcnlwdG8vbGliL2NvbW1vbmpzL2NvbnN0YW50cy5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZSxHQUFHLGVBQWU7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsY0FBYyxlQUFlLGVBQWU7QUFDN0MsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2F0aG9uLW5lYXItcmVkYWN0ZWQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrY3J5cHRvQDEuNC4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9jcnlwdG8vbGliL2NvbW1vbmpzL2NvbnN0YW50cy5janM/NzMzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuS2V5U2l6ZSA9IGV4cG9ydHMuS2V5VHlwZSA9IHZvaWQgMDtcbi8qKiBBbGwgc3VwcG9ydGVkIGtleSB0eXBlcyAqL1xudmFyIEtleVR5cGU7XG4oZnVuY3Rpb24gKEtleVR5cGUpIHtcbiAgICBLZXlUeXBlW0tleVR5cGVbXCJFRDI1NTE5XCJdID0gMF0gPSBcIkVEMjU1MTlcIjtcbiAgICBLZXlUeXBlW0tleVR5cGVbXCJTRUNQMjU2SzFcIl0gPSAxXSA9IFwiU0VDUDI1NksxXCI7XG59KShLZXlUeXBlIHx8IChleHBvcnRzLktleVR5cGUgPSBLZXlUeXBlID0ge30pKTtcbmV4cG9ydHMuS2V5U2l6ZSA9IHtcbiAgICBTRUNSRVRfS0VZOiAzMixcbiAgICBFRDI1NTE5X1BVQkxJQ19LRVk6IDMyLFxuICAgIFNFQ1AyNTZrMV9QVUJMSUNfS0VZOiA2NCxcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/constants.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/index.cjs":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/index.cjs ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PublicKey = exports.KeyPairSecp256k1 = exports.KeyPairEd25519 = exports.KeyPair = exports.KeyType = void 0;\nvar constants_1 = __webpack_require__(/*! ./constants.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/constants.cjs\");\nObject.defineProperty(exports, \"KeyType\", ({ enumerable: true, get: function () { return constants_1.KeyType; } }));\nvar key_pair_1 = __webpack_require__(/*! ./key_pair.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/key_pair.cjs\");\nObject.defineProperty(exports, \"KeyPair\", ({ enumerable: true, get: function () { return key_pair_1.KeyPair; } }));\nvar key_pair_ed25519_1 = __webpack_require__(/*! ./key_pair_ed25519.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/key_pair_ed25519.cjs\");\nObject.defineProperty(exports, \"KeyPairEd25519\", ({ enumerable: true, get: function () { return key_pair_ed25519_1.KeyPairEd25519; } }));\nvar key_pair_secp256k1_1 = __webpack_require__(/*! ./key_pair_secp256k1.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/key_pair_secp256k1.cjs\");\nObject.defineProperty(exports, \"KeyPairSecp256k1\", ({ enumerable: true, get: function () { return key_pair_secp256k1_1.KeyPairSecp256k1; } }));\nvar public_key_1 = __webpack_require__(/*! ./public_key.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/public_key.cjs\");\nObject.defineProperty(exports, \"PublicKey\", ({ enumerable: true, get: function () { return public_key_1.PublicKey; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrY3J5cHRvQDEuNC4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9jcnlwdG8vbGliL2NvbW1vbmpzL2luZGV4LmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUIsR0FBRyx3QkFBd0IsR0FBRyxzQkFBc0IsR0FBRyxlQUFlLEdBQUcsZUFBZTtBQUN6RyxrQkFBa0IsbUJBQU8sQ0FBQyxpSUFBaUI7QUFDM0MsMkNBQTBDLEVBQUUscUNBQXFDLCtCQUErQixFQUFDO0FBQ2pILGlCQUFpQixtQkFBTyxDQUFDLCtIQUFnQjtBQUN6QywyQ0FBMEMsRUFBRSxxQ0FBcUMsOEJBQThCLEVBQUM7QUFDaEgseUJBQXlCLG1CQUFPLENBQUMsK0lBQXdCO0FBQ3pELGtEQUFpRCxFQUFFLHFDQUFxQyw2Q0FBNkMsRUFBQztBQUN0SSwyQkFBMkIsbUJBQU8sQ0FBQyxtSkFBMEI7QUFDN0Qsb0RBQW1ELEVBQUUscUNBQXFDLGlEQUFpRCxFQUFDO0FBQzVJLG1CQUFtQixtQkFBTyxDQUFDLG1JQUFrQjtBQUM3Qyw2Q0FBNEMsRUFBRSxxQ0FBcUMsa0NBQWtDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrYXRob24tbmVhci1yZWRhY3RlZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbmVhci1qcytjcnlwdG9AMS40LjEvbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2NyeXB0by9saWIvY29tbW9uanMvaW5kZXguY2pzPzczN2EiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlB1YmxpY0tleSA9IGV4cG9ydHMuS2V5UGFpclNlY3AyNTZrMSA9IGV4cG9ydHMuS2V5UGFpckVkMjU1MTkgPSBleHBvcnRzLktleVBhaXIgPSBleHBvcnRzLktleVR5cGUgPSB2b2lkIDA7XG52YXIgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHMuY2pzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiS2V5VHlwZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uc3RhbnRzXzEuS2V5VHlwZTsgfSB9KTtcbnZhciBrZXlfcGFpcl8xID0gcmVxdWlyZShcIi4va2V5X3BhaXIuY2pzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiS2V5UGFpclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4ga2V5X3BhaXJfMS5LZXlQYWlyOyB9IH0pO1xudmFyIGtleV9wYWlyX2VkMjU1MTlfMSA9IHJlcXVpcmUoXCIuL2tleV9wYWlyX2VkMjU1MTkuY2pzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiS2V5UGFpckVkMjU1MTlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGtleV9wYWlyX2VkMjU1MTlfMS5LZXlQYWlyRWQyNTUxOTsgfSB9KTtcbnZhciBrZXlfcGFpcl9zZWNwMjU2azFfMSA9IHJlcXVpcmUoXCIuL2tleV9wYWlyX3NlY3AyNTZrMS5janNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJLZXlQYWlyU2VjcDI1NmsxXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBrZXlfcGFpcl9zZWNwMjU2azFfMS5LZXlQYWlyU2VjcDI1NmsxOyB9IH0pO1xudmFyIHB1YmxpY19rZXlfMSA9IHJlcXVpcmUoXCIuL3B1YmxpY19rZXkuY2pzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUHVibGljS2V5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwdWJsaWNfa2V5XzEuUHVibGljS2V5OyB9IH0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/key_pair.cjs":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/key_pair.cjs ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.KeyPair = void 0;\nconst key_pair_base_1 = __webpack_require__(/*! ./key_pair_base.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/key_pair_base.cjs\");\nconst key_pair_ed25519_1 = __webpack_require__(/*! ./key_pair_ed25519.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/key_pair_ed25519.cjs\");\nconst key_pair_secp256k1_1 = __webpack_require__(/*! ./key_pair_secp256k1.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/key_pair_secp256k1.cjs\");\nclass KeyPair extends key_pair_base_1.KeyPairBase {\n    /**\n     * @param curve Name of elliptical curve, case-insensitive\n     * @returns Random KeyPair based on the curve\n     */\n    static fromRandom(curve) {\n        switch (curve.toUpperCase()) {\n            case 'ED25519': return key_pair_ed25519_1.KeyPairEd25519.fromRandom();\n            case 'SECP256K1': return key_pair_secp256k1_1.KeyPairSecp256k1.fromRandom();\n            default: throw new Error(`Unknown curve ${curve}`);\n        }\n    }\n    /**\n     * Creates a key pair from an encoded key string.\n     * @param encodedKey The encoded key string.\n     * @returns {KeyPair} The key pair created from the encoded key string.\n     */\n    static fromString(encodedKey) {\n        const parts = encodedKey.split(':');\n        if (parts.length === 2) {\n            switch (parts[0].toUpperCase()) {\n                case 'ED25519': return new key_pair_ed25519_1.KeyPairEd25519(parts[1]);\n                case 'SECP256K1': return new key_pair_secp256k1_1.KeyPairSecp256k1(parts[1]);\n                default: throw new Error(`Unknown curve: ${parts[0]}`);\n            }\n        }\n        else {\n            throw new Error('Invalid encoded key format, must be <curve>:<encoded key>');\n        }\n    }\n}\nexports.KeyPair = KeyPair;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrY3J5cHRvQDEuNC4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9jcnlwdG8vbGliL2NvbW1vbmpzL2tleV9wYWlyLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlO0FBQ2Ysd0JBQXdCLG1CQUFPLENBQUMseUlBQXFCO0FBQ3JELDJCQUEyQixtQkFBTyxDQUFDLCtJQUF3QjtBQUMzRCw2QkFBNkIsbUJBQU8sQ0FBQyxtSkFBMEI7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELE1BQU07QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELFNBQVM7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2F0aG9uLW5lYXItcmVkYWN0ZWQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrY3J5cHRvQDEuNC4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9jcnlwdG8vbGliL2NvbW1vbmpzL2tleV9wYWlyLmNqcz83ODgxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5LZXlQYWlyID0gdm9pZCAwO1xuY29uc3Qga2V5X3BhaXJfYmFzZV8xID0gcmVxdWlyZShcIi4va2V5X3BhaXJfYmFzZS5janNcIik7XG5jb25zdCBrZXlfcGFpcl9lZDI1NTE5XzEgPSByZXF1aXJlKFwiLi9rZXlfcGFpcl9lZDI1NTE5LmNqc1wiKTtcbmNvbnN0IGtleV9wYWlyX3NlY3AyNTZrMV8xID0gcmVxdWlyZShcIi4va2V5X3BhaXJfc2VjcDI1NmsxLmNqc1wiKTtcbmNsYXNzIEtleVBhaXIgZXh0ZW5kcyBrZXlfcGFpcl9iYXNlXzEuS2V5UGFpckJhc2Uge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBjdXJ2ZSBOYW1lIG9mIGVsbGlwdGljYWwgY3VydmUsIGNhc2UtaW5zZW5zaXRpdmVcbiAgICAgKiBAcmV0dXJucyBSYW5kb20gS2V5UGFpciBiYXNlZCBvbiB0aGUgY3VydmVcbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVJhbmRvbShjdXJ2ZSkge1xuICAgICAgICBzd2l0Y2ggKGN1cnZlLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgJ0VEMjU1MTknOiByZXR1cm4ga2V5X3BhaXJfZWQyNTUxOV8xLktleVBhaXJFZDI1NTE5LmZyb21SYW5kb20oKTtcbiAgICAgICAgICAgIGNhc2UgJ1NFQ1AyNTZLMSc6IHJldHVybiBrZXlfcGFpcl9zZWNwMjU2azFfMS5LZXlQYWlyU2VjcDI1NmsxLmZyb21SYW5kb20oKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihgVW5rbm93biBjdXJ2ZSAke2N1cnZlfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBrZXkgcGFpciBmcm9tIGFuIGVuY29kZWQga2V5IHN0cmluZy5cbiAgICAgKiBAcGFyYW0gZW5jb2RlZEtleSBUaGUgZW5jb2RlZCBrZXkgc3RyaW5nLlxuICAgICAqIEByZXR1cm5zIHtLZXlQYWlyfSBUaGUga2V5IHBhaXIgY3JlYXRlZCBmcm9tIHRoZSBlbmNvZGVkIGtleSBzdHJpbmcuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21TdHJpbmcoZW5jb2RlZEtleSkge1xuICAgICAgICBjb25zdCBwYXJ0cyA9IGVuY29kZWRLZXkuc3BsaXQoJzonKTtcbiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgc3dpdGNoIChwYXJ0c1swXS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnRUQyNTUxOSc6IHJldHVybiBuZXcga2V5X3BhaXJfZWQyNTUxOV8xLktleVBhaXJFZDI1NTE5KHBhcnRzWzFdKTtcbiAgICAgICAgICAgICAgICBjYXNlICdTRUNQMjU2SzEnOiByZXR1cm4gbmV3IGtleV9wYWlyX3NlY3AyNTZrMV8xLktleVBhaXJTZWNwMjU2azEocGFydHNbMV0pO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihgVW5rbm93biBjdXJ2ZTogJHtwYXJ0c1swXX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBlbmNvZGVkIGtleSBmb3JtYXQsIG11c3QgYmUgPGN1cnZlPjo8ZW5jb2RlZCBrZXk+Jyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLktleVBhaXIgPSBLZXlQYWlyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/key_pair.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/key_pair_base.cjs":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/key_pair_base.cjs ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.KeyPairBase = void 0;\nclass KeyPairBase {\n}\nexports.KeyPairBase = KeyPairBase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrY3J5cHRvQDEuNC4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9jcnlwdG8vbGliL2NvbW1vbmpzL2tleV9wYWlyX2Jhc2UuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0EsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2F0aG9uLW5lYXItcmVkYWN0ZWQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrY3J5cHRvQDEuNC4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9jcnlwdG8vbGliL2NvbW1vbmpzL2tleV9wYWlyX2Jhc2UuY2pzPzU3NjMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLktleVBhaXJCYXNlID0gdm9pZCAwO1xuY2xhc3MgS2V5UGFpckJhc2Uge1xufVxuZXhwb3J0cy5LZXlQYWlyQmFzZSA9IEtleVBhaXJCYXNlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/key_pair_base.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/key_pair_ed25519.cjs":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/key_pair_ed25519.cjs ***!
  \*****************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.KeyPairEd25519 = void 0;\nconst utils_1 = __webpack_require__(/*! @near-js/utils */ \"(ssr)/./node_modules/.pnpm/@near-js+utils@1.0.1/node_modules/@near-js/utils/lib/commonjs/index.cjs\");\nconst ed25519_1 = __webpack_require__(/*! @noble/curves/ed25519 */ \"(ssr)/./node_modules/.pnpm/@noble+curves@1.2.0/node_modules/@noble/curves/ed25519.js\");\nconst randombytes_1 = __importDefault(__webpack_require__(/*! randombytes */ \"(ssr)/./node_modules/.pnpm/randombytes@2.1.0/node_modules/randombytes/index.js\"));\nconst constants_1 = __webpack_require__(/*! ./constants.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/constants.cjs\");\nconst key_pair_base_1 = __webpack_require__(/*! ./key_pair_base.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/key_pair_base.cjs\");\nconst public_key_1 = __webpack_require__(/*! ./public_key.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/public_key.cjs\");\n/**\n * This class provides key pair functionality for Ed25519 curve:\n * generating key pairs, encoding key pairs, signing and verifying.\n */\nclass KeyPairEd25519 extends key_pair_base_1.KeyPairBase {\n    publicKey;\n    secretKey;\n    extendedSecretKey;\n    /**\n     * Construct an instance of key pair given a secret key.\n     * It's generally assumed that these are encoded in base58.\n     * @param extendedSecretKey\n     */\n    constructor(extendedSecretKey) {\n        super();\n        const decoded = (0, utils_1.baseDecode)(extendedSecretKey);\n        const secretKey = new Uint8Array(decoded.slice(0, constants_1.KeySize.SECRET_KEY));\n        const publicKey = ed25519_1.ed25519.getPublicKey(new Uint8Array(secretKey));\n        this.publicKey = new public_key_1.PublicKey({ keyType: constants_1.KeyType.ED25519, data: publicKey });\n        this.secretKey = (0, utils_1.baseEncode)(secretKey);\n        this.extendedSecretKey = extendedSecretKey;\n    }\n    /**\n     * Generate a new random keypair.\n     * @example\n     * const keyRandom = KeyPair.fromRandom();\n     * keyRandom.publicKey\n     * // returns [PUBLIC_KEY]\n     *\n     * keyRandom.secretKey\n     * // returns [SECRET_KEY]\n     */\n    static fromRandom() {\n        const secretKey = (0, randombytes_1.default)(constants_1.KeySize.SECRET_KEY);\n        const publicKey = ed25519_1.ed25519.getPublicKey(new Uint8Array(secretKey));\n        const extendedSecretKey = new Uint8Array([...secretKey, ...publicKey]);\n        return new KeyPairEd25519((0, utils_1.baseEncode)(extendedSecretKey));\n    }\n    /**\n     * Signs a message using the key pair's secret key.\n     * @param message The message to be signed.\n     * @returns {Signature} The signature object containing the signature and the public key.\n     */\n    sign(message) {\n        const signature = ed25519_1.ed25519.sign(message, (0, utils_1.baseDecode)(this.secretKey));\n        return { signature, publicKey: this.publicKey };\n    }\n    /**\n     * Verifies the signature of a message using the key pair's public key.\n     * @param message The message to be verified.\n     * @param signature The signature to be verified.\n     * @returns {boolean} `true` if the signature is valid, otherwise `false`.\n     */\n    verify(message, signature) {\n        return this.publicKey.verify(message, signature);\n    }\n    /**\n     * Returns a string representation of the key pair in the format 'ed25519:[extendedSecretKey]'.\n     * @returns {string} The string representation of the key pair.\n     */\n    toString() {\n        return `ed25519:${this.extendedSecretKey}`;\n    }\n    /**\n     * Retrieves the public key associated with the key pair.\n     * @returns {PublicKey} The public key.\n     */\n    getPublicKey() {\n        return this.publicKey;\n    }\n}\nexports.KeyPairEd25519 = KeyPairEd25519;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrY3J5cHRvQDEuNC4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9jcnlwdG8vbGliL2NvbW1vbmpzL2tleV9wYWlyX2VkMjU1MTkuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCO0FBQ3RCLGdCQUFnQixtQkFBTyxDQUFDLDBIQUFnQjtBQUN4QyxrQkFBa0IsbUJBQU8sQ0FBQyxtSEFBdUI7QUFDakQsc0NBQXNDLG1CQUFPLENBQUMsbUdBQWE7QUFDM0Qsb0JBQW9CLG1CQUFPLENBQUMsaUlBQWlCO0FBQzdDLHdCQUF3QixtQkFBTyxDQUFDLHlJQUFxQjtBQUNyRCxxQkFBcUIsbUJBQU8sQ0FBQyxtSUFBa0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELHVEQUF1RDtBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixXQUFXO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBLDBCQUEwQix1QkFBdUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFdBQVc7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2hhY2thdGhvbi1uZWFyLXJlZGFjdGVkLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BuZWFyLWpzK2NyeXB0b0AxLjQuMS9ub2RlX21vZHVsZXMvQG5lYXItanMvY3J5cHRvL2xpYi9jb21tb25qcy9rZXlfcGFpcl9lZDI1NTE5LmNqcz9jYzdiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5LZXlQYWlyRWQyNTUxOSA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiQG5lYXItanMvdXRpbHNcIik7XG5jb25zdCBlZDI1NTE5XzEgPSByZXF1aXJlKFwiQG5vYmxlL2N1cnZlcy9lZDI1NTE5XCIpO1xuY29uc3QgcmFuZG9tYnl0ZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmFuZG9tYnl0ZXNcIikpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHMuY2pzXCIpO1xuY29uc3Qga2V5X3BhaXJfYmFzZV8xID0gcmVxdWlyZShcIi4va2V5X3BhaXJfYmFzZS5janNcIik7XG5jb25zdCBwdWJsaWNfa2V5XzEgPSByZXF1aXJlKFwiLi9wdWJsaWNfa2V5LmNqc1wiKTtcbi8qKlxuICogVGhpcyBjbGFzcyBwcm92aWRlcyBrZXkgcGFpciBmdW5jdGlvbmFsaXR5IGZvciBFZDI1NTE5IGN1cnZlOlxuICogZ2VuZXJhdGluZyBrZXkgcGFpcnMsIGVuY29kaW5nIGtleSBwYWlycywgc2lnbmluZyBhbmQgdmVyaWZ5aW5nLlxuICovXG5jbGFzcyBLZXlQYWlyRWQyNTUxOSBleHRlbmRzIGtleV9wYWlyX2Jhc2VfMS5LZXlQYWlyQmFzZSB7XG4gICAgcHVibGljS2V5O1xuICAgIHNlY3JldEtleTtcbiAgICBleHRlbmRlZFNlY3JldEtleTtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3QgYW4gaW5zdGFuY2Ugb2Yga2V5IHBhaXIgZ2l2ZW4gYSBzZWNyZXQga2V5LlxuICAgICAqIEl0J3MgZ2VuZXJhbGx5IGFzc3VtZWQgdGhhdCB0aGVzZSBhcmUgZW5jb2RlZCBpbiBiYXNlNTguXG4gICAgICogQHBhcmFtIGV4dGVuZGVkU2VjcmV0S2V5XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZXh0ZW5kZWRTZWNyZXRLZXkpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgY29uc3QgZGVjb2RlZCA9ICgwLCB1dGlsc18xLmJhc2VEZWNvZGUpKGV4dGVuZGVkU2VjcmV0S2V5KTtcbiAgICAgICAgY29uc3Qgc2VjcmV0S2V5ID0gbmV3IFVpbnQ4QXJyYXkoZGVjb2RlZC5zbGljZSgwLCBjb25zdGFudHNfMS5LZXlTaXplLlNFQ1JFVF9LRVkpKTtcbiAgICAgICAgY29uc3QgcHVibGljS2V5ID0gZWQyNTUxOV8xLmVkMjU1MTkuZ2V0UHVibGljS2V5KG5ldyBVaW50OEFycmF5KHNlY3JldEtleSkpO1xuICAgICAgICB0aGlzLnB1YmxpY0tleSA9IG5ldyBwdWJsaWNfa2V5XzEuUHVibGljS2V5KHsga2V5VHlwZTogY29uc3RhbnRzXzEuS2V5VHlwZS5FRDI1NTE5LCBkYXRhOiBwdWJsaWNLZXkgfSk7XG4gICAgICAgIHRoaXMuc2VjcmV0S2V5ID0gKDAsIHV0aWxzXzEuYmFzZUVuY29kZSkoc2VjcmV0S2V5KTtcbiAgICAgICAgdGhpcy5leHRlbmRlZFNlY3JldEtleSA9IGV4dGVuZGVkU2VjcmV0S2V5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBhIG5ldyByYW5kb20ga2V5cGFpci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGNvbnN0IGtleVJhbmRvbSA9IEtleVBhaXIuZnJvbVJhbmRvbSgpO1xuICAgICAqIGtleVJhbmRvbS5wdWJsaWNLZXlcbiAgICAgKiAvLyByZXR1cm5zIFtQVUJMSUNfS0VZXVxuICAgICAqXG4gICAgICoga2V5UmFuZG9tLnNlY3JldEtleVxuICAgICAqIC8vIHJldHVybnMgW1NFQ1JFVF9LRVldXG4gICAgICovXG4gICAgc3RhdGljIGZyb21SYW5kb20oKSB7XG4gICAgICAgIGNvbnN0IHNlY3JldEtleSA9ICgwLCByYW5kb21ieXRlc18xLmRlZmF1bHQpKGNvbnN0YW50c18xLktleVNpemUuU0VDUkVUX0tFWSk7XG4gICAgICAgIGNvbnN0IHB1YmxpY0tleSA9IGVkMjU1MTlfMS5lZDI1NTE5LmdldFB1YmxpY0tleShuZXcgVWludDhBcnJheShzZWNyZXRLZXkpKTtcbiAgICAgICAgY29uc3QgZXh0ZW5kZWRTZWNyZXRLZXkgPSBuZXcgVWludDhBcnJheShbLi4uc2VjcmV0S2V5LCAuLi5wdWJsaWNLZXldKTtcbiAgICAgICAgcmV0dXJuIG5ldyBLZXlQYWlyRWQyNTUxOSgoMCwgdXRpbHNfMS5iYXNlRW5jb2RlKShleHRlbmRlZFNlY3JldEtleSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTaWducyBhIG1lc3NhZ2UgdXNpbmcgdGhlIGtleSBwYWlyJ3Mgc2VjcmV0IGtleS5cbiAgICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBiZSBzaWduZWQuXG4gICAgICogQHJldHVybnMge1NpZ25hdHVyZX0gVGhlIHNpZ25hdHVyZSBvYmplY3QgY29udGFpbmluZyB0aGUgc2lnbmF0dXJlIGFuZCB0aGUgcHVibGljIGtleS5cbiAgICAgKi9cbiAgICBzaWduKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gZWQyNTUxOV8xLmVkMjU1MTkuc2lnbihtZXNzYWdlLCAoMCwgdXRpbHNfMS5iYXNlRGVjb2RlKSh0aGlzLnNlY3JldEtleSkpO1xuICAgICAgICByZXR1cm4geyBzaWduYXR1cmUsIHB1YmxpY0tleTogdGhpcy5wdWJsaWNLZXkgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVmVyaWZpZXMgdGhlIHNpZ25hdHVyZSBvZiBhIG1lc3NhZ2UgdXNpbmcgdGhlIGtleSBwYWlyJ3MgcHVibGljIGtleS5cbiAgICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBiZSB2ZXJpZmllZC5cbiAgICAgKiBAcGFyYW0gc2lnbmF0dXJlIFRoZSBzaWduYXR1cmUgdG8gYmUgdmVyaWZpZWQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgc2lnbmF0dXJlIGlzIHZhbGlkLCBvdGhlcndpc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICB2ZXJpZnkobWVzc2FnZSwgc2lnbmF0dXJlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnB1YmxpY0tleS52ZXJpZnkobWVzc2FnZSwgc2lnbmF0dXJlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUga2V5IHBhaXIgaW4gdGhlIGZvcm1hdCAnZWQyNTUxOTpbZXh0ZW5kZWRTZWNyZXRLZXldJy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBrZXkgcGFpci5cbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGBlZDI1NTE5OiR7dGhpcy5leHRlbmRlZFNlY3JldEtleX1gO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHB1YmxpYyBrZXkgYXNzb2NpYXRlZCB3aXRoIHRoZSBrZXkgcGFpci5cbiAgICAgKiBAcmV0dXJucyB7UHVibGljS2V5fSBUaGUgcHVibGljIGtleS5cbiAgICAgKi9cbiAgICBnZXRQdWJsaWNLZXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnB1YmxpY0tleTtcbiAgICB9XG59XG5leHBvcnRzLktleVBhaXJFZDI1NTE5ID0gS2V5UGFpckVkMjU1MTk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/key_pair_ed25519.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/key_pair_secp256k1.cjs":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/key_pair_secp256k1.cjs ***!
  \*******************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.KeyPairSecp256k1 = void 0;\nconst utils_1 = __webpack_require__(/*! @near-js/utils */ \"(ssr)/./node_modules/.pnpm/@near-js+utils@1.0.1/node_modules/@near-js/utils/lib/commonjs/index.cjs\");\nconst randombytes_1 = __importDefault(__webpack_require__(/*! randombytes */ \"(ssr)/./node_modules/.pnpm/randombytes@2.1.0/node_modules/randombytes/index.js\"));\nconst secp256k1_1 = __importDefault(__webpack_require__(/*! secp256k1 */ \"(ssr)/./node_modules/.pnpm/secp256k1@5.0.0/node_modules/secp256k1/index.js\"));\nconst constants_1 = __webpack_require__(/*! ./constants.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/constants.cjs\");\nconst key_pair_base_1 = __webpack_require__(/*! ./key_pair_base.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/key_pair_base.cjs\");\nconst public_key_1 = __webpack_require__(/*! ./public_key.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/public_key.cjs\");\n/**\n * This class provides key pair functionality for secp256k1 curve:\n * generating key pairs, encoding key pairs, signing and verifying.\n * nearcore expects secp256k1 public keys to be 64 bytes at all times,\n * even when string encoded the secp256k1 library returns 65 byte keys\n * (including a 1 byte header that indicates how the pubkey was encoded).\n * We'll force the secp256k1 library to always encode uncompressed\n * keys with the corresponding 0x04 header byte, then manually\n * insert/remove that byte as needed.\n */\nclass KeyPairSecp256k1 extends key_pair_base_1.KeyPairBase {\n    publicKey;\n    secretKey;\n    extendedSecretKey;\n    /**\n     * Construct an instance of key pair given a secret key.\n     * It's generally assumed that these are encoded in base58.\n     * @param {string} extendedSecretKey\n     */\n    constructor(extendedSecretKey) {\n        super();\n        const decoded = (0, utils_1.baseDecode)(extendedSecretKey);\n        const secretKey = new Uint8Array(decoded.slice(0, constants_1.KeySize.SECRET_KEY));\n        const withHeader = secp256k1_1.default.publicKeyCreate(new Uint8Array(secretKey), false);\n        const data = withHeader.subarray(1, withHeader.length); // remove the 0x04 header byte\n        this.publicKey = new public_key_1.PublicKey({\n            keyType: constants_1.KeyType.SECP256K1,\n            data\n        });\n        this.secretKey = (0, utils_1.baseEncode)(secretKey);\n        this.extendedSecretKey = extendedSecretKey;\n    }\n    /**\n     * Generate a new random keypair.\n     * @example\n     * const keyRandom = KeyPair.fromRandom();\n     * keyRandom.publicKey\n     * // returns [PUBLIC_KEY]\n     *\n     * keyRandom.secretKey\n     * // returns [SECRET_KEY]\n     */\n    static fromRandom() {\n        // TODO: find better way to generate PK\n        const secretKey = (0, randombytes_1.default)(constants_1.KeySize.SECRET_KEY);\n        const withHeader = secp256k1_1.default.publicKeyCreate(new Uint8Array(secretKey), false);\n        const publicKey = withHeader.subarray(1, withHeader.length);\n        const extendedSecretKey = new Uint8Array([...secretKey, ...publicKey]);\n        return new KeyPairSecp256k1((0, utils_1.baseEncode)(extendedSecretKey));\n    }\n    sign(message) {\n        // nearcore expects 65 byte signatures formed by appending the recovery id to the 64 byte signature\n        const { signature, recid } = secp256k1_1.default.ecdsaSign(message, (0, utils_1.baseDecode)(this.secretKey));\n        return { signature: new Uint8Array([...signature, recid]), publicKey: this.publicKey };\n    }\n    verify(message, signature) {\n        return this.publicKey.verify(message, signature);\n    }\n    toString() {\n        return `secp256k1:${this.extendedSecretKey}`;\n    }\n    getPublicKey() {\n        return this.publicKey;\n    }\n}\nexports.KeyPairSecp256k1 = KeyPairSecp256k1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrY3J5cHRvQDEuNC4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9jcnlwdG8vbGliL2NvbW1vbmpzL2tleV9wYWlyX3NlY3AyNTZrMS5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsZ0JBQWdCLG1CQUFPLENBQUMsMEhBQWdCO0FBQ3hDLHNDQUFzQyxtQkFBTyxDQUFDLG1HQUFhO0FBQzNELG9DQUFvQyxtQkFBTyxDQUFDLDZGQUFXO0FBQ3ZELG9CQUFvQixtQkFBTyxDQUFDLGlJQUFpQjtBQUM3Qyx3QkFBd0IsbUJBQU8sQ0FBQyx5SUFBcUI7QUFDckQscUJBQXFCLG1CQUFPLENBQUMsbUlBQWtCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1CQUFtQjtBQUNuQyxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix1QkFBdUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QiIsInNvdXJjZXMiOlsid2VicGFjazovL2hhY2thdGhvbi1uZWFyLXJlZGFjdGVkLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BuZWFyLWpzK2NyeXB0b0AxLjQuMS9ub2RlX21vZHVsZXMvQG5lYXItanMvY3J5cHRvL2xpYi9jb21tb25qcy9rZXlfcGFpcl9zZWNwMjU2azEuY2pzPzUwZjIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLktleVBhaXJTZWNwMjU2azEgPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIkBuZWFyLWpzL3V0aWxzXCIpO1xuY29uc3QgcmFuZG9tYnl0ZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmFuZG9tYnl0ZXNcIikpO1xuY29uc3Qgc2VjcDI1NmsxXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInNlY3AyNTZrMVwiKSk7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50cy5janNcIik7XG5jb25zdCBrZXlfcGFpcl9iYXNlXzEgPSByZXF1aXJlKFwiLi9rZXlfcGFpcl9iYXNlLmNqc1wiKTtcbmNvbnN0IHB1YmxpY19rZXlfMSA9IHJlcXVpcmUoXCIuL3B1YmxpY19rZXkuY2pzXCIpO1xuLyoqXG4gKiBUaGlzIGNsYXNzIHByb3ZpZGVzIGtleSBwYWlyIGZ1bmN0aW9uYWxpdHkgZm9yIHNlY3AyNTZrMSBjdXJ2ZTpcbiAqIGdlbmVyYXRpbmcga2V5IHBhaXJzLCBlbmNvZGluZyBrZXkgcGFpcnMsIHNpZ25pbmcgYW5kIHZlcmlmeWluZy5cbiAqIG5lYXJjb3JlIGV4cGVjdHMgc2VjcDI1NmsxIHB1YmxpYyBrZXlzIHRvIGJlIDY0IGJ5dGVzIGF0IGFsbCB0aW1lcyxcbiAqIGV2ZW4gd2hlbiBzdHJpbmcgZW5jb2RlZCB0aGUgc2VjcDI1NmsxIGxpYnJhcnkgcmV0dXJucyA2NSBieXRlIGtleXNcbiAqIChpbmNsdWRpbmcgYSAxIGJ5dGUgaGVhZGVyIHRoYXQgaW5kaWNhdGVzIGhvdyB0aGUgcHVia2V5IHdhcyBlbmNvZGVkKS5cbiAqIFdlJ2xsIGZvcmNlIHRoZSBzZWNwMjU2azEgbGlicmFyeSB0byBhbHdheXMgZW5jb2RlIHVuY29tcHJlc3NlZFxuICoga2V5cyB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIDB4MDQgaGVhZGVyIGJ5dGUsIHRoZW4gbWFudWFsbHlcbiAqIGluc2VydC9yZW1vdmUgdGhhdCBieXRlIGFzIG5lZWRlZC5cbiAqL1xuY2xhc3MgS2V5UGFpclNlY3AyNTZrMSBleHRlbmRzIGtleV9wYWlyX2Jhc2VfMS5LZXlQYWlyQmFzZSB7XG4gICAgcHVibGljS2V5O1xuICAgIHNlY3JldEtleTtcbiAgICBleHRlbmRlZFNlY3JldEtleTtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3QgYW4gaW5zdGFuY2Ugb2Yga2V5IHBhaXIgZ2l2ZW4gYSBzZWNyZXQga2V5LlxuICAgICAqIEl0J3MgZ2VuZXJhbGx5IGFzc3VtZWQgdGhhdCB0aGVzZSBhcmUgZW5jb2RlZCBpbiBiYXNlNTguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4dGVuZGVkU2VjcmV0S2V5XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZXh0ZW5kZWRTZWNyZXRLZXkpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgY29uc3QgZGVjb2RlZCA9ICgwLCB1dGlsc18xLmJhc2VEZWNvZGUpKGV4dGVuZGVkU2VjcmV0S2V5KTtcbiAgICAgICAgY29uc3Qgc2VjcmV0S2V5ID0gbmV3IFVpbnQ4QXJyYXkoZGVjb2RlZC5zbGljZSgwLCBjb25zdGFudHNfMS5LZXlTaXplLlNFQ1JFVF9LRVkpKTtcbiAgICAgICAgY29uc3Qgd2l0aEhlYWRlciA9IHNlY3AyNTZrMV8xLmRlZmF1bHQucHVibGljS2V5Q3JlYXRlKG5ldyBVaW50OEFycmF5KHNlY3JldEtleSksIGZhbHNlKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IHdpdGhIZWFkZXIuc3ViYXJyYXkoMSwgd2l0aEhlYWRlci5sZW5ndGgpOyAvLyByZW1vdmUgdGhlIDB4MDQgaGVhZGVyIGJ5dGVcbiAgICAgICAgdGhpcy5wdWJsaWNLZXkgPSBuZXcgcHVibGljX2tleV8xLlB1YmxpY0tleSh7XG4gICAgICAgICAgICBrZXlUeXBlOiBjb25zdGFudHNfMS5LZXlUeXBlLlNFQ1AyNTZLMSxcbiAgICAgICAgICAgIGRhdGFcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2VjcmV0S2V5ID0gKDAsIHV0aWxzXzEuYmFzZUVuY29kZSkoc2VjcmV0S2V5KTtcbiAgICAgICAgdGhpcy5leHRlbmRlZFNlY3JldEtleSA9IGV4dGVuZGVkU2VjcmV0S2V5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBhIG5ldyByYW5kb20ga2V5cGFpci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGNvbnN0IGtleVJhbmRvbSA9IEtleVBhaXIuZnJvbVJhbmRvbSgpO1xuICAgICAqIGtleVJhbmRvbS5wdWJsaWNLZXlcbiAgICAgKiAvLyByZXR1cm5zIFtQVUJMSUNfS0VZXVxuICAgICAqXG4gICAgICoga2V5UmFuZG9tLnNlY3JldEtleVxuICAgICAqIC8vIHJldHVybnMgW1NFQ1JFVF9LRVldXG4gICAgICovXG4gICAgc3RhdGljIGZyb21SYW5kb20oKSB7XG4gICAgICAgIC8vIFRPRE86IGZpbmQgYmV0dGVyIHdheSB0byBnZW5lcmF0ZSBQS1xuICAgICAgICBjb25zdCBzZWNyZXRLZXkgPSAoMCwgcmFuZG9tYnl0ZXNfMS5kZWZhdWx0KShjb25zdGFudHNfMS5LZXlTaXplLlNFQ1JFVF9LRVkpO1xuICAgICAgICBjb25zdCB3aXRoSGVhZGVyID0gc2VjcDI1NmsxXzEuZGVmYXVsdC5wdWJsaWNLZXlDcmVhdGUobmV3IFVpbnQ4QXJyYXkoc2VjcmV0S2V5KSwgZmFsc2UpO1xuICAgICAgICBjb25zdCBwdWJsaWNLZXkgPSB3aXRoSGVhZGVyLnN1YmFycmF5KDEsIHdpdGhIZWFkZXIubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgZXh0ZW5kZWRTZWNyZXRLZXkgPSBuZXcgVWludDhBcnJheShbLi4uc2VjcmV0S2V5LCAuLi5wdWJsaWNLZXldKTtcbiAgICAgICAgcmV0dXJuIG5ldyBLZXlQYWlyU2VjcDI1NmsxKCgwLCB1dGlsc18xLmJhc2VFbmNvZGUpKGV4dGVuZGVkU2VjcmV0S2V5KSk7XG4gICAgfVxuICAgIHNpZ24obWVzc2FnZSkge1xuICAgICAgICAvLyBuZWFyY29yZSBleHBlY3RzIDY1IGJ5dGUgc2lnbmF0dXJlcyBmb3JtZWQgYnkgYXBwZW5kaW5nIHRoZSByZWNvdmVyeSBpZCB0byB0aGUgNjQgYnl0ZSBzaWduYXR1cmVcbiAgICAgICAgY29uc3QgeyBzaWduYXR1cmUsIHJlY2lkIH0gPSBzZWNwMjU2azFfMS5kZWZhdWx0LmVjZHNhU2lnbihtZXNzYWdlLCAoMCwgdXRpbHNfMS5iYXNlRGVjb2RlKSh0aGlzLnNlY3JldEtleSkpO1xuICAgICAgICByZXR1cm4geyBzaWduYXR1cmU6IG5ldyBVaW50OEFycmF5KFsuLi5zaWduYXR1cmUsIHJlY2lkXSksIHB1YmxpY0tleTogdGhpcy5wdWJsaWNLZXkgfTtcbiAgICB9XG4gICAgdmVyaWZ5KG1lc3NhZ2UsIHNpZ25hdHVyZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wdWJsaWNLZXkudmVyaWZ5KG1lc3NhZ2UsIHNpZ25hdHVyZSk7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYHNlY3AyNTZrMToke3RoaXMuZXh0ZW5kZWRTZWNyZXRLZXl9YDtcbiAgICB9XG4gICAgZ2V0UHVibGljS2V5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wdWJsaWNLZXk7XG4gICAgfVxufVxuZXhwb3J0cy5LZXlQYWlyU2VjcDI1NmsxID0gS2V5UGFpclNlY3AyNTZrMTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/key_pair_secp256k1.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/public_key.cjs":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/public_key.cjs ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PublicKey = void 0;\nconst utils_1 = __webpack_require__(/*! @near-js/utils */ \"(ssr)/./node_modules/.pnpm/@near-js+utils@1.0.1/node_modules/@near-js/utils/lib/commonjs/index.cjs\");\nconst ed25519_1 = __webpack_require__(/*! @noble/curves/ed25519 */ \"(ssr)/./node_modules/.pnpm/@noble+curves@1.2.0/node_modules/@noble/curves/ed25519.js\");\nconst secp256k1_1 = __importDefault(__webpack_require__(/*! secp256k1 */ \"(ssr)/./node_modules/.pnpm/secp256k1@5.0.0/node_modules/secp256k1/index.js\"));\nconst constants_1 = __webpack_require__(/*! ./constants.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/constants.cjs\");\nfunction key_type_to_str(keyType) {\n    switch (keyType) {\n        case constants_1.KeyType.ED25519: return 'ed25519';\n        case constants_1.KeyType.SECP256K1: return 'secp256k1';\n        default: throw new Error(`Unknown key type ${keyType}`);\n    }\n}\nfunction str_to_key_type(keyType) {\n    switch (keyType.toLowerCase()) {\n        case 'ed25519': return constants_1.KeyType.ED25519;\n        case 'secp256k1': return constants_1.KeyType.SECP256K1;\n        default: throw new Error(`Unknown key type ${keyType}`);\n    }\n}\nclass ED25519PublicKey {\n    keyType = constants_1.KeyType.ED25519;\n    data;\n}\nclass SECP256K1PublicKey {\n    keyType = constants_1.KeyType.SECP256K1;\n    data;\n}\nfunction resolveEnumKeyName(keyType) {\n    switch (keyType) {\n        case constants_1.KeyType.ED25519: {\n            return 'ed25519Key';\n        }\n        case constants_1.KeyType.SECP256K1: {\n            return 'secp256k1Key';\n        }\n        default: {\n            throw Error(`unknown type ${keyType}`);\n        }\n    }\n}\n/**\n * DUPLICATED FROM @near-js/types - REPLACE WITH IMPORTED REFERENCE AND DELETE\n * This ends up being necessary for Wallet Selector dependencies with\n * outdated peer dependencies and should only be temporary\n */\nclass Enum {\n    constructor(properties) {\n        if (Object.keys(properties).length !== 1) {\n            throw new Error('Enum can only take single value');\n        }\n        Object.keys(properties).map((key) => {\n            this[key] = properties[key];\n        });\n    }\n}\n/**\n * PublicKey representation that has type and bytes of the key.\n */\nclass PublicKey extends Enum {\n    enum;\n    ed25519Key;\n    secp256k1Key;\n    constructor(publicKey) {\n        const keyName = resolveEnumKeyName(publicKey.keyType);\n        super({ [keyName]: publicKey });\n        this[keyName] = publicKey;\n        this.enum = keyName;\n    }\n    /**\n     * Creates a PublicKey instance from a string or an existing PublicKey instance.\n     * @param value The string or PublicKey instance to create a PublicKey from.\n     * @returns {PublicKey} The PublicKey instance.\n     */\n    static from(value) {\n        if (typeof value === 'string') {\n            return PublicKey.fromString(value);\n        }\n        return value;\n    }\n    /**\n     * Creates a PublicKey instance from an encoded key string.\n     * @param encodedKey The encoded key string.\n     * @returns {PublicKey} The PublicKey instance created from the encoded key string.\n     */\n    static fromString(encodedKey) {\n        const parts = encodedKey.split(':');\n        let publicKey;\n        let keyType;\n        if (parts.length === 1) {\n            publicKey = parts[0];\n        }\n        else if (parts.length === 2) {\n            publicKey = parts[1];\n            keyType = str_to_key_type(parts[0]);\n        }\n        else {\n            throw new Error('Invalid encoded key format, must be <curve>:<encoded key>');\n        }\n        const decodedPublicKey = (0, utils_1.baseDecode)(publicKey);\n        if (!keyType) {\n            keyType = decodedPublicKey.length === constants_1.KeySize.SECP256k1_PUBLIC_KEY ? constants_1.KeyType.SECP256K1 : constants_1.KeyType.ED25519;\n        }\n        const keySize = keyType === constants_1.KeyType.ED25519 ? constants_1.KeySize.ED25519_PUBLIC_KEY : constants_1.KeySize.SECP256k1_PUBLIC_KEY;\n        if (decodedPublicKey.length !== keySize) {\n            throw new Error(`Invalid public key size (${decodedPublicKey.length}), must be ${keySize}`);\n        }\n        return new PublicKey({ keyType, data: decodedPublicKey });\n    }\n    /**\n     * Returns a string representation of the public key.\n     * @returns {string} The string representation of the public key.\n     */\n    toString() {\n        const encodedKey = (0, utils_1.baseEncode)(this.data);\n        return `${key_type_to_str(this.keyType)}:${encodedKey}`;\n    }\n    /**\n     * Verifies a message signature using the public key.\n     * @param message The message to be verified.\n     * @param signature The signature to be verified.\n     * @returns {boolean} `true` if the signature is valid, otherwise `false`.\n     */\n    verify(message, signature) {\n        const keyType = this.keyType;\n        const data = this.data;\n        switch (keyType) {\n            case constants_1.KeyType.ED25519:\n                return ed25519_1.ed25519.verify(signature, message, data);\n            case constants_1.KeyType.SECP256K1:\n                return secp256k1_1.default.ecdsaVerify(signature.subarray(0, 64), message, new Uint8Array([0x04, ...data]));\n            default:\n                throw new Error(`Unknown key type: ${keyType}`);\n        }\n    }\n    get keyPair() {\n        return this.ed25519Key || this.secp256k1Key;\n    }\n    get keyType() {\n        return this.keyPair.keyType;\n    }\n    get data() {\n        return this.keyPair.data;\n    }\n}\nexports.PublicKey = PublicKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/public_key.cjs\n");

/***/ })

};
;