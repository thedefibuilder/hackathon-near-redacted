"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@near-js+providers@1.0.1";
exports.ids = ["vendor-chunks/@near-js+providers@1.0.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/exponential-backoff.cjs":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/exponential-backoff.cjs ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.exponentialBackoff = void 0;\nasync function exponentialBackoff(startWaitTime, retryNumber, waitBackoff, getResult) {\n    // TODO: jitter?\n    let waitTime = startWaitTime;\n    for (let i = 0; i < retryNumber; i++) {\n        const result = await getResult();\n        if (result) {\n            return result;\n        }\n        await sleep(waitTime);\n        waitTime *= waitBackoff;\n    }\n    return null;\n}\nexports.exponentialBackoff = exponentialBackoff;\n// Sleep given number of millis.\nfunction sleep(millis) {\n    return new Promise(resolve => setTimeout(resolve, millis));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrcHJvdmlkZXJzQDEuMC4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9wcm92aWRlcnMvbGliL2NvbW1vbmpzL2V4cG9uZW50aWFsLWJhY2tvZmYuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2hhY2thdGhvbi1uZWFyLXJlZGFjdGVkLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BuZWFyLWpzK3Byb3ZpZGVyc0AxLjAuMS9ub2RlX21vZHVsZXMvQG5lYXItanMvcHJvdmlkZXJzL2xpYi9jb21tb25qcy9leHBvbmVudGlhbC1iYWNrb2ZmLmNqcz8wMThhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5leHBvbmVudGlhbEJhY2tvZmYgPSB2b2lkIDA7XG5hc3luYyBmdW5jdGlvbiBleHBvbmVudGlhbEJhY2tvZmYoc3RhcnRXYWl0VGltZSwgcmV0cnlOdW1iZXIsIHdhaXRCYWNrb2ZmLCBnZXRSZXN1bHQpIHtcbiAgICAvLyBUT0RPOiBqaXR0ZXI/XG4gICAgbGV0IHdhaXRUaW1lID0gc3RhcnRXYWl0VGltZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJldHJ5TnVtYmVyOyBpKyspIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0UmVzdWx0KCk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgc2xlZXAod2FpdFRpbWUpO1xuICAgICAgICB3YWl0VGltZSAqPSB3YWl0QmFja29mZjtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5leHBvcnRzLmV4cG9uZW50aWFsQmFja29mZiA9IGV4cG9uZW50aWFsQmFja29mZjtcbi8vIFNsZWVwIGdpdmVuIG51bWJlciBvZiBtaWxsaXMuXG5mdW5jdGlvbiBzbGVlcChtaWxsaXMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1pbGxpcykpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/exponential-backoff.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/failover-rpc-provider.cjs":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/failover-rpc-provider.cjs ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FailoverRpcProvider = void 0;\n/**\n * @module\n * @description\n * This module contains the {@link FailoverRpcProvider} client class\n * which can be used to interact with multiple [NEAR RPC APIs](https://docs.near.org/api/rpc/introduction).\n * @see {@link \"@near-js/types\".provider | provider} for a list of request and response types\n */\nconst utils_1 = __webpack_require__(/*! @near-js/utils */ \"(ssr)/./node_modules/.pnpm/@near-js+utils@1.0.1/node_modules/@near-js/utils/lib/commonjs/index.cjs\");\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/.pnpm/@near-js+types@0.3.1/node_modules/@near-js/types/lib/commonjs/index.cjs\");\nconst provider_1 = __webpack_require__(/*! ./provider.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/provider.cjs\");\n/**\n * Client class to interact with the [NEAR RPC API](https://docs.near.org/api/rpc/introduction).\n * @see [https://github.com/near/nearcore/tree/master/chain/jsonrpc](https://github.com/near/nearcore/tree/master/chain/jsonrpc)\n */\nclass FailoverRpcProvider extends provider_1.Provider {\n    /** @hidden */\n    providers;\n    currentProviderIndex;\n    /**\n     * @param providers list of providers\n     */\n    constructor(providers) {\n        super();\n        if (providers.length === 0) {\n            throw new Error('At least one provider must be specified');\n        }\n        this.providers = providers;\n        this.currentProviderIndex = 0;\n    }\n    switchToNextProvider() {\n        if (this.providers.length === 1)\n            return;\n        if (this.providers.length - 1 <= this.currentProviderIndex) {\n            this.currentProviderIndex = 0;\n        }\n        else {\n            this.currentProviderIndex += 1;\n        }\n        utils_1.Logger.debug(`Switched to provider at the index ${this.currentProviderIndex}`);\n    }\n    get currentProvider() {\n        const provider = this.providers[this.currentProviderIndex];\n        if (!provider)\n            throw new Error(`Provider wasn't found at index ${this.currentProviderIndex}`);\n        return provider;\n    }\n    async withBackoff(getResult) {\n        for (let i = 0; i < this.providers.length; i++) {\n            try {\n                // each provider implements own retry logic\n                const result = await getResult(this.currentProvider);\n                if (result)\n                    return result;\n            }\n            catch (e) {\n                console.error(e);\n                this.switchToNextProvider();\n            }\n        }\n        throw new types_1.TypedError(`Exceeded ${this.providers.length} providers to execute request`, 'RetriesExceeded');\n    }\n    /**\n     * Gets the RPC's status\n     * @see [https://docs.near.org/docs/develop/front-end/rpc#general-validator-status](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)\n     */\n    async status() {\n        return this.withBackoff((currentProvider) => currentProvider.status());\n    }\n    async sendTransactionUntil(signedTransaction, waitUntil) {\n        return this.withBackoff((currentProvider) => currentProvider.sendTransactionUntil(signedTransaction, waitUntil));\n    }\n    /**\n     * Sends a signed transaction to the RPC and waits until transaction is fully complete\n     * @see [https://docs.near.org/docs/develop/front-end/rpc#send-transaction-await](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)\n     *\n     * @param signedTransaction The signed transaction being sent\n     */\n    async sendTransaction(signedTransaction) {\n        return this.withBackoff((currentProvider) => currentProvider.sendTransaction(signedTransaction));\n    }\n    /**\n     * Sends a signed transaction to the RPC and immediately returns transaction hash\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#send-transaction-async)\n     * @param signedTransaction The signed transaction being sent\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    async sendTransactionAsync(signedTransaction) {\n        return this.withBackoff((currentProvider) => currentProvider.sendTransactionAsync(signedTransaction));\n    }\n    /**\n     * Gets a transaction's status from the RPC\n     * @see [https://docs.near.org/docs/develop/front-end/rpc#transaction-status](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)\n     *\n     * @param txHash A transaction hash as either a Uint8Array or a base58 encoded string\n     * @param accountId The NEAR account that signed the transaction\n     */\n    async txStatus(txHash, accountId, waitUntil) {\n        return this.withBackoff((currentProvider) => currentProvider.txStatus(txHash, accountId, waitUntil));\n    }\n    /**\n     * Gets a transaction's status from the RPC with receipts\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#transaction-status-with-receipts)\n     * @param txHash The hash of the transaction\n     * @param accountId The NEAR account that signed the transaction\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    async txStatusReceipts(txHash, accountId, waitUntil) {\n        return this.withBackoff((currentProvider) => currentProvider.txStatusReceipts(txHash, accountId, waitUntil));\n    }\n    async query(paramsOrPath, data) {\n        if (data) {\n            return this.withBackoff((currentProvider) => currentProvider.query(paramsOrPath, data));\n        }\n        return this.withBackoff((currentProvider) => currentProvider.query(paramsOrPath));\n    }\n    /**\n     * Query for block info from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)\n     *\n     * @param blockQuery {@link BlockReference} (passing a {@link BlockId} is deprecated)\n     */\n    async block(blockQuery) {\n        return this.withBackoff((currentProvider) => currentProvider.block(blockQuery));\n    }\n    /**\n     * Query changes in block from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)\n     */\n    async blockChanges(blockQuery) {\n        return this.withBackoff((currentProvider) => currentProvider.blockChanges(blockQuery));\n    }\n    /**\n     * Queries for details about a specific chunk appending details of receipts and transactions to the same chunk data provided by a block\n     * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)\n     *\n     * @param chunkId Hash of a chunk ID or shard ID\n     */\n    async chunk(chunkId) {\n        return this.withBackoff((currentProvider) => currentProvider.chunk(chunkId));\n    }\n    /**\n     * Query validators of the epoch defined by the given block id.\n     * @see [https://docs.near.org/api/rpc/network#validation-status](https://docs.near.org/api/rpc/network#validation-status)\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */\n    async validators(blockId) {\n        return this.withBackoff((currentProvider) => currentProvider.validators(blockId));\n    }\n    /**\n     * Gets the protocol config at a block from RPC\n     *\n     * @param blockReference specifies the block to get the protocol config for\n     */\n    async experimental_protocolConfig(blockReference) {\n        return this.withBackoff((currentProvider) => currentProvider.experimental_protocolConfig(blockReference));\n    }\n    /**\n     * Gets a light client execution proof for verifying execution outcomes\n     * @see [https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof](https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof)\n     */\n    async lightClientProof(request) {\n        return this.withBackoff((currentProvider) => currentProvider.lightClientProof(request));\n    }\n    /**\n     * Returns the next light client block as far in the future as possible from the last known hash\n     * to still be able to validate from that hash. This will either return the last block of the\n     * next epoch, or the last final known block.\n     *\n     * @see [https://github.com/near/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-block](https://github.com/near/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-block)\n     */\n    async nextLightClientBlock(request) {\n        return this.withBackoff((currentProvider) => currentProvider.nextLightClientBlock(request));\n    }\n    /**\n     * Gets access key changes for a given array of accountIds\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-all)\n     * @returns {Promise<ChangeResult>}\n     */\n    async accessKeyChanges(accountIdArray, blockQuery) {\n        return this.withBackoff((currentProvider) => currentProvider.accessKeyChanges(accountIdArray, blockQuery));\n    }\n    /**\n     * Gets single access key changes for a given array of access keys\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-single)\n     * @returns {Promise<ChangeResult>}\n     */\n    async singleAccessKeyChanges(accessKeyArray, blockQuery) {\n        return this.withBackoff((currentProvider) => currentProvider.singleAccessKeyChanges(accessKeyArray, blockQuery));\n    }\n    /**\n     * Gets account changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-account-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    async accountChanges(accountIdArray, blockQuery) {\n        return this.withBackoff((currentProvider) => currentProvider.accountChanges(accountIdArray, blockQuery));\n    }\n    /**\n     * Gets contract state changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: If you pass a keyPrefix it must be base64 encoded\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-state-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    async contractStateChanges(accountIdArray, blockQuery, keyPrefix = '') {\n        return this.withBackoff((currentProvider) => currentProvider.contractStateChanges(accountIdArray, blockQuery, keyPrefix));\n    }\n    /**\n     * Gets contract code changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: Change is returned in a base64 encoded WASM file\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-code-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    async contractCodeChanges(accountIdArray, blockQuery) {\n        return this.withBackoff((currentProvider) => currentProvider.contractCodeChanges(accountIdArray, blockQuery));\n    }\n    /**\n     * Returns gas price for a specific block_height or block_hash.\n     * @see [https://docs.near.org/api/rpc/gas](https://docs.near.org/api/rpc/gas)\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */\n    async gasPrice(blockId) {\n        return this.withBackoff((currentProvider) => currentProvider.gasPrice(blockId));\n    }\n}\nexports.FailoverRpcProvider = FailoverRpcProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/failover-rpc-provider.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/fetch_json.cjs":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/fetch_json.cjs ***!
  \*****************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fetchJsonRpc = void 0;\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/.pnpm/@near-js+types@0.3.1/node_modules/@near-js/types/lib/commonjs/index.cjs\");\nconst exponential_backoff_1 = __webpack_require__(/*! exponential-backoff */ \"(ssr)/./node_modules/.pnpm/exponential-backoff@3.1.1/node_modules/exponential-backoff/dist/backoff.js\");\nconst isomorphic_unfetch_1 = __importDefault(__webpack_require__(/*! isomorphic-unfetch */ \"(ssr)/./node_modules/.pnpm/isomorphic-unfetch@3.1.0/node_modules/isomorphic-unfetch/index.js\"));\nconst BACKOFF_MULTIPLIER = 1.5;\nconst RETRY_NUMBER = 10;\nconst retryConfig = {\n    numOfAttempts: RETRY_NUMBER,\n    timeMultiple: BACKOFF_MULTIPLIER,\n    retry: (e) => {\n        if ([503, 408].includes(e.cause)) {\n            return true;\n        }\n        if (e.toString().includes('FetchError') || e.toString().includes('Failed to fetch')) {\n            return true;\n        }\n        return false;\n    }\n};\nclass ProviderError extends Error {\n    cause;\n    constructor(message, options) {\n        super(message, options);\n    }\n}\n/**\n * Performs an HTTP request to an RPC endpoint\n * @param url URL for the HTTP request\n * @param json Request body\n * @param headers HTTP headers to include with the request\n * @returns Promise<any> }arsed JSON response from the HTTP request.\n */\nasync function fetchJsonRpc(url, json, headers) {\n    const response = await (0, exponential_backoff_1.backOff)(async () => {\n        const res = await (0, isomorphic_unfetch_1.default)(url, {\n            method: 'POST',\n            body: JSON.stringify(json),\n            headers: { ...headers, 'Content-Type': 'application/json' }\n        });\n        const { ok, status } = res;\n        if (!ok) {\n            throw new ProviderError(await res.text(), { cause: status });\n        }\n        if (status === 503) {\n            throw new ProviderError(`${url} unavailable`, { cause: status });\n        }\n        else if (status === 408) {\n            throw new ProviderError('Unused connection', { cause: status });\n        }\n        return res;\n    }, retryConfig);\n    if (!response) {\n        throw new types_1.TypedError(`Exceeded ${RETRY_NUMBER} attempts for ${url}.`, 'RetriesExceeded');\n    }\n    return await response.json();\n}\nexports.fetchJsonRpc = fetchJsonRpc;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrcHJvdmlkZXJzQDEuMC4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9wcm92aWRlcnMvbGliL2NvbW1vbmpzL2ZldGNoX2pzb24uY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CO0FBQ3BCLGdCQUFnQixtQkFBTyxDQUFDLDBIQUFnQjtBQUN4Qyw4QkFBOEIsbUJBQU8sQ0FBQyxrSUFBcUI7QUFDM0QsNkNBQTZDLG1CQUFPLENBQUMsd0hBQW9CO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCLFNBQVM7QUFDVCxnQkFBZ0IsYUFBYTtBQUM3QjtBQUNBLHdEQUF3RCxlQUFlO0FBQ3ZFO0FBQ0E7QUFDQSx1Q0FBdUMsS0FBSyxnQkFBZ0IsZUFBZTtBQUMzRTtBQUNBO0FBQ0EsMkRBQTJELGVBQWU7QUFDMUU7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGlEQUFpRCxjQUFjLGVBQWUsSUFBSTtBQUNsRjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrYXRob24tbmVhci1yZWRhY3RlZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbmVhci1qcytwcm92aWRlcnNAMS4wLjEvbm9kZV9tb2R1bGVzL0BuZWFyLWpzL3Byb3ZpZGVycy9saWIvY29tbW9uanMvZmV0Y2hfanNvbi5janM/N2I3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmV0Y2hKc29uUnBjID0gdm9pZCAwO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCJAbmVhci1qcy90eXBlc1wiKTtcbmNvbnN0IGV4cG9uZW50aWFsX2JhY2tvZmZfMSA9IHJlcXVpcmUoXCJleHBvbmVudGlhbC1iYWNrb2ZmXCIpO1xuY29uc3QgaXNvbW9ycGhpY191bmZldGNoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImlzb21vcnBoaWMtdW5mZXRjaFwiKSk7XG5jb25zdCBCQUNLT0ZGX01VTFRJUExJRVIgPSAxLjU7XG5jb25zdCBSRVRSWV9OVU1CRVIgPSAxMDtcbmNvbnN0IHJldHJ5Q29uZmlnID0ge1xuICAgIG51bU9mQXR0ZW1wdHM6IFJFVFJZX05VTUJFUixcbiAgICB0aW1lTXVsdGlwbGU6IEJBQ0tPRkZfTVVMVElQTElFUixcbiAgICByZXRyeTogKGUpID0+IHtcbiAgICAgICAgaWYgKFs1MDMsIDQwOF0uaW5jbHVkZXMoZS5jYXVzZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlLnRvU3RyaW5nKCkuaW5jbHVkZXMoJ0ZldGNoRXJyb3InKSB8fCBlLnRvU3RyaW5nKCkuaW5jbHVkZXMoJ0ZhaWxlZCB0byBmZXRjaCcpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcbmNsYXNzIFByb3ZpZGVyRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY2F1c2U7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCBvcHRpb25zKTtcbiAgICB9XG59XG4vKipcbiAqIFBlcmZvcm1zIGFuIEhUVFAgcmVxdWVzdCB0byBhbiBSUEMgZW5kcG9pbnRcbiAqIEBwYXJhbSB1cmwgVVJMIGZvciB0aGUgSFRUUCByZXF1ZXN0XG4gKiBAcGFyYW0ganNvbiBSZXF1ZXN0IGJvZHlcbiAqIEBwYXJhbSBoZWFkZXJzIEhUVFAgaGVhZGVycyB0byBpbmNsdWRlIHdpdGggdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIFByb21pc2U8YW55PiB9YXJzZWQgSlNPTiByZXNwb25zZSBmcm9tIHRoZSBIVFRQIHJlcXVlc3QuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGZldGNoSnNvblJwYyh1cmwsIGpzb24sIGhlYWRlcnMpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCBleHBvbmVudGlhbF9iYWNrb2ZmXzEuYmFja09mZikoYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCAoMCwgaXNvbW9ycGhpY191bmZldGNoXzEuZGVmYXVsdCkodXJsLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGpzb24pLFxuICAgICAgICAgICAgaGVhZGVyczogeyAuLi5oZWFkZXJzLCAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHsgb2ssIHN0YXR1cyB9ID0gcmVzO1xuICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUHJvdmlkZXJFcnJvcihhd2FpdCByZXMudGV4dCgpLCB7IGNhdXNlOiBzdGF0dXMgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gNTAzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUHJvdmlkZXJFcnJvcihgJHt1cmx9IHVuYXZhaWxhYmxlYCwgeyBjYXVzZTogc3RhdHVzIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0YXR1cyA9PT0gNDA4KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUHJvdmlkZXJFcnJvcignVW51c2VkIGNvbm5lY3Rpb24nLCB7IGNhdXNlOiBzdGF0dXMgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9LCByZXRyeUNvbmZpZyk7XG4gICAgaWYgKCFyZXNwb25zZSkge1xuICAgICAgICB0aHJvdyBuZXcgdHlwZXNfMS5UeXBlZEVycm9yKGBFeGNlZWRlZCAke1JFVFJZX05VTUJFUn0gYXR0ZW1wdHMgZm9yICR7dXJsfS5gLCAnUmV0cmllc0V4Y2VlZGVkJyk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XG59XG5leHBvcnRzLmZldGNoSnNvblJwYyA9IGZldGNoSnNvblJwYztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/fetch_json.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/index.cjs":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/index.cjs ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Provider = exports.FailoverRpcProvider = exports.JsonRpcProvider = exports.exponentialBackoff = void 0;\nvar exponential_backoff_1 = __webpack_require__(/*! ./exponential-backoff.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/exponential-backoff.cjs\");\nObject.defineProperty(exports, \"exponentialBackoff\", ({ enumerable: true, get: function () { return exponential_backoff_1.exponentialBackoff; } }));\nvar json_rpc_provider_1 = __webpack_require__(/*! ./json-rpc-provider.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/json-rpc-provider.cjs\");\nObject.defineProperty(exports, \"JsonRpcProvider\", ({ enumerable: true, get: function () { return json_rpc_provider_1.JsonRpcProvider; } }));\nvar failover_rpc_provider_1 = __webpack_require__(/*! ./failover-rpc-provider.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/failover-rpc-provider.cjs\");\nObject.defineProperty(exports, \"FailoverRpcProvider\", ({ enumerable: true, get: function () { return failover_rpc_provider_1.FailoverRpcProvider; } }));\nvar provider_1 = __webpack_require__(/*! ./provider.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/provider.cjs\");\nObject.defineProperty(exports, \"Provider\", ({ enumerable: true, get: function () { return provider_1.Provider; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrcHJvdmlkZXJzQDEuMC4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9wcm92aWRlcnMvbGliL2NvbW1vbmpzL2luZGV4LmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsR0FBRywyQkFBMkIsR0FBRyx1QkFBdUIsR0FBRywwQkFBMEI7QUFDckcsNEJBQTRCLG1CQUFPLENBQUMsMkpBQTJCO0FBQy9ELHNEQUFxRCxFQUFFLHFDQUFxQyxvREFBb0QsRUFBQztBQUNqSiwwQkFBMEIsbUJBQU8sQ0FBQyx1SkFBeUI7QUFDM0QsbURBQWtELEVBQUUscUNBQXFDLCtDQUErQyxFQUFDO0FBQ3pJLDhCQUE4QixtQkFBTyxDQUFDLCtKQUE2QjtBQUNuRSx1REFBc0QsRUFBRSxxQ0FBcUMsdURBQXVELEVBQUM7QUFDckosaUJBQWlCLG1CQUFPLENBQUMscUlBQWdCO0FBQ3pDLDRDQUEyQyxFQUFFLHFDQUFxQywrQkFBK0IsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2hhY2thdGhvbi1uZWFyLXJlZGFjdGVkLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BuZWFyLWpzK3Byb3ZpZGVyc0AxLjAuMS9ub2RlX21vZHVsZXMvQG5lYXItanMvcHJvdmlkZXJzL2xpYi9jb21tb25qcy9pbmRleC5janM/ZTdjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUHJvdmlkZXIgPSBleHBvcnRzLkZhaWxvdmVyUnBjUHJvdmlkZXIgPSBleHBvcnRzLkpzb25ScGNQcm92aWRlciA9IGV4cG9ydHMuZXhwb25lbnRpYWxCYWNrb2ZmID0gdm9pZCAwO1xudmFyIGV4cG9uZW50aWFsX2JhY2tvZmZfMSA9IHJlcXVpcmUoXCIuL2V4cG9uZW50aWFsLWJhY2tvZmYuY2pzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZXhwb25lbnRpYWxCYWNrb2ZmXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBleHBvbmVudGlhbF9iYWNrb2ZmXzEuZXhwb25lbnRpYWxCYWNrb2ZmOyB9IH0pO1xudmFyIGpzb25fcnBjX3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9qc29uLXJwYy1wcm92aWRlci5janNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJKc29uUnBjUHJvdmlkZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGpzb25fcnBjX3Byb3ZpZGVyXzEuSnNvblJwY1Byb3ZpZGVyOyB9IH0pO1xudmFyIGZhaWxvdmVyX3JwY19wcm92aWRlcl8xID0gcmVxdWlyZShcIi4vZmFpbG92ZXItcnBjLXByb3ZpZGVyLmNqc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkZhaWxvdmVyUnBjUHJvdmlkZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhaWxvdmVyX3JwY19wcm92aWRlcl8xLkZhaWxvdmVyUnBjUHJvdmlkZXI7IH0gfSk7XG52YXIgcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVyLmNqc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlByb3ZpZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm92aWRlcl8xLlByb3ZpZGVyOyB9IH0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/json-rpc-provider.cjs":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/json-rpc-provider.cjs ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JsonRpcProvider = void 0;\n/**\n * @module\n * @description\n * This module contains the {@link JsonRpcProvider} client class\n * which can be used to interact with the [NEAR RPC API](https://docs.near.org/api/rpc/introduction).\n * @see {@link \"@near-js/types\".provider | provider} for a list of request and response types\n */\nconst utils_1 = __webpack_require__(/*! @near-js/utils */ \"(ssr)/./node_modules/.pnpm/@near-js+utils@1.0.1/node_modules/@near-js/utils/lib/commonjs/index.cjs\");\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/.pnpm/@near-js+types@0.3.1/node_modules/@near-js/types/lib/commonjs/index.cjs\");\nconst transactions_1 = __webpack_require__(/*! @near-js/transactions */ \"(ssr)/./node_modules/.pnpm/@near-js+transactions@1.3.1/node_modules/@near-js/transactions/lib/commonjs/index.cjs\");\nconst exponential_backoff_1 = __webpack_require__(/*! ./exponential-backoff.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/exponential-backoff.cjs\");\nconst provider_1 = __webpack_require__(/*! ./provider.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/provider.cjs\");\nconst fetch_json_1 = __webpack_require__(/*! ./fetch_json.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/fetch_json.cjs\");\n/** @hidden */\n// Default number of retries before giving up on a request.\nconst REQUEST_RETRY_NUMBER = 12;\n// Default wait until next retry in millis.\nconst REQUEST_RETRY_WAIT = 500;\n// Exponential back off for waiting to retry.\nconst REQUEST_RETRY_WAIT_BACKOFF = 1.5;\n/// Keep ids unique across all connections.\nlet _nextId = 123;\n/**\n * Client class to interact with the [NEAR RPC API](https://docs.near.org/api/rpc/introduction).\n * @see [https://github.com/near/nearcore/tree/master/chain/jsonrpc](https://github.com/near/nearcore/tree/master/chain/jsonrpc)\n */\nclass JsonRpcProvider extends provider_1.Provider {\n    /** @hidden */\n    connection;\n    /** @hidden */\n    options;\n    /**\n     * @param connectionInfo Connection info\n     */\n    constructor(connectionInfo, options) {\n        super();\n        this.connection = connectionInfo || { url: '' };\n        const defaultOptions = {\n            retries: REQUEST_RETRY_NUMBER,\n            wait: REQUEST_RETRY_WAIT,\n            backoff: REQUEST_RETRY_WAIT_BACKOFF\n        };\n        this.options = Object.assign({}, defaultOptions, options);\n    }\n    /**\n     * Gets the RPC's status\n     * @see [https://docs.near.org/docs/develop/front-end/rpc#general-validator-status](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)\n     */\n    async status() {\n        return this.sendJsonRpc('status', []);\n    }\n    /**\n     * Sends a signed transaction to the RPC\n     *\n     * @param signedTransaction The signed transaction being sent\n     * @param waitUntil\n     */\n    async sendTransactionUntil(signedTransaction, waitUntil) {\n        const bytes = (0, transactions_1.encodeTransaction)(signedTransaction);\n        return this.sendJsonRpc('send_tx', { signed_tx_base64: Buffer.from(bytes).toString('base64'), wait_until: waitUntil });\n    }\n    /**\n     * Sends a signed transaction to the RPC and waits until transaction is fully complete\n     * @see [https://docs.near.org/docs/develop/front-end/rpc#send-transaction-await](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)\n     *\n     * @param signedTransaction The signed transaction being sent\n     */\n    async sendTransaction(signedTransaction) {\n        return this.sendTransactionUntil(signedTransaction, 'EXECUTED_OPTIMISTIC');\n    }\n    /**\n     * Sends a signed transaction to the RPC and immediately returns transaction hash\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#send-transaction-async)\n     * @param signedTransaction The signed transaction being sent\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    async sendTransactionAsync(signedTransaction) {\n        return this.sendTransactionUntil(signedTransaction, 'NONE');\n    }\n    /**\n     * Gets a transaction's status from the RPC\n     * @see [https://docs.near.org/docs/develop/front-end/rpc#transaction-status](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)\n     *\n     * @param txHash A transaction hash as either a Uint8Array or a base58 encoded string\n     * @param accountId The NEAR account that signed the transaction\n     * @param waitUntil\n     */\n    async txStatus(txHash, accountId, waitUntil = 'EXECUTED_OPTIMISTIC') {\n        if (typeof txHash === 'string') {\n            return this.txStatusString(txHash, accountId, waitUntil);\n        }\n        else {\n            return this.txStatusUint8Array(txHash, accountId, waitUntil);\n        }\n    }\n    async txStatusUint8Array(txHash, accountId, waitUntil) {\n        return this.sendJsonRpc('tx', { tx_hash: (0, utils_1.baseEncode)(txHash), sender_account_id: accountId, wait_until: waitUntil });\n    }\n    async txStatusString(txHash, accountId, waitUntil) {\n        return this.sendJsonRpc('tx', { tx_hash: txHash, sender_account_id: accountId, wait_until: waitUntil });\n    }\n    /**\n     * Gets a transaction's status from the RPC with receipts\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#transaction-status-with-receipts)\n     * @param txHash The hash of the transaction\n     * @param accountId The NEAR account that signed the transaction\n     * @param waitUntil\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    async txStatusReceipts(txHash, accountId, waitUntil = 'EXECUTED_OPTIMISTIC') {\n        if (typeof txHash === 'string') {\n            return this.sendJsonRpc('EXPERIMENTAL_tx_status', { tx_hash: txHash, sender_account_id: accountId, wait_until: waitUntil });\n        }\n        else {\n            return this.sendJsonRpc('EXPERIMENTAL_tx_status', { tx_hash: (0, utils_1.baseEncode)(txHash), sender_account_id: accountId, wait_until: waitUntil });\n        }\n    }\n    /**\n     * Query the RPC by passing an {@link \"@near-js/types\".provider/request.RpcQueryRequest | RpcQueryRequest }\n     * @see [https://docs.near.org/api/rpc/contracts](https://docs.near.org/api/rpc/contracts)\n     *\n     * @typeParam T the shape of the returned query response\n     */\n    async query(...args) {\n        let result;\n        if (args.length === 1) {\n            const { block_id, blockId, ...otherParams } = args[0];\n            result = await this.sendJsonRpc('query', { ...otherParams, block_id: block_id || blockId });\n        }\n        else {\n            const [path, data] = args;\n            result = await this.sendJsonRpc('query', [path, data]);\n        }\n        if (result && result.error) {\n            throw new types_1.TypedError(`Querying failed: ${result.error}.\\n${JSON.stringify(result, null, 2)}`, (0, utils_1.getErrorTypeFromErrorMessage)(result.error, result.error.name));\n        }\n        return result;\n    }\n    /**\n     * Query for block info from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)\n     *\n     * @param blockQuery {@link BlockReference} (passing a {@link BlockId} is deprecated)\n     */\n    async block(blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('block', { block_id: blockId, finality });\n    }\n    /**\n     * Query changes in block from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)\n     */\n    async blockChanges(blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes_in_block', { block_id: blockId, finality });\n    }\n    /**\n     * Queries for details about a specific chunk appending details of receipts and transactions to the same chunk data provided by a block\n     * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)\n     *\n     * @param chunkId Hash of a chunk ID or shard ID\n     */\n    async chunk(chunkId) {\n        return this.sendJsonRpc('chunk', [chunkId]);\n    }\n    /**\n     * Query validators of the epoch defined by the given block id.\n     * @see [https://docs.near.org/api/rpc/network#validation-status](https://docs.near.org/api/rpc/network#validation-status)\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */\n    async validators(blockId) {\n        return this.sendJsonRpc('validators', [blockId]);\n    }\n    /**\n     * Gets the protocol config at a block from RPC\n     *\n     * @param blockReference specifies the block to get the protocol config for\n     */\n    async experimental_protocolConfig(blockReference) {\n        const { blockId, ...otherParams } = blockReference;\n        return await this.sendJsonRpc('EXPERIMENTAL_protocol_config', { ...otherParams, block_id: blockId });\n    }\n    /**\n     * Gets a light client execution proof for verifying execution outcomes\n     * @see [https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof](https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof)\n     */\n    async lightClientProof(request) {\n        return await this.sendJsonRpc('EXPERIMENTAL_light_client_proof', request);\n    }\n    /**\n     * Returns the next light client block as far in the future as possible from the last known hash\n     * to still be able to validate from that hash. This will either return the last block of the\n     * next epoch, or the last final known block.\n     *\n     * @see [https://github.com/near/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-block](https://github.com/near/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-block)\n     */\n    async nextLightClientBlock(request) {\n        return await this.sendJsonRpc('next_light_client_block', request);\n    }\n    /**\n     * Gets access key changes for a given array of accountIds\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-all)\n     * @returns {Promise<ChangeResult>}\n     */\n    async accessKeyChanges(accountIdArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'all_access_key_changes',\n            account_ids: accountIdArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets single access key changes for a given array of access keys\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-single)\n     * @returns {Promise<ChangeResult>}\n     */\n    async singleAccessKeyChanges(accessKeyArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'single_access_key_changes',\n            keys: accessKeyArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets account changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-account-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    async accountChanges(accountIdArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'account_changes',\n            account_ids: accountIdArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets contract state changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: If you pass a keyPrefix it must be base64 encoded\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-state-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    async contractStateChanges(accountIdArray, blockQuery, keyPrefix = '') {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'data_changes',\n            account_ids: accountIdArray,\n            key_prefix_base64: keyPrefix,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets contract code changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: Change is returned in a base64 encoded WASM file\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-code-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    async contractCodeChanges(accountIdArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'contract_code_changes',\n            account_ids: accountIdArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Returns gas price for a specific block_height or block_hash.\n     * @see [https://docs.near.org/api/rpc/gas](https://docs.near.org/api/rpc/gas)\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */\n    async gasPrice(blockId) {\n        return await this.sendJsonRpc('gas_price', [blockId]);\n    }\n    /**\n     * Directly call the RPC specifying the method and params\n     *\n     * @param method RPC method\n     * @param params Parameters to the method\n     */\n    async sendJsonRpc(method, params) {\n        const response = await (0, exponential_backoff_1.exponentialBackoff)(this.options.wait, this.options.retries, this.options.backoff, async () => {\n            try {\n                const request = {\n                    method,\n                    params,\n                    id: (_nextId++),\n                    jsonrpc: '2.0'\n                };\n                const response = await (0, fetch_json_1.fetchJsonRpc)(this.connection.url, request, this.connection.headers);\n                if (response.error) {\n                    if (typeof response.error.data === 'object') {\n                        if (typeof response.error.data.error_message === 'string' && typeof response.error.data.error_type === 'string') {\n                            // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n                            throw new types_1.TypedError(response.error.data.error_message, response.error.data.error_type);\n                        }\n                        throw (0, utils_1.parseRpcError)(response.error.data);\n                    }\n                    else {\n                        const errorMessage = `[${response.error.code}] ${response.error.message}: ${response.error.data}`;\n                        // NOTE: All this hackery is happening because structured errors not implemented\n                        // TODO: Fix when https://github.com/nearprotocol/nearcore/issues/1839 gets resolved\n                        if (response.error.data === 'Timeout' || errorMessage.includes('Timeout error')\n                            || errorMessage.includes('query has timed out')) {\n                            throw new types_1.TypedError(errorMessage, 'TimeoutError');\n                        }\n                        const errorType = (0, utils_1.getErrorTypeFromErrorMessage)(response.error.data, '');\n                        if (errorType) {\n                            throw new types_1.TypedError((0, utils_1.formatError)(errorType, params), errorType);\n                        }\n                        throw new types_1.TypedError(errorMessage, response.error.name);\n                    }\n                }\n                else if (typeof response.result?.error === 'string') {\n                    const errorType = (0, utils_1.getErrorTypeFromErrorMessage)(response.result.error, '');\n                    if (errorType) {\n                        throw new utils_1.ServerError((0, utils_1.formatError)(errorType, params), errorType);\n                    }\n                }\n                // Success when response.error is not exist\n                return response;\n            }\n            catch (error) {\n                if (error.type === 'TimeoutError') {\n                    utils_1.Logger.warn(`Retrying request to ${method} as it has timed out`, params);\n                    return null;\n                }\n                throw error;\n            }\n        });\n        const { result } = response;\n        // From jsonrpc spec:\n        // result\n        //   This member is REQUIRED on success.\n        //   This member MUST NOT exist if there was an error invoking the method.\n        if (typeof result === 'undefined') {\n            throw new types_1.TypedError(`Exceeded ${this.options.retries} attempts for request to ${method}.`, 'RetriesExceeded');\n        }\n        return result;\n    }\n}\nexports.JsonRpcProvider = JsonRpcProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/json-rpc-provider.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/provider.cjs":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/provider.cjs ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * NEAR RPC API request types and responses\n * @module\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Provider = void 0;\n/** @hidden */\nclass Provider {\n}\nexports.Provider = Provider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrcHJvdmlkZXJzQDEuMC4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9wcm92aWRlcnMvbGliL2NvbW1vbmpzL3Byb3ZpZGVyLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrYXRob24tbmVhci1yZWRhY3RlZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbmVhci1qcytwcm92aWRlcnNAMS4wLjEvbm9kZV9tb2R1bGVzL0BuZWFyLWpzL3Byb3ZpZGVycy9saWIvY29tbW9uanMvcHJvdmlkZXIuY2pzPzQxM2EiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIE5FQVIgUlBDIEFQSSByZXF1ZXN0IHR5cGVzIGFuZCByZXNwb25zZXNcbiAqIEBtb2R1bGVcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Qcm92aWRlciA9IHZvaWQgMDtcbi8qKiBAaGlkZGVuICovXG5jbGFzcyBQcm92aWRlciB7XG59XG5leHBvcnRzLlByb3ZpZGVyID0gUHJvdmlkZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/provider.cjs\n");

/***/ })

};
;