"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@near-js+accounts@1.3.1";
exports.ids = ["vendor-chunks/@near-js+accounts@1.3.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/account.cjs":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/account.cjs ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Account = void 0;\nconst crypto_1 = __webpack_require__(/*! @near-js/crypto */ \"(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/index.cjs\");\nconst providers_1 = __webpack_require__(/*! @near-js/providers */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/index.cjs\");\nconst transactions_1 = __webpack_require__(/*! @near-js/transactions */ \"(ssr)/./node_modules/.pnpm/@near-js+transactions@1.3.1/node_modules/@near-js/transactions/lib/commonjs/index.cjs\");\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/.pnpm/@near-js+types@0.3.1/node_modules/@near-js/types/lib/commonjs/index.cjs\");\nconst utils_1 = __webpack_require__(/*! @near-js/utils */ \"(ssr)/./node_modules/.pnpm/@near-js+utils@1.0.1/node_modules/@near-js/utils/lib/commonjs/index.cjs\");\nconst utils_2 = __webpack_require__(/*! ./utils.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/utils.cjs\");\nconst { addKey, createAccount, deleteAccount, deleteKey, deployContract, fullAccessKey, functionCall, functionCallAccessKey, stake, transfer, } = transactions_1.actionCreators;\n// Default number of retries with different nonce before giving up on a transaction.\nconst TX_NONCE_RETRY_NUMBER = 12;\n// Default wait until next retry in millis.\nconst TX_NONCE_RETRY_WAIT = 500;\n// Exponential back off for waiting to retry.\nconst TX_NONCE_RETRY_WAIT_BACKOFF = 1.5;\n/**\n * This class provides common account related RPC calls including signing transactions with a {@link \"@near-js/crypto\".key_pair.KeyPair | KeyPair}.\n */\nclass Account {\n    connection;\n    accountId;\n    constructor(connection, accountId) {\n        this.connection = connection;\n        this.accountId = accountId;\n    }\n    getConnection() {\n        return this.connection;\n    }\n    /**\n     * Returns basic NEAR account information via the `view_account` RPC query method\n     * @see [https://docs.near.org/api/rpc/contracts#view-account](https://docs.near.org/api/rpc/contracts#view-account)\n     */\n    async state() {\n        return this.connection.provider.query({\n            request_type: 'view_account',\n            account_id: this.accountId,\n            finality: 'optimistic'\n        });\n    }\n    /**\n     * Create a signed transaction which can be broadcast to the network\n     * @param receiverId NEAR account receiving the transaction\n     * @param actions list of actions to perform as part of the transaction\n     * @see {@link \"@near-js/providers\".json-rpc-provider.JsonRpcProvider.sendTransaction | JsonRpcProvider.sendTransaction}\n     */\n    async signTransaction(receiverId, actions) {\n        const accessKeyInfo = await this.findAccessKey(receiverId, actions);\n        if (!accessKeyInfo) {\n            throw new types_1.TypedError(`Can not sign transactions for account ${this.accountId} on network ${this.connection.networkId}, no matching key pair exists for this account`, 'KeyNotFound');\n        }\n        const { accessKey } = accessKeyInfo;\n        const block = await this.connection.provider.block({ finality: 'final' });\n        const blockHash = block.header.hash;\n        const nonce = accessKey.nonce + 1n;\n        return await (0, transactions_1.signTransaction)(receiverId, nonce, actions, (0, utils_1.baseDecode)(blockHash), this.connection.signer, this.accountId, this.connection.networkId);\n    }\n    /**\n     * Sign a transaction to perform a list of actions and broadcast it using the RPC API.\n     * @see {@link \"@near-js/providers\".json-rpc-provider.JsonRpcProvider | JsonRpcProvider }\n     *\n     * @param options The options for signing and sending the transaction.\n     * @param options.receiverId The NEAR account ID of the transaction receiver.\n     * @param options.actions The list of actions to be performed in the transaction.\n     * @param options.returnError Whether to return an error if the transaction fails.\n     * @returns {Promise<FinalExecutionOutcome>} A promise that resolves to the final execution outcome of the transaction.\n     */\n    async signAndSendTransaction({ receiverId, actions, returnError }) {\n        let txHash, signedTx;\n        // TODO: TX_NONCE (different constants for different uses of exponentialBackoff?)\n        const result = await (0, providers_1.exponentialBackoff)(TX_NONCE_RETRY_WAIT, TX_NONCE_RETRY_NUMBER, TX_NONCE_RETRY_WAIT_BACKOFF, async () => {\n            [txHash, signedTx] = await this.signTransaction(receiverId, actions);\n            const publicKey = signedTx.transaction.publicKey;\n            try {\n                return await this.connection.provider.sendTransaction(signedTx);\n            }\n            catch (error) {\n                if (error.type === 'InvalidNonce') {\n                    utils_1.Logger.warn(`Retrying transaction ${receiverId}:${(0, utils_1.baseEncode)(txHash)} with new nonce.`);\n                    delete this.accessKeyByPublicKeyCache[publicKey.toString()];\n                    return null;\n                }\n                if (error.type === 'Expired') {\n                    utils_1.Logger.warn(`Retrying transaction ${receiverId}:${(0, utils_1.baseEncode)(txHash)} due to expired block hash`);\n                    return null;\n                }\n                error.context = new types_1.ErrorContext((0, utils_1.baseEncode)(txHash));\n                throw error;\n            }\n        });\n        if (!result) {\n            // TODO: This should have different code actually, as means \"transaction not submitted for sure\"\n            throw new types_1.TypedError('nonce retries exceeded for transaction. This usually means there are too many parallel requests with the same access key.', 'RetriesExceeded');\n        }\n        (0, utils_1.printTxOutcomeLogsAndFailures)({ contractId: signedTx.transaction.receiverId, outcome: result });\n        // Should be falsy if result.status.Failure is null\n        if (!returnError && typeof result.status === 'object' && typeof result.status.Failure === 'object' && result.status.Failure !== null) {\n            // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n            if (result.status.Failure.error_message && result.status.Failure.error_type) {\n                throw new types_1.TypedError(`Transaction ${result.transaction_outcome.id} failed. ${result.status.Failure.error_message}`, result.status.Failure.error_type);\n            }\n            else {\n                throw (0, utils_1.parseResultError)(result);\n            }\n        }\n        // TODO: if Tx is Unknown or Started.\n        return result;\n    }\n    /** @hidden */\n    accessKeyByPublicKeyCache = {};\n    /**\n     * Finds the {@link AccessKeyView} associated with the accounts {@link PublicKey} stored in the {@link \"@near-js/keystores\".keystore.KeyStore | Keystore}.\n     *\n     * @todo Find matching access key based on transaction (i.e. receiverId and actions)\n     *\n     * @param receiverId currently unused (see todo)\n     * @param actions currently unused (see todo)\n     * @returns `{ publicKey PublicKey; accessKey: AccessKeyView }`\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async findAccessKey(receiverId, actions) {\n        // TODO: Find matching access key based on transaction (i.e. receiverId and actions)\n        const publicKey = await this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\n        if (!publicKey) {\n            throw new types_1.TypedError(`no matching key pair found in ${this.connection.signer}`, 'PublicKeyNotFound');\n        }\n        const cachedAccessKey = this.accessKeyByPublicKeyCache[publicKey.toString()];\n        if (cachedAccessKey !== undefined) {\n            return { publicKey, accessKey: cachedAccessKey };\n        }\n        try {\n            const rawAccessKey = await this.connection.provider.query({\n                request_type: 'view_access_key',\n                account_id: this.accountId,\n                public_key: publicKey.toString(),\n                finality: 'optimistic'\n            });\n            // store nonce as BigInt to preserve precision on big number\n            const accessKey = {\n                ...rawAccessKey,\n                nonce: BigInt(rawAccessKey.nonce || 0)\n            };\n            // this function can be called multiple times and retrieve the same access key\n            // this checks to see if the access key was already retrieved and cached while\n            // the above network call was in flight. To keep nonce values in line, we return\n            // the cached access key.\n            if (this.accessKeyByPublicKeyCache[publicKey.toString()]) {\n                return { publicKey, accessKey: this.accessKeyByPublicKeyCache[publicKey.toString()] };\n            }\n            this.accessKeyByPublicKeyCache[publicKey.toString()] = accessKey;\n            return { publicKey, accessKey };\n        }\n        catch (e) {\n            if (e.type == 'AccessKeyDoesNotExist') {\n                return null;\n            }\n            throw e;\n        }\n    }\n    /**\n     * Create a new account and deploy a contract to it\n     *\n     * @param contractId NEAR account where the contract is deployed\n     * @param publicKey The public key to add to the created contract account\n     * @param data The compiled contract code\n     * @param amount of NEAR to transfer to the created contract account. Transfer enough to pay for storage https://docs.near.org/docs/concepts/storage-staking\n     */\n    async createAndDeployContract(contractId, publicKey, data, amount) {\n        const accessKey = fullAccessKey();\n        await this.signAndSendTransaction({\n            receiverId: contractId,\n            actions: [createAccount(), transfer(amount), addKey(crypto_1.PublicKey.from(publicKey), accessKey), deployContract(data)]\n        });\n        const contractAccount = new Account(this.connection, contractId);\n        return contractAccount;\n    }\n    /**\n     * @param receiverId NEAR account receiving Ⓝ\n     * @param amount Amount to send in yoctoⓃ\n     */\n    async sendMoney(receiverId, amount) {\n        return this.signAndSendTransaction({\n            receiverId,\n            actions: [transfer(amount)]\n        });\n    }\n    /**\n     * @param newAccountId NEAR account name to be created\n     * @param publicKey A public key created from the masterAccount\n     */\n    async createAccount(newAccountId, publicKey, amount) {\n        const accessKey = fullAccessKey();\n        return this.signAndSendTransaction({\n            receiverId: newAccountId,\n            actions: [createAccount(), transfer(amount), addKey(crypto_1.PublicKey.from(publicKey), accessKey)]\n        });\n    }\n    /**\n     * @param beneficiaryId The NEAR account that will receive the remaining Ⓝ balance from the account being deleted\n     */\n    async deleteAccount(beneficiaryId) {\n        utils_1.Logger.log('Deleting an account does not automatically transfer NFTs and FTs to the beneficiary address. Ensure to transfer assets before deleting.');\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [deleteAccount(beneficiaryId)]\n        });\n    }\n    /**\n     * @param data The compiled contract code\n     */\n    async deployContract(data) {\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [deployContract(data)]\n        });\n    }\n    /** @hidden */\n    encodeJSContractArgs(contractId, method, args) {\n        return Buffer.concat([Buffer.from(contractId), Buffer.from([0]), Buffer.from(method), Buffer.from([0]), Buffer.from(args)]);\n    }\n    /**\n      * Execute a function call.\n      * @param options The options for the function call.\n      * @param options.contractId The NEAR account ID of the smart contract.\n      * @param options.methodName The name of the method to be called on the smart contract.\n      * @param options.args The arguments to be passed to the method.\n      * @param options.gas The maximum amount of gas to be used for the function call.\n      * @param options.attachedDeposit The amount of NEAR tokens to be attached to the function call.\n      * @param options.walletMeta Metadata for wallet integration.\n      * @param options.walletCallbackUrl The callback URL for wallet integration.\n      * @param options.stringify A function to convert input arguments into bytes array\n      * @param options.jsContract Whether the contract is from JS SDK, automatically encodes args from JS SDK to binary.\n      * @returns {Promise<FinalExecutionOutcome>} A promise that resolves to the final execution outcome of the function call.\n      */\n    async functionCall({ contractId, methodName, args = {}, gas = utils_1.DEFAULT_FUNCTION_CALL_GAS, attachedDeposit, walletMeta, walletCallbackUrl, stringify, jsContract }) {\n        this.validateArgs(args);\n        let functionCallArgs;\n        if (jsContract) {\n            const encodedArgs = this.encodeJSContractArgs(contractId, methodName, JSON.stringify(args));\n            functionCallArgs = ['call_js_contract', encodedArgs, gas, attachedDeposit, null, true];\n        }\n        else {\n            const stringifyArg = stringify === undefined ? transactions_1.stringifyJsonOrBytes : stringify;\n            functionCallArgs = [methodName, args, gas, attachedDeposit, stringifyArg, false];\n        }\n        return this.signAndSendTransaction({\n            receiverId: jsContract ? this.connection.jsvmAccountId : contractId,\n            // eslint-disable-next-line prefer-spread\n            actions: [functionCall.apply(void 0, functionCallArgs)],\n            walletMeta,\n            walletCallbackUrl\n        });\n    }\n    /**\n     * @see [https://docs.near.org/concepts/basics/accounts/access-keys](https://docs.near.org/concepts/basics/accounts/access-keys)\n     * @todo expand this API to support more options.\n     * @param publicKey A public key to be associated with the contract\n     * @param contractId NEAR account where the contract is deployed\n     * @param methodNames The method names on the contract that should be allowed to be called. Pass null for no method names and '' or [] for any method names.\n     * @param amount Payment in yoctoⓃ that is sent to the contract during this function call\n     */\n    async addKey(publicKey, contractId, methodNames, amount) {\n        if (!methodNames) {\n            methodNames = [];\n        }\n        if (!Array.isArray(methodNames)) {\n            methodNames = [methodNames];\n        }\n        let accessKey;\n        if (!contractId) {\n            accessKey = fullAccessKey();\n        }\n        else {\n            accessKey = functionCallAccessKey(contractId, methodNames, amount);\n        }\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [addKey(crypto_1.PublicKey.from(publicKey), accessKey)]\n        });\n    }\n    /**\n     * @param publicKey The public key to be deleted\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    async deleteKey(publicKey) {\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [deleteKey(crypto_1.PublicKey.from(publicKey))]\n        });\n    }\n    /**\n     * @see [https://near-nodes.io/validator/staking-and-delegation](https://near-nodes.io/validator/staking-and-delegation)\n     *\n     * @param publicKey The public key for the account that's staking\n     * @param amount The account to stake in yoctoⓃ\n     */\n    async stake(publicKey, amount) {\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [stake(amount, crypto_1.PublicKey.from(publicKey))]\n        });\n    }\n    /**\n     * Compose and sign a SignedDelegate action to be executed in a transaction on behalf of this Account instance\n     *\n     * @param options Options for the transaction.\n     * @param options.actions Actions to be included in the meta transaction\n     * @param options.blockHeightTtl Number of blocks past the current block height for which the SignedDelegate action may be included in a meta transaction\n     * @param options.receiverId Receiver account of the meta transaction\n     */\n    async signedDelegate({ actions, blockHeightTtl, receiverId, }) {\n        const { provider, signer } = this.connection;\n        const { header } = await provider.block({ finality: 'final' });\n        const { accessKey, publicKey } = await this.findAccessKey(null, null);\n        const delegateAction = (0, transactions_1.buildDelegateAction)({\n            actions,\n            maxBlockHeight: BigInt(header.height) + BigInt(blockHeightTtl),\n            nonce: BigInt(accessKey.nonce) + 1n,\n            publicKey,\n            receiverId,\n            senderId: this.accountId,\n        });\n        const { signedDelegateAction } = await (0, transactions_1.signDelegateAction)({\n            delegateAction,\n            signer: {\n                sign: async (message) => {\n                    const { signature } = await signer.signMessage(message, delegateAction.senderId, this.connection.networkId);\n                    return signature;\n                },\n            }\n        });\n        return signedDelegateAction;\n    }\n    /** @hidden */\n    validateArgs(args) {\n        const isUint8Array = args.byteLength !== undefined && args.byteLength === args.length;\n        if (isUint8Array) {\n            return;\n        }\n        if (Array.isArray(args) || typeof args !== 'object') {\n            throw new types_1.PositionalArgsError();\n        }\n    }\n    /**\n     * Invoke a contract view function using the RPC API.\n     * @see [https://docs.near.org/api/rpc/contracts#call-a-contract-function](https://docs.near.org/api/rpc/contracts#call-a-contract-function)\n     *\n     * @param options Function call options.\n     * @param options.contractId NEAR account where the contract is deployed\n     * @param options.methodName The view-only method (no state mutations) name on the contract as it is written in the contract code\n     * @param options.args Any arguments to the view contract method, wrapped in JSON\n     * @param options.parse Parse the result of the call. Receives a Buffer (bytes array) and converts it to any object. By default result will be treated as json.\n     * @param options.stringify Convert input arguments into a bytes array. By default the input is treated as a JSON.\n     * @param options.jsContract Is contract from JS SDK, automatically encodes args from JS SDK to binary.\n     * @param options.blockQuery specifies which block to query state at. By default returns last \"optimistic\" block (i.e. not necessarily finalized).\n     * @returns {Promise<any>}\n     */\n    async viewFunction(options) {\n        return await (0, utils_2.viewFunction)(this.connection, options);\n    }\n    /**\n     * Returns the state (key value pairs) of this account's contract based on the key prefix.\n     * Pass an empty string for prefix if you would like to return the entire state.\n     * @see [https://docs.near.org/api/rpc/contracts#view-contract-state](https://docs.near.org/api/rpc/contracts#view-contract-state)\n     *\n     * @param prefix allows to filter which keys should be returned. Empty prefix means all keys. String prefix is utf-8 encoded.\n     * @param blockQuery specifies which block to query state at. By default returns last \"optimistic\" block (i.e. not necessarily finalized).\n     */\n    async viewState(prefix, blockQuery = { finality: 'optimistic' }) {\n        return await (0, utils_2.viewState)(this.connection, this.accountId, prefix, blockQuery);\n    }\n    /**\n     * Get all access keys for the account\n     * @see [https://docs.near.org/api/rpc/access-keys#view-access-key-list](https://docs.near.org/api/rpc/access-keys#view-access-key-list)\n     */\n    async getAccessKeys() {\n        const response = await this.connection.provider.query({\n            request_type: 'view_access_key_list',\n            account_id: this.accountId,\n            finality: 'optimistic'\n        });\n        // Replace raw nonce into a new BigInt\n        return response?.keys?.map((key) => ({ ...key, access_key: { ...key.access_key, nonce: BigInt(key.access_key.nonce) } }));\n    }\n    /**\n     * Returns a list of authorized apps\n     * @todo update the response value to return all the different keys, not just app keys.\n     */\n    async getAccountDetails() {\n        // TODO: update the response value to return all the different keys, not just app keys.\n        // Also if we need this function, or getAccessKeys is good enough.\n        const accessKeys = await this.getAccessKeys();\n        const authorizedApps = accessKeys\n            .filter(item => item.access_key.permission !== 'FullAccess')\n            .map(item => {\n            const perm = item.access_key.permission;\n            return {\n                contractId: perm.FunctionCall.receiver_id,\n                amount: perm.FunctionCall.allowance,\n                publicKey: item.public_key,\n            };\n        });\n        return { authorizedApps };\n    }\n    /**\n     * Returns calculated account balance\n     */\n    async getAccountBalance() {\n        const protocolConfig = await this.connection.provider.experimental_protocolConfig({ finality: 'final' });\n        const state = await this.state();\n        const costPerByte = BigInt(protocolConfig.runtime_config.storage_amount_per_byte);\n        const stateStaked = BigInt(state.storage_usage) * costPerByte;\n        const staked = BigInt(state.locked);\n        const totalBalance = BigInt(state.amount) + staked;\n        const availableBalance = totalBalance - (staked > stateStaked ? staked : stateStaked);\n        return {\n            total: totalBalance.toString(),\n            stateStaked: stateStaked.toString(),\n            staked: staked.toString(),\n            available: availableBalance.toString()\n        };\n    }\n    /**\n     * Returns the NEAR tokens balance and validators of a given account that is delegated to the staking pools that are part of the validators set in the current epoch.\n     *\n     * NOTE: If the tokens are delegated to a staking pool that is currently on pause or does not have enough tokens to participate in validation, they won't be accounted for.\n     * @returns {Promise<ActiveDelegatedStakeBalance>}\n     */\n    async getActiveDelegatedStakeBalance() {\n        const block = await this.connection.provider.block({ finality: 'final' });\n        const blockHash = block.header.hash;\n        const epochId = block.header.epoch_id;\n        const { current_validators, next_validators, current_proposals } = await this.connection.provider.validators(epochId);\n        const pools = new Set();\n        [...current_validators, ...next_validators, ...current_proposals]\n            .forEach((validator) => pools.add(validator.account_id));\n        const uniquePools = [...pools];\n        const promises = uniquePools\n            .map((validator) => (this.viewFunction({\n            contractId: validator,\n            methodName: 'get_account_total_balance',\n            args: { account_id: this.accountId },\n            blockQuery: { blockId: blockHash }\n        })));\n        const results = await Promise.allSettled(promises);\n        const hasTimeoutError = results.some((result) => {\n            if (result.status === 'rejected' && result.reason.type === 'TimeoutError') {\n                return true;\n            }\n            return false;\n        });\n        // When RPC is down and return timeout error, throw error\n        if (hasTimeoutError) {\n            throw new Error('Failed to get delegated stake balance');\n        }\n        const summary = results.reduce((result, state, index) => {\n            const validatorId = uniquePools[index];\n            if (state.status === 'fulfilled') {\n                const currentBN = BigInt(state.value);\n                if (currentBN !== 0n) {\n                    return {\n                        ...result,\n                        stakedValidators: [...result.stakedValidators, { validatorId, amount: currentBN.toString() }],\n                        total: result.total + currentBN,\n                    };\n                }\n            }\n            if (state.status === 'rejected') {\n                return {\n                    ...result,\n                    failedValidators: [...result.failedValidators, { validatorId, error: state.reason }],\n                };\n            }\n            return result;\n        }, { stakedValidators: [], failedValidators: [], total: 0n });\n        return {\n            ...summary,\n            total: summary.total.toString(),\n        };\n    }\n}\nexports.Account = Account;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/account.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/account_2fa.cjs":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/account_2fa.cjs ***!
  \****************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Account2FA = void 0;\nconst crypto_1 = __webpack_require__(/*! @near-js/crypto */ \"(ssr)/./node_modules/.pnpm/@near-js+crypto@1.4.1/node_modules/@near-js/crypto/lib/commonjs/index.cjs\");\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/.pnpm/@near-js+types@0.3.1/node_modules/@near-js/types/lib/commonjs/index.cjs\");\nconst transactions_1 = __webpack_require__(/*! @near-js/transactions */ \"(ssr)/./node_modules/.pnpm/@near-js+transactions@1.3.1/node_modules/@near-js/transactions/lib/commonjs/index.cjs\");\nconst utils_1 = __webpack_require__(/*! @near-js/utils */ \"(ssr)/./node_modules/.pnpm/@near-js+utils@1.0.1/node_modules/@near-js/utils/lib/commonjs/index.cjs\");\nconst isomorphic_unfetch_1 = __importDefault(__webpack_require__(/*! isomorphic-unfetch */ \"(ssr)/./node_modules/.pnpm/isomorphic-unfetch@3.1.0/node_modules/isomorphic-unfetch/index.js\"));\nconst account_multisig_1 = __webpack_require__(/*! ./account_multisig.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/account_multisig.cjs\");\nconst constants_1 = __webpack_require__(/*! ./constants.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/constants.cjs\");\nconst types_2 = __webpack_require__(/*! ./types.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/types.cjs\");\nconst { addKey, deleteKey, deployContract, fullAccessKey, functionCall, functionCallAccessKey } = transactions_1.actionCreators;\nclass Account2FA extends account_multisig_1.AccountMultisig {\n    /********************************\n    Account2FA has options object where you can provide callbacks for:\n    - sendCode: how to send the 2FA code in case you don't use NEAR Contract Helper\n    - getCode: how to get code from user (use this to provide custom UI/UX for prompt of 2FA code)\n    - onResult: the tx result after it's been confirmed by NEAR Contract Helper\n    ********************************/\n    sendCode;\n    getCode;\n    verifyCode;\n    onConfirmResult;\n    helperUrl = 'https://helper.testnet.near.org';\n    constructor(connection, accountId, options) {\n        super(connection, accountId, options);\n        this.helperUrl = options.helperUrl || this.helperUrl;\n        this.storage = options.storage;\n        this.sendCode = options.sendCode || this.sendCodeDefault;\n        this.getCode = options.getCode || this.getCodeDefault;\n        this.verifyCode = options.verifyCode || this.verifyCodeDefault;\n        this.onConfirmResult = options.onConfirmResult;\n    }\n    /**\n     * Sign a transaction to preform a list of actions and broadcast it using the RPC API.\n     * @see {@link \"@near-js/providers\".json-rpc-provider.JsonRpcProvider.sendTransaction | JsonRpcProvider.sendTransaction}\n     *\n     * @param options Options for the transaction.\n     * @param options.receiverId The NEAR account ID of the transaction receiver.\n     * @param options.actions The list of actions to be included in the transaction.\n     * @returns {Promise<FinalExecutionOutcome>} A promise that resolves to the final execution outcome of the transaction.\n     */\n    async signAndSendTransaction({ receiverId, actions }) {\n        await super.signAndSendTransaction({ receiverId, actions });\n        // TODO: Should following override onRequestResult in superclass instead of doing custom signAndSendTransaction?\n        await this.sendCode();\n        const result = await this.promptAndVerify();\n        if (this.onConfirmResult) {\n            await this.onConfirmResult(result);\n        }\n        return result;\n    }\n    // default helpers for CH deployments of multisig\n    /**\n     * Deploy a multisig contract with 2FA and handle the deployment process.\n     * @param contractBytes - The bytecode of the multisig contract.\n     * @returns {Promise<FinalExecutionOutcome>} A promise that resolves to the final execution outcome of the deployment.\n     */\n    async deployMultisig(contractBytes) {\n        const { accountId } = this;\n        const seedOrLedgerKey = (await this.getRecoveryMethods()).data\n            // @ts-ignore\n            .filter(({ kind, publicKey }) => (kind === 'phrase' || kind === 'ledger') && publicKey !== null)\n            .map((rm) => rm.publicKey);\n        const fak2lak = (await this.getAccessKeys())\n            .filter(({ public_key, access_key: { permission } }) => permission === 'FullAccess' && !seedOrLedgerKey.includes(public_key))\n            .map((ak) => ak.public_key)\n            .map(toPK);\n        // @ts-ignore\n        const confirmOnlyKey = toPK((await this.postSignedJson('/2fa/getAccessKey', { accountId })).publicKey);\n        const newArgs = Buffer.from(JSON.stringify({ 'num_confirmations': 2 }));\n        const actions = [\n            ...fak2lak.map((pk) => deleteKey(pk)),\n            ...fak2lak.map((pk) => addKey(pk, functionCallAccessKey(accountId, constants_1.MULTISIG_CHANGE_METHODS, null))),\n            addKey(confirmOnlyKey, functionCallAccessKey(accountId, constants_1.MULTISIG_CONFIRM_METHODS, null)),\n            deployContract(contractBytes),\n        ];\n        const newFunctionCallActionBatch = actions.concat(functionCall('new', newArgs, constants_1.MULTISIG_GAS, constants_1.MULTISIG_DEPOSIT));\n        utils_1.Logger.log('deploying multisig contract for', accountId);\n        const { stateStatus: multisigStateStatus } = await this.checkMultisigCodeAndStateStatus(contractBytes);\n        switch (multisigStateStatus) {\n            case types_2.MultisigStateStatus.STATE_NOT_INITIALIZED:\n                return await super.signAndSendTransactionWithAccount(accountId, newFunctionCallActionBatch);\n            case types_2.MultisigStateStatus.VALID_STATE:\n                return await super.signAndSendTransactionWithAccount(accountId, actions);\n            case types_2.MultisigStateStatus.INVALID_STATE:\n                throw new types_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account has existing state.`, 'ContractHasExistingState');\n            default:\n                throw new types_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account state could not be verified.`, 'ContractStateUnknown');\n        }\n    }\n    /**\n     * Disable 2FA with the option to clean up contract state.\n     * @param options Options for disabling 2FA.\n     * @param options.contractBytes The bytecode of the contract to deploy.\n     * @param options.cleanupContractBytes The bytecode of the cleanup contract (optional).\n     * @returns {Promise<FinalExecutionOutcome>} A promise that resolves to the final execution outcome of the operation.\n     */\n    async disableWithFAK({ contractBytes, cleanupContractBytes }) {\n        let cleanupActions = [];\n        if (cleanupContractBytes) {\n            await this.deleteAllRequests().catch(e => e);\n            cleanupActions = await this.get2faDisableCleanupActions(cleanupContractBytes);\n        }\n        const keyConversionActions = await this.get2faDisableKeyConversionActions();\n        const actions = [\n            ...cleanupActions,\n            ...keyConversionActions,\n            deployContract(contractBytes)\n        ];\n        const accessKeyInfo = await this.findAccessKey(this.accountId, actions);\n        if (accessKeyInfo && accessKeyInfo.accessKey && accessKeyInfo.accessKey.permission !== 'FullAccess') {\n            throw new types_1.TypedError('No full access key found in keystore. Unable to bypass multisig', 'NoFAKFound');\n        }\n        return this.signAndSendTransactionWithAccount(this.accountId, actions);\n    }\n    /**\n     * Retrieves cleanup actions for disabling 2FA.\n     * @param cleanupContractBytes - The bytecode of the cleanup contract.\n     * @returns {Promise<Action[]>} - A promise that resolves to an array of cleanup actions.\n     */\n    async get2faDisableCleanupActions(cleanupContractBytes) {\n        const currentAccountState = await this.viewState('').catch(error => {\n            const cause = error.cause && error.cause.name;\n            if (cause == 'NO_CONTRACT_CODE') {\n                return [];\n            }\n            throw cause == 'TOO_LARGE_CONTRACT_STATE'\n                ? new types_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account has existing state.`, 'ContractHasExistingState')\n                : error;\n        });\n        const currentAccountStateKeys = currentAccountState.map(({ key }) => key.toString('base64'));\n        return currentAccountState.length ? [\n            deployContract(cleanupContractBytes),\n            functionCall('clean', { keys: currentAccountStateKeys }, constants_1.MULTISIG_GAS, 0n)\n        ] : [];\n    }\n    /**\n     * Retrieves key conversion actions for disabling 2FA.\n     * @returns {Promise<Action[]>} - A promise that resolves to an array of key conversion actions.\n     */\n    async get2faDisableKeyConversionActions() {\n        const { accountId } = this;\n        const accessKeys = await this.getAccessKeys();\n        const lak2fak = accessKeys\n            .filter(({ access_key }) => access_key.permission !== 'FullAccess')\n            .filter(({ access_key }) => {\n            const perm = access_key.permission.FunctionCall;\n            return perm.receiver_id === accountId &&\n                perm.method_names.length === 4 &&\n                perm.method_names.includes('add_request_and_confirm');\n        });\n        // @ts-ignore\n        const confirmOnlyKey = crypto_1.PublicKey.from((await this.postSignedJson('/2fa/getAccessKey', { accountId })).publicKey);\n        return [\n            deleteKey(confirmOnlyKey),\n            ...lak2fak.map(({ public_key }) => deleteKey(crypto_1.PublicKey.from(public_key))),\n            ...lak2fak.map(({ public_key }) => addKey(crypto_1.PublicKey.from(public_key), fullAccessKey()))\n        ];\n    }\n    /**\n     * This method converts LAKs back to FAKs, clears state and deploys an 'empty' contract (contractBytes param)\n     * @param [contractBytes]{@link https://github.com/near/near-wallet/blob/master/packages/frontend/src/wasm/main.wasm?raw=true}\n     * @param [cleanupContractBytes]{@link https://github.com/near/core-contracts/blob/master/state-manipulation/res/state_cleanup.wasm?raw=true}\n     * @returns {Promise<FinalExecutionOutcome>} A promise that resolves to the final execution outcome of the operation.\n     */\n    async disable(contractBytes, cleanupContractBytes) {\n        const { stateStatus } = await this.checkMultisigCodeAndStateStatus();\n        if (stateStatus !== types_2.MultisigStateStatus.VALID_STATE && stateStatus !== types_2.MultisigStateStatus.STATE_NOT_INITIALIZED) {\n            throw new types_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account state could not be verified.`, 'ContractStateUnknown');\n        }\n        let deleteAllRequestsError;\n        await this.deleteAllRequests().catch(e => deleteAllRequestsError = e);\n        const cleanupActions = await this.get2faDisableCleanupActions(cleanupContractBytes).catch(e => {\n            if (e.type === 'ContractHasExistingState') {\n                throw deleteAllRequestsError || e;\n            }\n            throw e;\n        });\n        const actions = [\n            ...cleanupActions,\n            ...(await this.get2faDisableKeyConversionActions()),\n            deployContract(contractBytes),\n        ];\n        utils_1.Logger.log('disabling 2fa for', this.accountId);\n        return await this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions\n        });\n    }\n    /**\n     * Default implementation for sending the 2FA code.\n     * @returns {Promise<string>} - A promise that resolves to the request ID.\n     */\n    async sendCodeDefault() {\n        const { accountId } = this;\n        const { requestId } = this.getRequest();\n        const method = await this.get2faMethod();\n        await this.postSignedJson('/2fa/send', {\n            accountId,\n            method,\n            requestId,\n        });\n        return requestId;\n    }\n    async getCodeDefault() {\n        throw new Error('There is no getCode callback provided. Please provide your own in AccountMultisig constructor options. It has a parameter method where method.kind is \"email\" or \"phone\".');\n    }\n    /**\n     * Prompts the user to enter and verify the 2FA code.\n     * @returns {Promise<any>} - A promise that resolves to the verification result.\n     */\n    async promptAndVerify() {\n        const method = await this.get2faMethod();\n        const securityCode = await this.getCode(method);\n        try {\n            const result = await this.verifyCode(securityCode);\n            // TODO: Parse error from result for real (like in normal account.signAndSendTransaction)\n            return result;\n        }\n        catch (e) {\n            utils_1.Logger.warn('Error validating security code:', e);\n            if (e.toString().includes('invalid 2fa code provided') || e.toString().includes('2fa code not valid')) {\n                return await this.promptAndVerify();\n            }\n            throw e;\n        }\n    }\n    /**\n     * Verify the 2FA code using the default method.\n     * @param securityCode - The security code to verify.\n     * @returns {Promise<any>} A promise that resolves to the verification result.\n     */\n    async verifyCodeDefault(securityCode) {\n        const { accountId } = this;\n        const request = this.getRequest();\n        if (!request) {\n            throw new Error('no request pending');\n        }\n        const { requestId } = request;\n        return await this.postSignedJson('/2fa/verify', {\n            accountId,\n            securityCode,\n            requestId\n        });\n    }\n    /**\n     * Retrieves recovery methods for the account.\n     * @returns {Promise<{ accountId: string, data: any }>} - A promise that resolves to recovery methods data.\n     */\n    async getRecoveryMethods() {\n        const { accountId } = this;\n        return {\n            accountId,\n            data: await this.postSignedJson('/account/recoveryMethods', { accountId })\n        };\n    }\n    /**\n     * Gets the 2FA method (kind and detail).\n     * @returns {Promise<{ kind: string, detail: string }>} A promise that resolves to the 2FA method.\n     */\n    async get2faMethod() {\n        let { data } = await this.getRecoveryMethods();\n        // @ts-ignore\n        if (data && data.length) {\n            // @ts-ignore\n            data = data.find((m) => m.kind.indexOf('2fa-') === 0);\n        }\n        if (!data)\n            return null;\n        // @ts-ignore\n        const { kind, detail } = data;\n        return { kind, detail };\n    }\n    /**\n    * Generates a signature for the latest finalized block.\n    * @returns {Promise<{ blockNumber: string, blockNumberSignature: string }>} - A promise that resolves to the signature information.\n    */\n    async signatureFor() {\n        const { accountId } = this;\n        const block = await this.connection.provider.block({ finality: 'final' });\n        const blockNumber = block.header.height.toString();\n        const signed = await this.connection.signer.signMessage(Buffer.from(blockNumber), accountId, this.connection.networkId);\n        const blockNumberSignature = Buffer.from(signed.signature).toString('base64');\n        return { blockNumber, blockNumberSignature };\n    }\n    /**\n    * Sends a signed JSON request to a specified path.\n    * @param path - The path for the request.\n    * @param body - The request body.\n    * @returns {Promise<any>} - A promise that resolves to the response from the helper.\n    */\n    async postSignedJson(path, body) {\n        return await (0, isomorphic_unfetch_1.default)(this.helperUrl + path, {\n            body: JSON.stringify({\n                ...body,\n                ...(await this.signatureFor()),\n            }),\n            method: 'POST',\n        });\n    }\n}\nexports.Account2FA = Account2FA;\n// helpers\nconst toPK = (pk) => crypto_1.PublicKey.from(pk);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/account_2fa.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/account_creator.cjs":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/account_creator.cjs ***!
  \********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UrlAccountCreator = exports.LocalAccountCreator = exports.AccountCreator = void 0;\nconst isomorphic_unfetch_1 = __importDefault(__webpack_require__(/*! isomorphic-unfetch */ \"(ssr)/./node_modules/.pnpm/isomorphic-unfetch@3.1.0/node_modules/isomorphic-unfetch/index.js\"));\n/**\n * Account creator provides an interface for implementations to actually create accounts\n */\nclass AccountCreator {\n}\nexports.AccountCreator = AccountCreator;\nclass LocalAccountCreator extends AccountCreator {\n    masterAccount;\n    initialBalance;\n    constructor(masterAccount, initialBalance) {\n        super();\n        this.masterAccount = masterAccount;\n        this.initialBalance = initialBalance;\n    }\n    /**\n     * Creates an account using a masterAccount, meaning the new account is created from an existing account\n     * @param newAccountId The name of the NEAR account to be created\n     * @param publicKey The public key from the masterAccount used to create this account\n     * @returns {Promise<void>}\n     */\n    async createAccount(newAccountId, publicKey) {\n        await this.masterAccount.createAccount(newAccountId, publicKey, this.initialBalance);\n    }\n}\nexports.LocalAccountCreator = LocalAccountCreator;\nclass UrlAccountCreator extends AccountCreator {\n    connection;\n    helperUrl;\n    constructor(connection, helperUrl) {\n        super();\n        this.connection = connection;\n        this.helperUrl = helperUrl;\n    }\n    /**\n     * Creates an account using a helperUrl\n     * This is [hosted here](https://helper.nearprotocol.com) or set up locally with the [near-contract-helper](https://github.com/nearprotocol/near-contract-helper) repository\n     * @param newAccountId The name of the NEAR account to be created\n     * @param publicKey The public key from the masterAccount used to create this account\n     * @returns {Promise<void>}\n     */\n    async createAccount(newAccountId, publicKey) {\n        await (0, isomorphic_unfetch_1.default)(`${this.helperUrl}/account`, {\n            body: JSON.stringify({ newAccountId, newAccountPublicKey: publicKey.toString() }),\n            method: 'POST',\n        });\n    }\n}\nexports.UrlAccountCreator = UrlAccountCreator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrYWNjb3VudHNAMS4zLjEvbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL2xpYi9jb21tb25qcy9hY2NvdW50X2NyZWF0b3IuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCLEdBQUcsMkJBQTJCLEdBQUcsc0JBQXNCO0FBQ2hGLDZDQUE2QyxtQkFBTyxDQUFDLHdIQUFvQjtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxtREFBbUQsZUFBZTtBQUNsRSxtQ0FBbUMseURBQXlEO0FBQzVGO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSx5QkFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrYXRob24tbmVhci1yZWRhY3RlZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbmVhci1qcythY2NvdW50c0AxLjMuMS9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbGliL2NvbW1vbmpzL2FjY291bnRfY3JlYXRvci5janM/NDBjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVXJsQWNjb3VudENyZWF0b3IgPSBleHBvcnRzLkxvY2FsQWNjb3VudENyZWF0b3IgPSBleHBvcnRzLkFjY291bnRDcmVhdG9yID0gdm9pZCAwO1xuY29uc3QgaXNvbW9ycGhpY191bmZldGNoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImlzb21vcnBoaWMtdW5mZXRjaFwiKSk7XG4vKipcbiAqIEFjY291bnQgY3JlYXRvciBwcm92aWRlcyBhbiBpbnRlcmZhY2UgZm9yIGltcGxlbWVudGF0aW9ucyB0byBhY3R1YWxseSBjcmVhdGUgYWNjb3VudHNcbiAqL1xuY2xhc3MgQWNjb3VudENyZWF0b3Ige1xufVxuZXhwb3J0cy5BY2NvdW50Q3JlYXRvciA9IEFjY291bnRDcmVhdG9yO1xuY2xhc3MgTG9jYWxBY2NvdW50Q3JlYXRvciBleHRlbmRzIEFjY291bnRDcmVhdG9yIHtcbiAgICBtYXN0ZXJBY2NvdW50O1xuICAgIGluaXRpYWxCYWxhbmNlO1xuICAgIGNvbnN0cnVjdG9yKG1hc3RlckFjY291bnQsIGluaXRpYWxCYWxhbmNlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubWFzdGVyQWNjb3VudCA9IG1hc3RlckFjY291bnQ7XG4gICAgICAgIHRoaXMuaW5pdGlhbEJhbGFuY2UgPSBpbml0aWFsQmFsYW5jZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhY2NvdW50IHVzaW5nIGEgbWFzdGVyQWNjb3VudCwgbWVhbmluZyB0aGUgbmV3IGFjY291bnQgaXMgY3JlYXRlZCBmcm9tIGFuIGV4aXN0aW5nIGFjY291bnRcbiAgICAgKiBAcGFyYW0gbmV3QWNjb3VudElkIFRoZSBuYW1lIG9mIHRoZSBORUFSIGFjY291bnQgdG8gYmUgY3JlYXRlZFxuICAgICAqIEBwYXJhbSBwdWJsaWNLZXkgVGhlIHB1YmxpYyBrZXkgZnJvbSB0aGUgbWFzdGVyQWNjb3VudCB1c2VkIHRvIGNyZWF0ZSB0aGlzIGFjY291bnRcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICAgKi9cbiAgICBhc3luYyBjcmVhdGVBY2NvdW50KG5ld0FjY291bnRJZCwgcHVibGljS2V5KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubWFzdGVyQWNjb3VudC5jcmVhdGVBY2NvdW50KG5ld0FjY291bnRJZCwgcHVibGljS2V5LCB0aGlzLmluaXRpYWxCYWxhbmNlKTtcbiAgICB9XG59XG5leHBvcnRzLkxvY2FsQWNjb3VudENyZWF0b3IgPSBMb2NhbEFjY291bnRDcmVhdG9yO1xuY2xhc3MgVXJsQWNjb3VudENyZWF0b3IgZXh0ZW5kcyBBY2NvdW50Q3JlYXRvciB7XG4gICAgY29ubmVjdGlvbjtcbiAgICBoZWxwZXJVcmw7XG4gICAgY29uc3RydWN0b3IoY29ubmVjdGlvbiwgaGVscGVyVXJsKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247XG4gICAgICAgIHRoaXMuaGVscGVyVXJsID0gaGVscGVyVXJsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFjY291bnQgdXNpbmcgYSBoZWxwZXJVcmxcbiAgICAgKiBUaGlzIGlzIFtob3N0ZWQgaGVyZV0oaHR0cHM6Ly9oZWxwZXIubmVhcnByb3RvY29sLmNvbSkgb3Igc2V0IHVwIGxvY2FsbHkgd2l0aCB0aGUgW25lYXItY29udHJhY3QtaGVscGVyXShodHRwczovL2dpdGh1Yi5jb20vbmVhcnByb3RvY29sL25lYXItY29udHJhY3QtaGVscGVyKSByZXBvc2l0b3J5XG4gICAgICogQHBhcmFtIG5ld0FjY291bnRJZCBUaGUgbmFtZSBvZiB0aGUgTkVBUiBhY2NvdW50IHRvIGJlIGNyZWF0ZWRcbiAgICAgKiBAcGFyYW0gcHVibGljS2V5IFRoZSBwdWJsaWMga2V5IGZyb20gdGhlIG1hc3RlckFjY291bnQgdXNlZCB0byBjcmVhdGUgdGhpcyBhY2NvdW50XG4gICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAgICovXG4gICAgYXN5bmMgY3JlYXRlQWNjb3VudChuZXdBY2NvdW50SWQsIHB1YmxpY0tleSkge1xuICAgICAgICBhd2FpdCAoMCwgaXNvbW9ycGhpY191bmZldGNoXzEuZGVmYXVsdCkoYCR7dGhpcy5oZWxwZXJVcmx9L2FjY291bnRgLCB7XG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IG5ld0FjY291bnRJZCwgbmV3QWNjb3VudFB1YmxpY0tleTogcHVibGljS2V5LnRvU3RyaW5nKCkgfSksXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5VcmxBY2NvdW50Q3JlYXRvciA9IFVybEFjY291bnRDcmVhdG9yO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/account_creator.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/account_multisig.cjs":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/account_multisig.cjs ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AccountMultisig = void 0;\nconst transactions_1 = __webpack_require__(/*! @near-js/transactions */ \"(ssr)/./node_modules/.pnpm/@near-js+transactions@1.3.1/node_modules/@near-js/transactions/lib/commonjs/index.cjs\");\nconst utils_1 = __webpack_require__(/*! @near-js/utils */ \"(ssr)/./node_modules/.pnpm/@near-js+utils@1.0.1/node_modules/@near-js/utils/lib/commonjs/index.cjs\");\nconst account_1 = __webpack_require__(/*! ./account.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/account.cjs\");\nconst constants_1 = __webpack_require__(/*! ./constants.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/constants.cjs\");\nconst types_1 = __webpack_require__(/*! ./types.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/types.cjs\");\nconst { deployContract, functionCall } = transactions_1.actionCreators;\nvar MultisigCodeStatus;\n(function (MultisigCodeStatus) {\n    MultisigCodeStatus[MultisigCodeStatus[\"INVALID_CODE\"] = 0] = \"INVALID_CODE\";\n    MultisigCodeStatus[MultisigCodeStatus[\"VALID_CODE\"] = 1] = \"VALID_CODE\";\n    MultisigCodeStatus[MultisigCodeStatus[\"UNKNOWN_CODE\"] = 2] = \"UNKNOWN_CODE\";\n})(MultisigCodeStatus || (MultisigCodeStatus = {}));\n// in memory request cache for node w/o localStorage\nconst storageFallback = {\n    [constants_1.MULTISIG_STORAGE_KEY]: null\n};\nclass AccountMultisig extends account_1.Account {\n    storage;\n    onAddRequestResult;\n    /**\n     * Constructs an instance of the `AccountMultisig` class.\n     * @param connection The NEAR connection object.\n     * @param accountId The NEAR account ID.\n     * @param options Additional options for the multisig account.\n     * @param options.storage Storage to store data related to multisig operations.\n     * @param options.onAddRequestResult Callback function to handle the result of adding a request.\n     */\n    constructor(connection, accountId, options) {\n        super(connection, accountId);\n        this.storage = options.storage;\n        this.onAddRequestResult = options.onAddRequestResult;\n    }\n    /**\n     * Sign and send a transaction with the multisig account as the sender.\n     * @param receiverId - The NEAR account ID of the transaction receiver.\n     * @param actions - The list of actions to be included in the transaction.\n     * @returns {Promise<FinalExecutionOutcome>} A promise that resolves to the final execution outcome of the transaction.\n     */\n    async signAndSendTransactionWithAccount(receiverId, actions) {\n        return super.signAndSendTransaction({ receiverId, actions });\n    }\n    /**\n     * Sign and send a multisig transaction to add a request and confirm it.\n     * @param options Options for the multisig transaction.\n     * @param options.receiverId The NEAR account ID of the transaction receiver.\n     * @param options.actions The list of actions to be included in the transaction.\n     * @returns {Promise<FinalExecutionOutcome>} A promise that resolves to the final execution outcome of the transaction.\n     */\n    async signAndSendTransaction({ receiverId, actions }) {\n        const { accountId } = this;\n        const args = Buffer.from(JSON.stringify({\n            request: {\n                receiver_id: receiverId,\n                actions: convertActions(actions, accountId, receiverId)\n            }\n        }));\n        let result;\n        try {\n            result = await super.signAndSendTransaction({\n                receiverId: accountId,\n                actions: [\n                    functionCall('add_request_and_confirm', args, constants_1.MULTISIG_GAS, constants_1.MULTISIG_DEPOSIT)\n                ]\n            });\n        }\n        catch (e) {\n            if (e.toString().includes('Account has too many active requests. Confirm or delete some')) {\n                await this.deleteUnconfirmedRequests();\n                return await this.signAndSendTransaction({ receiverId, actions });\n            }\n            throw e;\n        }\n        // TODO: Are following even needed? Seems like it throws on error already\n        if (!result.status) {\n            throw new Error('Request failed');\n        }\n        const status = { ...result.status };\n        if (!status.SuccessValue || typeof status.SuccessValue !== 'string') {\n            throw new Error('Request failed');\n        }\n        this.setRequest({\n            accountId,\n            actions,\n            requestId: parseInt(Buffer.from(status.SuccessValue, 'base64').toString('ascii'), 10)\n        });\n        if (this.onAddRequestResult) {\n            await this.onAddRequestResult(result);\n        }\n        // NOTE there is no await on purpose to avoid blocking for 2fa\n        this.deleteUnconfirmedRequests();\n        return result;\n    }\n    /**\n     * This method submits a canary transaction that is expected to always fail in order to determine whether the contract currently has valid multisig state\n     * and whether it is initialized. The canary transaction attempts to delete a request at index u32_max and will go through if a request exists at that index.\n     * a u32_max + 1 and -1 value cannot be used for the canary due to expected u32 error thrown before deserialization attempt.\n     * @param contractBytes The bytecode of the multisig contract.\n     * @returns {Promise<{ codeStatus: MultisigCodeStatus; stateStatus: MultisigStateStatus }>} A promise that resolves to the status of the code and state.\n     */\n    async checkMultisigCodeAndStateStatus(contractBytes) {\n        const u32_max = 4_294_967_295;\n        const validCodeStatusIfNoDeploy = contractBytes ? MultisigCodeStatus.UNKNOWN_CODE : MultisigCodeStatus.VALID_CODE;\n        try {\n            if (contractBytes) {\n                await super.signAndSendTransaction({\n                    receiverId: this.accountId, actions: [\n                        deployContract(contractBytes),\n                        functionCall('delete_request', { request_id: u32_max }, constants_1.MULTISIG_GAS, constants_1.MULTISIG_DEPOSIT)\n                    ]\n                });\n            }\n            else {\n                await this.deleteRequest(u32_max);\n            }\n            return { codeStatus: MultisigCodeStatus.VALID_CODE, stateStatus: types_1.MultisigStateStatus.VALID_STATE };\n        }\n        catch (e) {\n            if (new RegExp(types_1.MultisigDeleteRequestRejectionError.CANNOT_DESERIALIZE_STATE).test(e && e.kind && e.kind.ExecutionError)) {\n                return { codeStatus: validCodeStatusIfNoDeploy, stateStatus: types_1.MultisigStateStatus.INVALID_STATE };\n            }\n            else if (new RegExp(types_1.MultisigDeleteRequestRejectionError.MULTISIG_NOT_INITIALIZED).test(e && e.kind && e.kind.ExecutionError)) {\n                return { codeStatus: validCodeStatusIfNoDeploy, stateStatus: types_1.MultisigStateStatus.STATE_NOT_INITIALIZED };\n            }\n            else if (new RegExp(types_1.MultisigDeleteRequestRejectionError.NO_SUCH_REQUEST).test(e && e.kind && e.kind.ExecutionError)) {\n                return { codeStatus: validCodeStatusIfNoDeploy, stateStatus: types_1.MultisigStateStatus.VALID_STATE };\n            }\n            else if (new RegExp(types_1.MultisigDeleteRequestRejectionError.METHOD_NOT_FOUND).test(e && e.message)) {\n                // not reachable if transaction included a deploy\n                return { codeStatus: MultisigCodeStatus.INVALID_CODE, stateStatus: types_1.MultisigStateStatus.UNKNOWN_STATE };\n            }\n            throw e;\n        }\n    }\n    /**\n     * Delete a multisig request by its ID.\n     * @param request_id The ID of the multisig request to be deleted.\n     * @returns {Promise<FinalExecutionOutcome>} A promise that resolves to the final execution outcome of the deletion.\n     */\n    deleteRequest(request_id) {\n        return super.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [functionCall('delete_request', { request_id }, constants_1.MULTISIG_GAS, constants_1.MULTISIG_DEPOSIT)]\n        });\n    }\n    /**\n     * Delete all multisig requests associated with the account.\n     * @returns {Promise<void>} A promise that resolves when all requests are deleted.\n     */\n    async deleteAllRequests() {\n        const request_ids = await this.getRequestIds();\n        if (request_ids.length) {\n            await Promise.all(request_ids.map((id) => this.deleteRequest(id)));\n        }\n    }\n    /**\n     * Delete unconfirmed multisig requests associated with the account.\n     * @returns {Promise<void>} A promise that resolves when unconfirmed requests are deleted.\n     */\n    async deleteUnconfirmedRequests() {\n        // TODO: Delete in batch, don't delete unexpired\n        // TODO: Delete in batch, don't delete unexpired (can reduce gas usage dramatically)\n        const request_ids = await this.getRequestIds();\n        const { requestId } = this.getRequest();\n        for (const requestIdToDelete of request_ids) {\n            if (requestIdToDelete == requestId) {\n                continue;\n            }\n            try {\n                await super.signAndSendTransaction({\n                    receiverId: this.accountId,\n                    actions: [functionCall('delete_request', { request_id: requestIdToDelete }, constants_1.MULTISIG_GAS, constants_1.MULTISIG_DEPOSIT)]\n                });\n            }\n            catch (e) {\n                utils_1.Logger.warn('Attempt to delete an earlier request before 15 minutes failed. Will try again.');\n            }\n        }\n    }\n    // helpers\n    async getRequestIds() {\n        // TODO: Read requests from state to allow filtering by expiration time\n        // TODO: https://github.com/near/core-contracts/blob/305d1db4f4f2cf5ce4c1ef3479f7544957381f11/multisig/src/lib.rs#L84\n        return this.viewFunction({\n            contractId: this.accountId,\n            methodName: 'list_request_ids',\n        });\n    }\n    getRequest() {\n        if (this.storage) {\n            return JSON.parse(this.storage.getItem(constants_1.MULTISIG_STORAGE_KEY) || '{}');\n        }\n        return storageFallback[constants_1.MULTISIG_STORAGE_KEY];\n    }\n    setRequest(data) {\n        if (this.storage) {\n            return this.storage.setItem(constants_1.MULTISIG_STORAGE_KEY, JSON.stringify(data));\n        }\n        storageFallback[constants_1.MULTISIG_STORAGE_KEY] = data;\n    }\n}\nexports.AccountMultisig = AccountMultisig;\nconst convertPKForContract = (pk) => pk.toString().replace('ed25519:', '');\nconst convertActions = (actions, accountId, receiverId) => actions.map((a) => {\n    const type = a.enum;\n    const { gas, publicKey, methodName, args, deposit, accessKey, code } = a[type];\n    const action = {\n        type: type[0].toUpperCase() + type.substr(1),\n        gas: (gas && gas.toString()) || undefined,\n        public_key: (publicKey && convertPKForContract(publicKey)) || undefined,\n        method_name: methodName,\n        args: (args && Buffer.from(args).toString('base64')) || undefined,\n        code: (code && Buffer.from(code).toString('base64')) || undefined,\n        amount: (deposit && deposit.toString()) || undefined,\n        deposit: (deposit && deposit.toString()) || '0',\n        permission: undefined,\n    };\n    if (accessKey) {\n        if (receiverId === accountId && accessKey.permission.enum !== 'fullAccess') {\n            action.permission = {\n                receiver_id: accountId,\n                allowance: constants_1.MULTISIG_ALLOWANCE.toString(),\n                method_names: constants_1.MULTISIG_CHANGE_METHODS,\n            };\n        }\n        if (accessKey.permission.enum === 'functionCall') {\n            const { receiverId: receiver_id, methodNames: method_names, allowance } = accessKey.permission.functionCall;\n            action.permission = {\n                receiver_id,\n                allowance: (allowance && allowance.toString()) || undefined,\n                method_names\n            };\n        }\n    }\n    return action;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrYWNjb3VudHNAMS4zLjEvbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL2xpYi9jb21tb25qcy9hY2NvdW50X211bHRpc2lnLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUI7QUFDdkIsdUJBQXVCLG1CQUFPLENBQUMsK0lBQXVCO0FBQ3RELGdCQUFnQixtQkFBTyxDQUFDLDBIQUFnQjtBQUN4QyxrQkFBa0IsbUJBQU8sQ0FBQyxpSUFBZTtBQUN6QyxvQkFBb0IsbUJBQU8sQ0FBQyxxSUFBaUI7QUFDN0MsZ0JBQWdCLG1CQUFPLENBQUMsNkhBQWE7QUFDckMsUUFBUSwrQkFBK0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0RBQWdEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixnQ0FBZ0M7QUFDakQ7QUFDQTtBQUNBLDhDQUE4QyxxQkFBcUI7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGdDQUFnQztBQUNqRDtBQUNBLG1DQUFtQyxxQkFBcUI7QUFDeEQsZ0JBQWdCLFlBQVk7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxxQkFBcUI7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFVBQVUsZ0NBQWdDLGtDQUFrQyxHQUFHO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxxQkFBcUI7QUFDOUU7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsZ0NBQWdDO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELFlBQVk7QUFDbkUsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixlQUFlO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixlQUFlO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsWUFBWTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCwrQkFBK0I7QUFDOUYsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLDJGQUEyRjtBQUMzRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxZQUFZLDZEQUE2RDtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGdFQUFnRTtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2hhY2thdGhvbi1uZWFyLXJlZGFjdGVkLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BuZWFyLWpzK2FjY291bnRzQDEuMy4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9hY2NvdW50cy9saWIvY29tbW9uanMvYWNjb3VudF9tdWx0aXNpZy5janM/NDUzZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQWNjb3VudE11bHRpc2lnID0gdm9pZCAwO1xuY29uc3QgdHJhbnNhY3Rpb25zXzEgPSByZXF1aXJlKFwiQG5lYXItanMvdHJhbnNhY3Rpb25zXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCJAbmVhci1qcy91dGlsc1wiKTtcbmNvbnN0IGFjY291bnRfMSA9IHJlcXVpcmUoXCIuL2FjY291bnQuY2pzXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHMuY2pzXCIpO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzLmNqc1wiKTtcbmNvbnN0IHsgZGVwbG95Q29udHJhY3QsIGZ1bmN0aW9uQ2FsbCB9ID0gdHJhbnNhY3Rpb25zXzEuYWN0aW9uQ3JlYXRvcnM7XG52YXIgTXVsdGlzaWdDb2RlU3RhdHVzO1xuKGZ1bmN0aW9uIChNdWx0aXNpZ0NvZGVTdGF0dXMpIHtcbiAgICBNdWx0aXNpZ0NvZGVTdGF0dXNbTXVsdGlzaWdDb2RlU3RhdHVzW1wiSU5WQUxJRF9DT0RFXCJdID0gMF0gPSBcIklOVkFMSURfQ09ERVwiO1xuICAgIE11bHRpc2lnQ29kZVN0YXR1c1tNdWx0aXNpZ0NvZGVTdGF0dXNbXCJWQUxJRF9DT0RFXCJdID0gMV0gPSBcIlZBTElEX0NPREVcIjtcbiAgICBNdWx0aXNpZ0NvZGVTdGF0dXNbTXVsdGlzaWdDb2RlU3RhdHVzW1wiVU5LTk9XTl9DT0RFXCJdID0gMl0gPSBcIlVOS05PV05fQ09ERVwiO1xufSkoTXVsdGlzaWdDb2RlU3RhdHVzIHx8IChNdWx0aXNpZ0NvZGVTdGF0dXMgPSB7fSkpO1xuLy8gaW4gbWVtb3J5IHJlcXVlc3QgY2FjaGUgZm9yIG5vZGUgdy9vIGxvY2FsU3RvcmFnZVxuY29uc3Qgc3RvcmFnZUZhbGxiYWNrID0ge1xuICAgIFtjb25zdGFudHNfMS5NVUxUSVNJR19TVE9SQUdFX0tFWV06IG51bGxcbn07XG5jbGFzcyBBY2NvdW50TXVsdGlzaWcgZXh0ZW5kcyBhY2NvdW50XzEuQWNjb3VudCB7XG4gICAgc3RvcmFnZTtcbiAgICBvbkFkZFJlcXVlc3RSZXN1bHQ7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhbiBpbnN0YW5jZSBvZiB0aGUgYEFjY291bnRNdWx0aXNpZ2AgY2xhc3MuXG4gICAgICogQHBhcmFtIGNvbm5lY3Rpb24gVGhlIE5FQVIgY29ubmVjdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIGFjY291bnRJZCBUaGUgTkVBUiBhY2NvdW50IElELlxuICAgICAqIEBwYXJhbSBvcHRpb25zIEFkZGl0aW9uYWwgb3B0aW9ucyBmb3IgdGhlIG11bHRpc2lnIGFjY291bnQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuc3RvcmFnZSBTdG9yYWdlIHRvIHN0b3JlIGRhdGEgcmVsYXRlZCB0byBtdWx0aXNpZyBvcGVyYXRpb25zLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLm9uQWRkUmVxdWVzdFJlc3VsdCBDYWxsYmFjayBmdW5jdGlvbiB0byBoYW5kbGUgdGhlIHJlc3VsdCBvZiBhZGRpbmcgYSByZXF1ZXN0LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb24sIGFjY291bnRJZCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb25uZWN0aW9uLCBhY2NvdW50SWQpO1xuICAgICAgICB0aGlzLnN0b3JhZ2UgPSBvcHRpb25zLnN0b3JhZ2U7XG4gICAgICAgIHRoaXMub25BZGRSZXF1ZXN0UmVzdWx0ID0gb3B0aW9ucy5vbkFkZFJlcXVlc3RSZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNpZ24gYW5kIHNlbmQgYSB0cmFuc2FjdGlvbiB3aXRoIHRoZSBtdWx0aXNpZyBhY2NvdW50IGFzIHRoZSBzZW5kZXIuXG4gICAgICogQHBhcmFtIHJlY2VpdmVySWQgLSBUaGUgTkVBUiBhY2NvdW50IElEIG9mIHRoZSB0cmFuc2FjdGlvbiByZWNlaXZlci5cbiAgICAgKiBAcGFyYW0gYWN0aW9ucyAtIFRoZSBsaXN0IG9mIGFjdGlvbnMgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIHRyYW5zYWN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEZpbmFsRXhlY3V0aW9uT3V0Y29tZT59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSBmaW5hbCBleGVjdXRpb24gb3V0Y29tZSBvZiB0aGUgdHJhbnNhY3Rpb24uXG4gICAgICovXG4gICAgYXN5bmMgc2lnbkFuZFNlbmRUcmFuc2FjdGlvbldpdGhBY2NvdW50KHJlY2VpdmVySWQsIGFjdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLnNpZ25BbmRTZW5kVHJhbnNhY3Rpb24oeyByZWNlaXZlcklkLCBhY3Rpb25zIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTaWduIGFuZCBzZW5kIGEgbXVsdGlzaWcgdHJhbnNhY3Rpb24gdG8gYWRkIGEgcmVxdWVzdCBhbmQgY29uZmlybSBpdC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIGZvciB0aGUgbXVsdGlzaWcgdHJhbnNhY3Rpb24uXG4gICAgICogQHBhcmFtIG9wdGlvbnMucmVjZWl2ZXJJZCBUaGUgTkVBUiBhY2NvdW50IElEIG9mIHRoZSB0cmFuc2FjdGlvbiByZWNlaXZlci5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5hY3Rpb25zIFRoZSBsaXN0IG9mIGFjdGlvbnMgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIHRyYW5zYWN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEZpbmFsRXhlY3V0aW9uT3V0Y29tZT59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSBmaW5hbCBleGVjdXRpb24gb3V0Y29tZSBvZiB0aGUgdHJhbnNhY3Rpb24uXG4gICAgICovXG4gICAgYXN5bmMgc2lnbkFuZFNlbmRUcmFuc2FjdGlvbih7IHJlY2VpdmVySWQsIGFjdGlvbnMgfSkge1xuICAgICAgICBjb25zdCB7IGFjY291bnRJZCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgYXJncyA9IEJ1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIHJlcXVlc3Q6IHtcbiAgICAgICAgICAgICAgICByZWNlaXZlcl9pZDogcmVjZWl2ZXJJZCxcbiAgICAgICAgICAgICAgICBhY3Rpb25zOiBjb252ZXJ0QWN0aW9ucyhhY3Rpb25zLCBhY2NvdW50SWQsIHJlY2VpdmVySWQpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGF3YWl0IHN1cGVyLnNpZ25BbmRTZW5kVHJhbnNhY3Rpb24oe1xuICAgICAgICAgICAgICAgIHJlY2VpdmVySWQ6IGFjY291bnRJZCxcbiAgICAgICAgICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uQ2FsbCgnYWRkX3JlcXVlc3RfYW5kX2NvbmZpcm0nLCBhcmdzLCBjb25zdGFudHNfMS5NVUxUSVNJR19HQVMsIGNvbnN0YW50c18xLk1VTFRJU0lHX0RFUE9TSVQpXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChlLnRvU3RyaW5nKCkuaW5jbHVkZXMoJ0FjY291bnQgaGFzIHRvbyBtYW55IGFjdGl2ZSByZXF1ZXN0cy4gQ29uZmlybSBvciBkZWxldGUgc29tZScpKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5kZWxldGVVbmNvbmZpcm1lZFJlcXVlc3RzKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc2lnbkFuZFNlbmRUcmFuc2FjdGlvbih7IHJlY2VpdmVySWQsIGFjdGlvbnMgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE86IEFyZSBmb2xsb3dpbmcgZXZlbiBuZWVkZWQ/IFNlZW1zIGxpa2UgaXQgdGhyb3dzIG9uIGVycm9yIGFscmVhZHlcbiAgICAgICAgaWYgKCFyZXN1bHQuc3RhdHVzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVlc3QgZmFpbGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhdHVzID0geyAuLi5yZXN1bHQuc3RhdHVzIH07XG4gICAgICAgIGlmICghc3RhdHVzLlN1Y2Nlc3NWYWx1ZSB8fCB0eXBlb2Ygc3RhdHVzLlN1Y2Nlc3NWYWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWVzdCBmYWlsZWQnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFJlcXVlc3Qoe1xuICAgICAgICAgICAgYWNjb3VudElkLFxuICAgICAgICAgICAgYWN0aW9ucyxcbiAgICAgICAgICAgIHJlcXVlc3RJZDogcGFyc2VJbnQoQnVmZmVyLmZyb20oc3RhdHVzLlN1Y2Nlc3NWYWx1ZSwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCdhc2NpaScpLCAxMClcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLm9uQWRkUmVxdWVzdFJlc3VsdCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5vbkFkZFJlcXVlc3RSZXN1bHQocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBOT1RFIHRoZXJlIGlzIG5vIGF3YWl0IG9uIHB1cnBvc2UgdG8gYXZvaWQgYmxvY2tpbmcgZm9yIDJmYVxuICAgICAgICB0aGlzLmRlbGV0ZVVuY29uZmlybWVkUmVxdWVzdHMoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2Qgc3VibWl0cyBhIGNhbmFyeSB0cmFuc2FjdGlvbiB0aGF0IGlzIGV4cGVjdGVkIHRvIGFsd2F5cyBmYWlsIGluIG9yZGVyIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSBjb250cmFjdCBjdXJyZW50bHkgaGFzIHZhbGlkIG11bHRpc2lnIHN0YXRlXG4gICAgICogYW5kIHdoZXRoZXIgaXQgaXMgaW5pdGlhbGl6ZWQuIFRoZSBjYW5hcnkgdHJhbnNhY3Rpb24gYXR0ZW1wdHMgdG8gZGVsZXRlIGEgcmVxdWVzdCBhdCBpbmRleCB1MzJfbWF4IGFuZCB3aWxsIGdvIHRocm91Z2ggaWYgYSByZXF1ZXN0IGV4aXN0cyBhdCB0aGF0IGluZGV4LlxuICAgICAqIGEgdTMyX21heCArIDEgYW5kIC0xIHZhbHVlIGNhbm5vdCBiZSB1c2VkIGZvciB0aGUgY2FuYXJ5IGR1ZSB0byBleHBlY3RlZCB1MzIgZXJyb3IgdGhyb3duIGJlZm9yZSBkZXNlcmlhbGl6YXRpb24gYXR0ZW1wdC5cbiAgICAgKiBAcGFyYW0gY29udHJhY3RCeXRlcyBUaGUgYnl0ZWNvZGUgb2YgdGhlIG11bHRpc2lnIGNvbnRyYWN0LlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHsgY29kZVN0YXR1czogTXVsdGlzaWdDb2RlU3RhdHVzOyBzdGF0ZVN0YXR1czogTXVsdGlzaWdTdGF0ZVN0YXR1cyB9Pn0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHN0YXR1cyBvZiB0aGUgY29kZSBhbmQgc3RhdGUuXG4gICAgICovXG4gICAgYXN5bmMgY2hlY2tNdWx0aXNpZ0NvZGVBbmRTdGF0ZVN0YXR1cyhjb250cmFjdEJ5dGVzKSB7XG4gICAgICAgIGNvbnN0IHUzMl9tYXggPSA0XzI5NF85NjdfMjk1O1xuICAgICAgICBjb25zdCB2YWxpZENvZGVTdGF0dXNJZk5vRGVwbG95ID0gY29udHJhY3RCeXRlcyA/IE11bHRpc2lnQ29kZVN0YXR1cy5VTktOT1dOX0NPREUgOiBNdWx0aXNpZ0NvZGVTdGF0dXMuVkFMSURfQ09ERTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChjb250cmFjdEJ5dGVzKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgc3VwZXIuc2lnbkFuZFNlbmRUcmFuc2FjdGlvbih7XG4gICAgICAgICAgICAgICAgICAgIHJlY2VpdmVySWQ6IHRoaXMuYWNjb3VudElkLCBhY3Rpb25zOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXBsb3lDb250cmFjdChjb250cmFjdEJ5dGVzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uQ2FsbCgnZGVsZXRlX3JlcXVlc3QnLCB7IHJlcXVlc3RfaWQ6IHUzMl9tYXggfSwgY29uc3RhbnRzXzEuTVVMVElTSUdfR0FTLCBjb25zdGFudHNfMS5NVUxUSVNJR19ERVBPU0lUKVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmRlbGV0ZVJlcXVlc3QodTMyX21heCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBjb2RlU3RhdHVzOiBNdWx0aXNpZ0NvZGVTdGF0dXMuVkFMSURfQ09ERSwgc3RhdGVTdGF0dXM6IHR5cGVzXzEuTXVsdGlzaWdTdGF0ZVN0YXR1cy5WQUxJRF9TVEFURSB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAobmV3IFJlZ0V4cCh0eXBlc18xLk11bHRpc2lnRGVsZXRlUmVxdWVzdFJlamVjdGlvbkVycm9yLkNBTk5PVF9ERVNFUklBTElaRV9TVEFURSkudGVzdChlICYmIGUua2luZCAmJiBlLmtpbmQuRXhlY3V0aW9uRXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgY29kZVN0YXR1czogdmFsaWRDb2RlU3RhdHVzSWZOb0RlcGxveSwgc3RhdGVTdGF0dXM6IHR5cGVzXzEuTXVsdGlzaWdTdGF0ZVN0YXR1cy5JTlZBTElEX1NUQVRFIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChuZXcgUmVnRXhwKHR5cGVzXzEuTXVsdGlzaWdEZWxldGVSZXF1ZXN0UmVqZWN0aW9uRXJyb3IuTVVMVElTSUdfTk9UX0lOSVRJQUxJWkVEKS50ZXN0KGUgJiYgZS5raW5kICYmIGUua2luZC5FeGVjdXRpb25FcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBjb2RlU3RhdHVzOiB2YWxpZENvZGVTdGF0dXNJZk5vRGVwbG95LCBzdGF0ZVN0YXR1czogdHlwZXNfMS5NdWx0aXNpZ1N0YXRlU3RhdHVzLlNUQVRFX05PVF9JTklUSUFMSVpFRCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobmV3IFJlZ0V4cCh0eXBlc18xLk11bHRpc2lnRGVsZXRlUmVxdWVzdFJlamVjdGlvbkVycm9yLk5PX1NVQ0hfUkVRVUVTVCkudGVzdChlICYmIGUua2luZCAmJiBlLmtpbmQuRXhlY3V0aW9uRXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgY29kZVN0YXR1czogdmFsaWRDb2RlU3RhdHVzSWZOb0RlcGxveSwgc3RhdGVTdGF0dXM6IHR5cGVzXzEuTXVsdGlzaWdTdGF0ZVN0YXR1cy5WQUxJRF9TVEFURSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobmV3IFJlZ0V4cCh0eXBlc18xLk11bHRpc2lnRGVsZXRlUmVxdWVzdFJlamVjdGlvbkVycm9yLk1FVEhPRF9OT1RfRk9VTkQpLnRlc3QoZSAmJiBlLm1lc3NhZ2UpKSB7XG4gICAgICAgICAgICAgICAgLy8gbm90IHJlYWNoYWJsZSBpZiB0cmFuc2FjdGlvbiBpbmNsdWRlZCBhIGRlcGxveVxuICAgICAgICAgICAgICAgIHJldHVybiB7IGNvZGVTdGF0dXM6IE11bHRpc2lnQ29kZVN0YXR1cy5JTlZBTElEX0NPREUsIHN0YXRlU3RhdHVzOiB0eXBlc18xLk11bHRpc2lnU3RhdGVTdGF0dXMuVU5LTk9XTl9TVEFURSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBtdWx0aXNpZyByZXF1ZXN0IGJ5IGl0cyBJRC5cbiAgICAgKiBAcGFyYW0gcmVxdWVzdF9pZCBUaGUgSUQgb2YgdGhlIG11bHRpc2lnIHJlcXVlc3QgdG8gYmUgZGVsZXRlZC5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxGaW5hbEV4ZWN1dGlvbk91dGNvbWU+fSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgZmluYWwgZXhlY3V0aW9uIG91dGNvbWUgb2YgdGhlIGRlbGV0aW9uLlxuICAgICAqL1xuICAgIGRlbGV0ZVJlcXVlc3QocmVxdWVzdF9pZCkge1xuICAgICAgICByZXR1cm4gc3VwZXIuc2lnbkFuZFNlbmRUcmFuc2FjdGlvbih7XG4gICAgICAgICAgICByZWNlaXZlcklkOiB0aGlzLmFjY291bnRJZCxcbiAgICAgICAgICAgIGFjdGlvbnM6IFtmdW5jdGlvbkNhbGwoJ2RlbGV0ZV9yZXF1ZXN0JywgeyByZXF1ZXN0X2lkIH0sIGNvbnN0YW50c18xLk1VTFRJU0lHX0dBUywgY29uc3RhbnRzXzEuTVVMVElTSUdfREVQT1NJVCldXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYWxsIG11bHRpc2lnIHJlcXVlc3RzIGFzc29jaWF0ZWQgd2l0aCB0aGUgYWNjb3VudC5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBhbGwgcmVxdWVzdHMgYXJlIGRlbGV0ZWQuXG4gICAgICovXG4gICAgYXN5bmMgZGVsZXRlQWxsUmVxdWVzdHMoKSB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3RfaWRzID0gYXdhaXQgdGhpcy5nZXRSZXF1ZXN0SWRzKCk7XG4gICAgICAgIGlmIChyZXF1ZXN0X2lkcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHJlcXVlc3RfaWRzLm1hcCgoaWQpID0+IHRoaXMuZGVsZXRlUmVxdWVzdChpZCkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgdW5jb25maXJtZWQgbXVsdGlzaWcgcmVxdWVzdHMgYXNzb2NpYXRlZCB3aXRoIHRoZSBhY2NvdW50LlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHVuY29uZmlybWVkIHJlcXVlc3RzIGFyZSBkZWxldGVkLlxuICAgICAqL1xuICAgIGFzeW5jIGRlbGV0ZVVuY29uZmlybWVkUmVxdWVzdHMoKSB7XG4gICAgICAgIC8vIFRPRE86IERlbGV0ZSBpbiBiYXRjaCwgZG9uJ3QgZGVsZXRlIHVuZXhwaXJlZFxuICAgICAgICAvLyBUT0RPOiBEZWxldGUgaW4gYmF0Y2gsIGRvbid0IGRlbGV0ZSB1bmV4cGlyZWQgKGNhbiByZWR1Y2UgZ2FzIHVzYWdlIGRyYW1hdGljYWxseSlcbiAgICAgICAgY29uc3QgcmVxdWVzdF9pZHMgPSBhd2FpdCB0aGlzLmdldFJlcXVlc3RJZHMoKTtcbiAgICAgICAgY29uc3QgeyByZXF1ZXN0SWQgfSA9IHRoaXMuZ2V0UmVxdWVzdCgpO1xuICAgICAgICBmb3IgKGNvbnN0IHJlcXVlc3RJZFRvRGVsZXRlIG9mIHJlcXVlc3RfaWRzKSB7XG4gICAgICAgICAgICBpZiAocmVxdWVzdElkVG9EZWxldGUgPT0gcmVxdWVzdElkKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHN1cGVyLnNpZ25BbmRTZW5kVHJhbnNhY3Rpb24oe1xuICAgICAgICAgICAgICAgICAgICByZWNlaXZlcklkOiB0aGlzLmFjY291bnRJZCxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uczogW2Z1bmN0aW9uQ2FsbCgnZGVsZXRlX3JlcXVlc3QnLCB7IHJlcXVlc3RfaWQ6IHJlcXVlc3RJZFRvRGVsZXRlIH0sIGNvbnN0YW50c18xLk1VTFRJU0lHX0dBUywgY29uc3RhbnRzXzEuTVVMVElTSUdfREVQT1NJVCldXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHV0aWxzXzEuTG9nZ2VyLndhcm4oJ0F0dGVtcHQgdG8gZGVsZXRlIGFuIGVhcmxpZXIgcmVxdWVzdCBiZWZvcmUgMTUgbWludXRlcyBmYWlsZWQuIFdpbGwgdHJ5IGFnYWluLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGhlbHBlcnNcbiAgICBhc3luYyBnZXRSZXF1ZXN0SWRzKCkge1xuICAgICAgICAvLyBUT0RPOiBSZWFkIHJlcXVlc3RzIGZyb20gc3RhdGUgdG8gYWxsb3cgZmlsdGVyaW5nIGJ5IGV4cGlyYXRpb24gdGltZVxuICAgICAgICAvLyBUT0RPOiBodHRwczovL2dpdGh1Yi5jb20vbmVhci9jb3JlLWNvbnRyYWN0cy9ibG9iLzMwNWQxZGI0ZjRmMmNmNWNlNGMxZWYzNDc5Zjc1NDQ5NTczODFmMTEvbXVsdGlzaWcvc3JjL2xpYi5ycyNMODRcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0Z1bmN0aW9uKHtcbiAgICAgICAgICAgIGNvbnRyYWN0SWQ6IHRoaXMuYWNjb3VudElkLFxuICAgICAgICAgICAgbWV0aG9kTmFtZTogJ2xpc3RfcmVxdWVzdF9pZHMnLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0UmVxdWVzdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RvcmFnZSkge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodGhpcy5zdG9yYWdlLmdldEl0ZW0oY29uc3RhbnRzXzEuTVVMVElTSUdfU1RPUkFHRV9LRVkpIHx8ICd7fScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdG9yYWdlRmFsbGJhY2tbY29uc3RhbnRzXzEuTVVMVElTSUdfU1RPUkFHRV9LRVldO1xuICAgIH1cbiAgICBzZXRSZXF1ZXN0KGRhdGEpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RvcmFnZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5zZXRJdGVtKGNvbnN0YW50c18xLk1VTFRJU0lHX1NUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RvcmFnZUZhbGxiYWNrW2NvbnN0YW50c18xLk1VTFRJU0lHX1NUT1JBR0VfS0VZXSA9IGRhdGE7XG4gICAgfVxufVxuZXhwb3J0cy5BY2NvdW50TXVsdGlzaWcgPSBBY2NvdW50TXVsdGlzaWc7XG5jb25zdCBjb252ZXJ0UEtGb3JDb250cmFjdCA9IChwaykgPT4gcGsudG9TdHJpbmcoKS5yZXBsYWNlKCdlZDI1NTE5OicsICcnKTtcbmNvbnN0IGNvbnZlcnRBY3Rpb25zID0gKGFjdGlvbnMsIGFjY291bnRJZCwgcmVjZWl2ZXJJZCkgPT4gYWN0aW9ucy5tYXAoKGEpID0+IHtcbiAgICBjb25zdCB0eXBlID0gYS5lbnVtO1xuICAgIGNvbnN0IHsgZ2FzLCBwdWJsaWNLZXksIG1ldGhvZE5hbWUsIGFyZ3MsIGRlcG9zaXQsIGFjY2Vzc0tleSwgY29kZSB9ID0gYVt0eXBlXTtcbiAgICBjb25zdCBhY3Rpb24gPSB7XG4gICAgICAgIHR5cGU6IHR5cGVbMF0udG9VcHBlckNhc2UoKSArIHR5cGUuc3Vic3RyKDEpLFxuICAgICAgICBnYXM6IChnYXMgJiYgZ2FzLnRvU3RyaW5nKCkpIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgcHVibGljX2tleTogKHB1YmxpY0tleSAmJiBjb252ZXJ0UEtGb3JDb250cmFjdChwdWJsaWNLZXkpKSB8fCB1bmRlZmluZWQsXG4gICAgICAgIG1ldGhvZF9uYW1lOiBtZXRob2ROYW1lLFxuICAgICAgICBhcmdzOiAoYXJncyAmJiBCdWZmZXIuZnJvbShhcmdzKS50b1N0cmluZygnYmFzZTY0JykpIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgY29kZTogKGNvZGUgJiYgQnVmZmVyLmZyb20oY29kZSkudG9TdHJpbmcoJ2Jhc2U2NCcpKSB8fCB1bmRlZmluZWQsXG4gICAgICAgIGFtb3VudDogKGRlcG9zaXQgJiYgZGVwb3NpdC50b1N0cmluZygpKSB8fCB1bmRlZmluZWQsXG4gICAgICAgIGRlcG9zaXQ6IChkZXBvc2l0ICYmIGRlcG9zaXQudG9TdHJpbmcoKSkgfHwgJzAnLFxuICAgICAgICBwZXJtaXNzaW9uOiB1bmRlZmluZWQsXG4gICAgfTtcbiAgICBpZiAoYWNjZXNzS2V5KSB7XG4gICAgICAgIGlmIChyZWNlaXZlcklkID09PSBhY2NvdW50SWQgJiYgYWNjZXNzS2V5LnBlcm1pc3Npb24uZW51bSAhPT0gJ2Z1bGxBY2Nlc3MnKSB7XG4gICAgICAgICAgICBhY3Rpb24ucGVybWlzc2lvbiA9IHtcbiAgICAgICAgICAgICAgICByZWNlaXZlcl9pZDogYWNjb3VudElkLFxuICAgICAgICAgICAgICAgIGFsbG93YW5jZTogY29uc3RhbnRzXzEuTVVMVElTSUdfQUxMT1dBTkNFLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgbWV0aG9kX25hbWVzOiBjb25zdGFudHNfMS5NVUxUSVNJR19DSEFOR0VfTUVUSE9EUyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjY2Vzc0tleS5wZXJtaXNzaW9uLmVudW0gPT09ICdmdW5jdGlvbkNhbGwnKSB7XG4gICAgICAgICAgICBjb25zdCB7IHJlY2VpdmVySWQ6IHJlY2VpdmVyX2lkLCBtZXRob2ROYW1lczogbWV0aG9kX25hbWVzLCBhbGxvd2FuY2UgfSA9IGFjY2Vzc0tleS5wZXJtaXNzaW9uLmZ1bmN0aW9uQ2FsbDtcbiAgICAgICAgICAgIGFjdGlvbi5wZXJtaXNzaW9uID0ge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVyX2lkLFxuICAgICAgICAgICAgICAgIGFsbG93YW5jZTogKGFsbG93YW5jZSAmJiBhbGxvd2FuY2UudG9TdHJpbmcoKSkgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIG1ldGhvZF9uYW1lc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWN0aW9uO1xufSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/account_multisig.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/connection.cjs":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/connection.cjs ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Connection = void 0;\nconst signers_1 = __webpack_require__(/*! @near-js/signers */ \"(ssr)/./node_modules/.pnpm/@near-js+signers@0.2.1/node_modules/@near-js/signers/lib/commonjs/index.cjs\");\nconst providers_1 = __webpack_require__(/*! @near-js/providers */ \"(ssr)/./node_modules/.pnpm/@near-js+providers@1.0.1/node_modules/@near-js/providers/lib/commonjs/index.cjs\");\n/**\n * @param config Contains connection info details\n * @returns {Provider}\n */\nfunction getProvider(config) {\n    switch (config.type) {\n        case undefined:\n            return config;\n        case 'JsonRpcProvider': return new providers_1.JsonRpcProvider({ ...config.args });\n        case 'FailoverRpcProvider': {\n            const providers = (config?.args || []).map((arg) => new providers_1.JsonRpcProvider(arg));\n            return new providers_1.FailoverRpcProvider(providers);\n        }\n        default: throw new Error(`Unknown provider type ${config.type}`);\n    }\n}\n/**\n * @param config Contains connection info details\n * @returns {Signer}\n */\nfunction getSigner(config) {\n    switch (config.type) {\n        case undefined:\n            return config;\n        case 'InMemorySigner': {\n            return new signers_1.InMemorySigner(config.keyStore);\n        }\n        default: throw new Error(`Unknown signer type ${config.type}`);\n    }\n}\n/**\n * Connects an account to a given network via a given provider\n */\nclass Connection {\n    networkId;\n    provider;\n    signer;\n    jsvmAccountId;\n    constructor(networkId, provider, signer, jsvmAccountId) {\n        this.networkId = networkId;\n        this.provider = provider;\n        this.signer = signer;\n        this.jsvmAccountId = jsvmAccountId;\n    }\n    getConnection() {\n        return this;\n    }\n    /**\n     * @param config Contains connection info details\n     */\n    static fromConfig(config) {\n        const provider = getProvider(config.provider);\n        const signer = getSigner(config.signer);\n        return new Connection(config.networkId, provider, signer, config.jsvmAccountId);\n    }\n}\nexports.Connection = Connection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrYWNjb3VudHNAMS4zLjEvbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL2xpYi9jb21tb25qcy9jb25uZWN0aW9uLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0I7QUFDbEIsa0JBQWtCLG1CQUFPLENBQUMsZ0lBQWtCO0FBQzVDLG9CQUFvQixtQkFBTyxDQUFDLHNJQUFvQjtBQUNoRDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsZ0JBQWdCO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELFlBQVk7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxZQUFZO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2F0aG9uLW5lYXItcmVkYWN0ZWQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrYWNjb3VudHNAMS4zLjEvbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL2xpYi9jb21tb25qcy9jb25uZWN0aW9uLmNqcz9jNzZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db25uZWN0aW9uID0gdm9pZCAwO1xuY29uc3Qgc2lnbmVyc18xID0gcmVxdWlyZShcIkBuZWFyLWpzL3NpZ25lcnNcIik7XG5jb25zdCBwcm92aWRlcnNfMSA9IHJlcXVpcmUoXCJAbmVhci1qcy9wcm92aWRlcnNcIik7XG4vKipcbiAqIEBwYXJhbSBjb25maWcgQ29udGFpbnMgY29ubmVjdGlvbiBpbmZvIGRldGFpbHNcbiAqIEByZXR1cm5zIHtQcm92aWRlcn1cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvdmlkZXIoY29uZmlnKSB7XG4gICAgc3dpdGNoIChjb25maWcudHlwZSkge1xuICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICAgIGNhc2UgJ0pzb25ScGNQcm92aWRlcic6IHJldHVybiBuZXcgcHJvdmlkZXJzXzEuSnNvblJwY1Byb3ZpZGVyKHsgLi4uY29uZmlnLmFyZ3MgfSk7XG4gICAgICAgIGNhc2UgJ0ZhaWxvdmVyUnBjUHJvdmlkZXInOiB7XG4gICAgICAgICAgICBjb25zdCBwcm92aWRlcnMgPSAoY29uZmlnPy5hcmdzIHx8IFtdKS5tYXAoKGFyZykgPT4gbmV3IHByb3ZpZGVyc18xLkpzb25ScGNQcm92aWRlcihhcmcpKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgcHJvdmlkZXJzXzEuRmFpbG92ZXJScGNQcm92aWRlcihwcm92aWRlcnMpO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihgVW5rbm93biBwcm92aWRlciB0eXBlICR7Y29uZmlnLnR5cGV9YCk7XG4gICAgfVxufVxuLyoqXG4gKiBAcGFyYW0gY29uZmlnIENvbnRhaW5zIGNvbm5lY3Rpb24gaW5mbyBkZXRhaWxzXG4gKiBAcmV0dXJucyB7U2lnbmVyfVxuICovXG5mdW5jdGlvbiBnZXRTaWduZXIoY29uZmlnKSB7XG4gICAgc3dpdGNoIChjb25maWcudHlwZSkge1xuICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICAgIGNhc2UgJ0luTWVtb3J5U2lnbmVyJzoge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBzaWduZXJzXzEuSW5NZW1vcnlTaWduZXIoY29uZmlnLmtleVN0b3JlKTtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gc2lnbmVyIHR5cGUgJHtjb25maWcudHlwZX1gKTtcbiAgICB9XG59XG4vKipcbiAqIENvbm5lY3RzIGFuIGFjY291bnQgdG8gYSBnaXZlbiBuZXR3b3JrIHZpYSBhIGdpdmVuIHByb3ZpZGVyXG4gKi9cbmNsYXNzIENvbm5lY3Rpb24ge1xuICAgIG5ldHdvcmtJZDtcbiAgICBwcm92aWRlcjtcbiAgICBzaWduZXI7XG4gICAganN2bUFjY291bnRJZDtcbiAgICBjb25zdHJ1Y3RvcihuZXR3b3JrSWQsIHByb3ZpZGVyLCBzaWduZXIsIGpzdm1BY2NvdW50SWQpIHtcbiAgICAgICAgdGhpcy5uZXR3b3JrSWQgPSBuZXR3b3JrSWQ7XG4gICAgICAgIHRoaXMucHJvdmlkZXIgPSBwcm92aWRlcjtcbiAgICAgICAgdGhpcy5zaWduZXIgPSBzaWduZXI7XG4gICAgICAgIHRoaXMuanN2bUFjY291bnRJZCA9IGpzdm1BY2NvdW50SWQ7XG4gICAgfVxuICAgIGdldENvbm5lY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gY29uZmlnIENvbnRhaW5zIGNvbm5lY3Rpb24gaW5mbyBkZXRhaWxzXG4gICAgICovXG4gICAgc3RhdGljIGZyb21Db25maWcoY29uZmlnKSB7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gZ2V0UHJvdmlkZXIoY29uZmlnLnByb3ZpZGVyKTtcbiAgICAgICAgY29uc3Qgc2lnbmVyID0gZ2V0U2lnbmVyKGNvbmZpZy5zaWduZXIpO1xuICAgICAgICByZXR1cm4gbmV3IENvbm5lY3Rpb24oY29uZmlnLm5ldHdvcmtJZCwgcHJvdmlkZXIsIHNpZ25lciwgY29uZmlnLmpzdm1BY2NvdW50SWQpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29ubmVjdGlvbiA9IENvbm5lY3Rpb247XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/connection.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/constants.cjs":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/constants.cjs ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MULTISIG_CONFIRM_METHODS = exports.MULTISIG_CHANGE_METHODS = exports.MULTISIG_DEPOSIT = exports.MULTISIG_GAS = exports.MULTISIG_ALLOWANCE = exports.MULTISIG_STORAGE_KEY = void 0;\nconst utils_1 = __webpack_require__(/*! @near-js/utils */ \"(ssr)/./node_modules/.pnpm/@near-js+utils@1.0.1/node_modules/@near-js/utils/lib/commonjs/index.cjs\");\nexports.MULTISIG_STORAGE_KEY = '__multisigRequest';\nexports.MULTISIG_ALLOWANCE = BigInt((0, utils_1.parseNearAmount)('1'));\n// TODO: Different gas value for different requests (can reduce gas usage dramatically)\nexports.MULTISIG_GAS = 100000000000000n;\nexports.MULTISIG_DEPOSIT = 0n;\nexports.MULTISIG_CHANGE_METHODS = ['add_request', 'add_request_and_confirm', 'delete_request', 'confirm'];\nexports.MULTISIG_CONFIRM_METHODS = ['confirm'];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrYWNjb3VudHNAMS4zLjEvbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL2xpYi9jb21tb25qcy9jb25zdGFudHMuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdDQUFnQyxHQUFHLCtCQUErQixHQUFHLHdCQUF3QixHQUFHLG9CQUFvQixHQUFHLDBCQUEwQixHQUFHLDRCQUE0QjtBQUNoTCxnQkFBZ0IsbUJBQU8sQ0FBQywwSEFBZ0I7QUFDeEMsNEJBQTRCO0FBQzVCLDBCQUEwQjtBQUMxQjtBQUNBLG9CQUFvQjtBQUNwQix3QkFBd0I7QUFDeEIsK0JBQStCO0FBQy9CLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2hhY2thdGhvbi1uZWFyLXJlZGFjdGVkLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BuZWFyLWpzK2FjY291bnRzQDEuMy4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9hY2NvdW50cy9saWIvY29tbW9uanMvY29uc3RhbnRzLmNqcz9mZGRhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NVUxUSVNJR19DT05GSVJNX01FVEhPRFMgPSBleHBvcnRzLk1VTFRJU0lHX0NIQU5HRV9NRVRIT0RTID0gZXhwb3J0cy5NVUxUSVNJR19ERVBPU0lUID0gZXhwb3J0cy5NVUxUSVNJR19HQVMgPSBleHBvcnRzLk1VTFRJU0lHX0FMTE9XQU5DRSA9IGV4cG9ydHMuTVVMVElTSUdfU1RPUkFHRV9LRVkgPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIkBuZWFyLWpzL3V0aWxzXCIpO1xuZXhwb3J0cy5NVUxUSVNJR19TVE9SQUdFX0tFWSA9ICdfX211bHRpc2lnUmVxdWVzdCc7XG5leHBvcnRzLk1VTFRJU0lHX0FMTE9XQU5DRSA9IEJpZ0ludCgoMCwgdXRpbHNfMS5wYXJzZU5lYXJBbW91bnQpKCcxJykpO1xuLy8gVE9ETzogRGlmZmVyZW50IGdhcyB2YWx1ZSBmb3IgZGlmZmVyZW50IHJlcXVlc3RzIChjYW4gcmVkdWNlIGdhcyB1c2FnZSBkcmFtYXRpY2FsbHkpXG5leHBvcnRzLk1VTFRJU0lHX0dBUyA9IDEwMDAwMDAwMDAwMDAwMG47XG5leHBvcnRzLk1VTFRJU0lHX0RFUE9TSVQgPSAwbjtcbmV4cG9ydHMuTVVMVElTSUdfQ0hBTkdFX01FVEhPRFMgPSBbJ2FkZF9yZXF1ZXN0JywgJ2FkZF9yZXF1ZXN0X2FuZF9jb25maXJtJywgJ2RlbGV0ZV9yZXF1ZXN0JywgJ2NvbmZpcm0nXTtcbmV4cG9ydHMuTVVMVElTSUdfQ09ORklSTV9NRVRIT0RTID0gWydjb25maXJtJ107XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/constants.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/contract.cjs":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/contract.cjs ***!
  \*************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Contract = void 0;\nconst utils_1 = __webpack_require__(/*! @near-js/utils */ \"(ssr)/./node_modules/.pnpm/@near-js+utils@1.0.1/node_modules/@near-js/utils/lib/commonjs/index.cjs\");\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/.pnpm/@near-js+types@0.3.1/node_modules/@near-js/types/lib/commonjs/index.cjs\");\nconst local_view_execution_1 = __webpack_require__(/*! ./local-view-execution/index.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/local-view-execution/index.cjs\");\nconst is_my_json_valid_1 = __importDefault(__webpack_require__(/*! is-my-json-valid */ \"(ssr)/./node_modules/.pnpm/is-my-json-valid@2.20.6/node_modules/is-my-json-valid/index.js\"));\nconst depd_1 = __importDefault(__webpack_require__(/*! depd */ \"(ssr)/./node_modules/.pnpm/depd@2.0.0/node_modules/depd/index.js\"));\nconst near_abi_1 = __webpack_require__(/*! near-abi */ \"(ssr)/./node_modules/.pnpm/near-abi@0.1.1/node_modules/near-abi/lib/index.js\");\nconst account_1 = __webpack_require__(/*! ./account.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/account.cjs\");\nconst errors_1 = __webpack_require__(/*! ./errors.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/errors.cjs\");\nconst utils_2 = __webpack_require__(/*! ./utils.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/utils.cjs\");\n// Makes `function.name` return given name\nfunction nameFunction(name, body) {\n    return {\n        [name](...args) {\n            return body(...args);\n        },\n    }[name];\n}\nfunction validateArguments(args, abiFunction, abiRoot) {\n    if (!isObject(args))\n        return;\n    if (abiFunction.params &&\n        abiFunction.params.serialization_type !== near_abi_1.AbiSerializationType.Json) {\n        throw new errors_1.UnsupportedSerializationError(abiFunction.name, abiFunction.params.serialization_type);\n    }\n    if (abiFunction.result &&\n        abiFunction.result.serialization_type !== near_abi_1.AbiSerializationType.Json) {\n        throw new errors_1.UnsupportedSerializationError(abiFunction.name, abiFunction.result.serialization_type);\n    }\n    const params = abiFunction.params?.args || [];\n    for (const p of params) {\n        const arg = args[p.name];\n        const typeSchema = p.type_schema;\n        typeSchema.definitions = abiRoot.body.root_schema.definitions;\n        const validate = (0, is_my_json_valid_1.default)(typeSchema);\n        const valid = validate(arg);\n        if (!valid) {\n            throw new errors_1.ArgumentSchemaError(p.name, validate.errors);\n        }\n    }\n    // Check there are no extra unknown arguments passed\n    for (const argName of Object.keys(args)) {\n        const param = params.find((p) => p.name === argName);\n        if (!param) {\n            throw new errors_1.UnknownArgumentError(argName, params.map((p) => p.name));\n        }\n    }\n}\nconst isUint8Array = (x) => x && x.byteLength !== undefined && x.byteLength === x.length;\nconst isObject = (x) => Object.prototype.toString.call(x) === \"[object Object]\";\n/**\n * Defines a smart contract on NEAR including the change (mutable) and view (non-mutable) methods\n *\n * @see [https://docs.near.org/tools/near-api-js/quick-reference#contract](https://docs.near.org/tools/near-api-js/quick-reference#contract)\n * @example\n * ```js\n * import { Contract } from 'near-api-js';\n *\n * async function contractExample() {\n *   const methodOptions = {\n *     viewMethods: ['getMessageByAccountId'],\n *     changeMethods: ['addMessage']\n *   };\n *   const contract = new Contract(\n *     wallet.account(),\n *     'contract-id.testnet',\n *     methodOptions\n *   );\n *\n *   // use a contract view method\n *   const messages = await contract.getMessages({\n *     accountId: 'example-account.testnet'\n *   });\n *\n *   // use a contract change method\n *   await contract.addMessage({\n *      meta: 'some info',\n *      callbackUrl: 'https://example.com/callback',\n *      args: { text: 'my message' },\n *      amount: 1\n *   })\n * }\n * ```\n */\nclass Contract {\n    /** @deprecated */\n    account;\n    connection;\n    contractId;\n    lve;\n    /**\n     * @param account NEAR account to sign change method transactions\n     * @param contractId NEAR account id where the contract is deployed\n     * @param options NEAR smart contract methods that your application will use. These will be available as `contract.methodName`\n     */\n    constructor(connection, contractId, options) {\n        this.connection = connection.getConnection();\n        if (connection instanceof account_1.Account) {\n            const deprecate = (0, depd_1.default)(\"new Contract(account, contractId, options)\");\n            deprecate(\"use `new Contract(connection, contractId, options)` instead\");\n            this.account = connection;\n        }\n        this.contractId = contractId;\n        this.lve = new local_view_execution_1.LocalViewExecution(connection);\n        const { viewMethods = [], changeMethods = [], abi: abiRoot, useLocalViewExecution, } = options;\n        let viewMethodsWithAbi = viewMethods.map((name) => ({\n            name,\n            abi: null,\n        }));\n        let changeMethodsWithAbi = changeMethods.map((name) => ({\n            name,\n            abi: null,\n        }));\n        if (abiRoot) {\n            if (viewMethodsWithAbi.length > 0 ||\n                changeMethodsWithAbi.length > 0) {\n                throw new errors_1.ConflictingOptions();\n            }\n            viewMethodsWithAbi = abiRoot.body.functions\n                .filter((m) => m.kind === near_abi_1.AbiFunctionKind.View)\n                .map((m) => ({ name: m.name, abi: m }));\n            changeMethodsWithAbi = abiRoot.body.functions\n                .filter((methodAbi) => methodAbi.kind === near_abi_1.AbiFunctionKind.Call)\n                .map((methodAbi) => ({ name: methodAbi.name, abi: methodAbi }));\n        }\n        viewMethodsWithAbi.forEach(({ name, abi }) => {\n            Object.defineProperty(this, name, {\n                writable: false,\n                enumerable: true,\n                value: nameFunction(name, async (args = {}, options = {}, ...ignored) => {\n                    if (ignored.length ||\n                        !(isObject(args) || isUint8Array(args)) ||\n                        !isObject(options)) {\n                        throw new types_1.PositionalArgsError();\n                    }\n                    if (abi) {\n                        validateArguments(args, abi, abiRoot);\n                    }\n                    if (useLocalViewExecution) {\n                        try {\n                            return await this.lve.viewFunction({\n                                contractId: this.contractId,\n                                methodName: name,\n                                args,\n                                ...options,\n                            });\n                        }\n                        catch (error) {\n                            utils_1.Logger.warn(`Local view execution failed with: \"${error.message}\"`);\n                            utils_1.Logger.warn(`Fallback to normal RPC call`);\n                        }\n                    }\n                    if (this.account) {\n                        return this.account.viewFunction({\n                            contractId: this.contractId,\n                            methodName: name,\n                            args,\n                            ...options,\n                        });\n                    }\n                    return (0, utils_2.viewFunction)(this.connection, {\n                        contractId: this.contractId,\n                        methodName: name,\n                        args,\n                        ...options,\n                    });\n                }),\n            });\n        });\n        changeMethodsWithAbi.forEach(({ name, abi }) => {\n            Object.defineProperty(this, name, {\n                writable: false,\n                enumerable: true,\n                value: nameFunction(name, async (...args) => {\n                    if (args.length &&\n                        (args.length > 3 ||\n                            !(isObject(args[0]) || isUint8Array(args[0])))) {\n                        throw new types_1.PositionalArgsError();\n                    }\n                    if (args.length > 1 || !(args[0] && args[0].args)) {\n                        const deprecate = (0, depd_1.default)(\"contract.methodName(args, gas, amount)\");\n                        deprecate(\"use `contract.methodName({ signerAccount, args, gas?, amount?, callbackUrl?, meta? })` instead\");\n                        args[0] = {\n                            args: args[0],\n                            gas: args[1],\n                            amount: args[2],\n                        };\n                    }\n                    if (abi) {\n                        validateArguments(args[0].args, abi, abiRoot);\n                    }\n                    return this._changeMethod({ methodName: name, ...args[0] });\n                }),\n            });\n        });\n    }\n    async _changeMethod({ signerAccount, args, methodName, gas, amount, meta, callbackUrl, }) {\n        validateBNLike({ gas, amount });\n        const account = this.account || signerAccount;\n        if (!account)\n            throw new Error(`signerAccount must be specified`);\n        const rawResult = await account.functionCall({\n            contractId: this.contractId,\n            methodName,\n            args,\n            gas,\n            attachedDeposit: amount,\n            walletMeta: meta,\n            walletCallbackUrl: callbackUrl,\n        });\n        return (0, utils_1.getTransactionLastResult)(rawResult);\n    }\n}\nexports.Contract = Contract;\n/**\n * Throws if an argument is not in BigInt format or otherwise invalid\n * @param argMap\n */\nfunction validateBNLike(argMap) {\n    const bnLike = \"number, decimal string or BigInt\";\n    for (const argName of Object.keys(argMap)) {\n        const argValue = argMap[argName];\n        if (argValue && typeof argValue !== \"bigint\" && isNaN(argValue)) {\n            throw new types_1.ArgumentTypeError(argName, bnLike, argValue);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/contract.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/errors.cjs":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/errors.cjs ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConflictingOptions = exports.ArgumentSchemaError = exports.UnknownArgumentError = exports.UnsupportedSerializationError = void 0;\nclass UnsupportedSerializationError extends Error {\n    constructor(methodName, serializationType) {\n        super(`Contract method '${methodName}' is using an unsupported serialization type ${serializationType}`);\n    }\n}\nexports.UnsupportedSerializationError = UnsupportedSerializationError;\nclass UnknownArgumentError extends Error {\n    constructor(actualArgName, expectedArgNames) {\n        super(`Unrecognized argument '${actualArgName}', expected '${JSON.stringify(expectedArgNames)}'`);\n    }\n}\nexports.UnknownArgumentError = UnknownArgumentError;\nclass ArgumentSchemaError extends Error {\n    constructor(argName, errors) {\n        super(`Argument '${argName}' does not conform to the specified ABI schema: '${JSON.stringify(errors)}'`);\n    }\n}\nexports.ArgumentSchemaError = ArgumentSchemaError;\nclass ConflictingOptions extends Error {\n    constructor() {\n        super('Conflicting contract method options have been passed. You can either specify ABI or a list of view/call methods.');\n    }\n}\nexports.ConflictingOptions = ConflictingOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrYWNjb3VudHNAMS4zLjEvbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL2xpYi9jb21tb25qcy9lcnJvcnMuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQixHQUFHLDJCQUEyQixHQUFHLDRCQUE0QixHQUFHLHFDQUFxQztBQUMvSDtBQUNBO0FBQ0Esa0NBQWtDLFdBQVcsK0NBQStDLGtCQUFrQjtBQUM5RztBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQSx3Q0FBd0MsY0FBYyxlQUFlLGlDQUFpQztBQUN0RztBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQSwyQkFBMkIsUUFBUSxtREFBbUQsdUJBQXVCO0FBQzdHO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiIsInNvdXJjZXMiOlsid2VicGFjazovL2hhY2thdGhvbi1uZWFyLXJlZGFjdGVkLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BuZWFyLWpzK2FjY291bnRzQDEuMy4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9hY2NvdW50cy9saWIvY29tbW9uanMvZXJyb3JzLmNqcz81ZGExIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db25mbGljdGluZ09wdGlvbnMgPSBleHBvcnRzLkFyZ3VtZW50U2NoZW1hRXJyb3IgPSBleHBvcnRzLlVua25vd25Bcmd1bWVudEVycm9yID0gZXhwb3J0cy5VbnN1cHBvcnRlZFNlcmlhbGl6YXRpb25FcnJvciA9IHZvaWQgMDtcbmNsYXNzIFVuc3VwcG9ydGVkU2VyaWFsaXphdGlvbkVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZE5hbWUsIHNlcmlhbGl6YXRpb25UeXBlKSB7XG4gICAgICAgIHN1cGVyKGBDb250cmFjdCBtZXRob2QgJyR7bWV0aG9kTmFtZX0nIGlzIHVzaW5nIGFuIHVuc3VwcG9ydGVkIHNlcmlhbGl6YXRpb24gdHlwZSAke3NlcmlhbGl6YXRpb25UeXBlfWApO1xuICAgIH1cbn1cbmV4cG9ydHMuVW5zdXBwb3J0ZWRTZXJpYWxpemF0aW9uRXJyb3IgPSBVbnN1cHBvcnRlZFNlcmlhbGl6YXRpb25FcnJvcjtcbmNsYXNzIFVua25vd25Bcmd1bWVudEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGFjdHVhbEFyZ05hbWUsIGV4cGVjdGVkQXJnTmFtZXMpIHtcbiAgICAgICAgc3VwZXIoYFVucmVjb2duaXplZCBhcmd1bWVudCAnJHthY3R1YWxBcmdOYW1lfScsIGV4cGVjdGVkICcke0pTT04uc3RyaW5naWZ5KGV4cGVjdGVkQXJnTmFtZXMpfSdgKTtcbiAgICB9XG59XG5leHBvcnRzLlVua25vd25Bcmd1bWVudEVycm9yID0gVW5rbm93bkFyZ3VtZW50RXJyb3I7XG5jbGFzcyBBcmd1bWVudFNjaGVtYUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGFyZ05hbWUsIGVycm9ycykge1xuICAgICAgICBzdXBlcihgQXJndW1lbnQgJyR7YXJnTmFtZX0nIGRvZXMgbm90IGNvbmZvcm0gdG8gdGhlIHNwZWNpZmllZCBBQkkgc2NoZW1hOiAnJHtKU09OLnN0cmluZ2lmeShlcnJvcnMpfSdgKTtcbiAgICB9XG59XG5leHBvcnRzLkFyZ3VtZW50U2NoZW1hRXJyb3IgPSBBcmd1bWVudFNjaGVtYUVycm9yO1xuY2xhc3MgQ29uZmxpY3RpbmdPcHRpb25zIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignQ29uZmxpY3RpbmcgY29udHJhY3QgbWV0aG9kIG9wdGlvbnMgaGF2ZSBiZWVuIHBhc3NlZC4gWW91IGNhbiBlaXRoZXIgc3BlY2lmeSBBQkkgb3IgYSBsaXN0IG9mIHZpZXcvY2FsbCBtZXRob2RzLicpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29uZmxpY3RpbmdPcHRpb25zID0gQ29uZmxpY3RpbmdPcHRpb25zO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/errors.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/index.cjs":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/index.cjs ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MultisigStateStatus = exports.MultisigDeleteRequestRejectionError = exports.UnsupportedSerializationError = exports.UnknownArgumentError = exports.ConflictingOptions = exports.ArgumentSchemaError = exports.Contract = exports.MULTISIG_CONFIRM_METHODS = exports.MULTISIG_CHANGE_METHODS = exports.MULTISIG_DEPOSIT = exports.MULTISIG_GAS = exports.MULTISIG_ALLOWANCE = exports.MULTISIG_STORAGE_KEY = exports.Connection = exports.AccountMultisig = exports.UrlAccountCreator = exports.LocalAccountCreator = exports.AccountCreator = exports.Account2FA = exports.Account = void 0;\nvar account_1 = __webpack_require__(/*! ./account.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/account.cjs\");\nObject.defineProperty(exports, \"Account\", ({ enumerable: true, get: function () { return account_1.Account; } }));\nvar account_2fa_1 = __webpack_require__(/*! ./account_2fa.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/account_2fa.cjs\");\nObject.defineProperty(exports, \"Account2FA\", ({ enumerable: true, get: function () { return account_2fa_1.Account2FA; } }));\nvar account_creator_1 = __webpack_require__(/*! ./account_creator.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/account_creator.cjs\");\nObject.defineProperty(exports, \"AccountCreator\", ({ enumerable: true, get: function () { return account_creator_1.AccountCreator; } }));\nObject.defineProperty(exports, \"LocalAccountCreator\", ({ enumerable: true, get: function () { return account_creator_1.LocalAccountCreator; } }));\nObject.defineProperty(exports, \"UrlAccountCreator\", ({ enumerable: true, get: function () { return account_creator_1.UrlAccountCreator; } }));\nvar account_multisig_1 = __webpack_require__(/*! ./account_multisig.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/account_multisig.cjs\");\nObject.defineProperty(exports, \"AccountMultisig\", ({ enumerable: true, get: function () { return account_multisig_1.AccountMultisig; } }));\nvar connection_1 = __webpack_require__(/*! ./connection.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/connection.cjs\");\nObject.defineProperty(exports, \"Connection\", ({ enumerable: true, get: function () { return connection_1.Connection; } }));\nvar constants_1 = __webpack_require__(/*! ./constants.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/constants.cjs\");\nObject.defineProperty(exports, \"MULTISIG_STORAGE_KEY\", ({ enumerable: true, get: function () { return constants_1.MULTISIG_STORAGE_KEY; } }));\nObject.defineProperty(exports, \"MULTISIG_ALLOWANCE\", ({ enumerable: true, get: function () { return constants_1.MULTISIG_ALLOWANCE; } }));\nObject.defineProperty(exports, \"MULTISIG_GAS\", ({ enumerable: true, get: function () { return constants_1.MULTISIG_GAS; } }));\nObject.defineProperty(exports, \"MULTISIG_DEPOSIT\", ({ enumerable: true, get: function () { return constants_1.MULTISIG_DEPOSIT; } }));\nObject.defineProperty(exports, \"MULTISIG_CHANGE_METHODS\", ({ enumerable: true, get: function () { return constants_1.MULTISIG_CHANGE_METHODS; } }));\nObject.defineProperty(exports, \"MULTISIG_CONFIRM_METHODS\", ({ enumerable: true, get: function () { return constants_1.MULTISIG_CONFIRM_METHODS; } }));\nvar contract_1 = __webpack_require__(/*! ./contract.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/contract.cjs\");\nObject.defineProperty(exports, \"Contract\", ({ enumerable: true, get: function () { return contract_1.Contract; } }));\nvar errors_1 = __webpack_require__(/*! ./errors.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/errors.cjs\");\nObject.defineProperty(exports, \"ArgumentSchemaError\", ({ enumerable: true, get: function () { return errors_1.ArgumentSchemaError; } }));\nObject.defineProperty(exports, \"ConflictingOptions\", ({ enumerable: true, get: function () { return errors_1.ConflictingOptions; } }));\nObject.defineProperty(exports, \"UnknownArgumentError\", ({ enumerable: true, get: function () { return errors_1.UnknownArgumentError; } }));\nObject.defineProperty(exports, \"UnsupportedSerializationError\", ({ enumerable: true, get: function () { return errors_1.UnsupportedSerializationError; } }));\nvar types_1 = __webpack_require__(/*! ./types.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/types.cjs\");\nObject.defineProperty(exports, \"MultisigDeleteRequestRejectionError\", ({ enumerable: true, get: function () { return types_1.MultisigDeleteRequestRejectionError; } }));\nObject.defineProperty(exports, \"MultisigStateStatus\", ({ enumerable: true, get: function () { return types_1.MultisigStateStatus; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrYWNjb3VudHNAMS4zLjEvbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL2xpYi9jb21tb25qcy9pbmRleC5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCLEdBQUcsMkNBQTJDLEdBQUcscUNBQXFDLEdBQUcsNEJBQTRCLEdBQUcsMEJBQTBCLEdBQUcsMkJBQTJCLEdBQUcsZ0JBQWdCLEdBQUcsZ0NBQWdDLEdBQUcsK0JBQStCLEdBQUcsd0JBQXdCLEdBQUcsb0JBQW9CLEdBQUcsMEJBQTBCLEdBQUcsNEJBQTRCLEdBQUcsa0JBQWtCLEdBQUcsdUJBQXVCLEdBQUcseUJBQXlCLEdBQUcsMkJBQTJCLEdBQUcsc0JBQXNCLEdBQUcsa0JBQWtCLEdBQUcsZUFBZTtBQUMxakIsZ0JBQWdCLG1CQUFPLENBQUMsaUlBQWU7QUFDdkMsMkNBQTBDLEVBQUUscUNBQXFDLDZCQUE2QixFQUFDO0FBQy9HLG9CQUFvQixtQkFBTyxDQUFDLHlJQUFtQjtBQUMvQyw4Q0FBNkMsRUFBRSxxQ0FBcUMsb0NBQW9DLEVBQUM7QUFDekgsd0JBQXdCLG1CQUFPLENBQUMsaUpBQXVCO0FBQ3ZELGtEQUFpRCxFQUFFLHFDQUFxQyw0Q0FBNEMsRUFBQztBQUNySSx1REFBc0QsRUFBRSxxQ0FBcUMsaURBQWlELEVBQUM7QUFDL0kscURBQW9ELEVBQUUscUNBQXFDLCtDQUErQyxFQUFDO0FBQzNJLHlCQUF5QixtQkFBTyxDQUFDLG1KQUF3QjtBQUN6RCxtREFBa0QsRUFBRSxxQ0FBcUMsOENBQThDLEVBQUM7QUFDeEksbUJBQW1CLG1CQUFPLENBQUMsdUlBQWtCO0FBQzdDLDhDQUE2QyxFQUFFLHFDQUFxQyxtQ0FBbUMsRUFBQztBQUN4SCxrQkFBa0IsbUJBQU8sQ0FBQyxxSUFBaUI7QUFDM0Msd0RBQXVELEVBQUUscUNBQXFDLDRDQUE0QyxFQUFDO0FBQzNJLHNEQUFxRCxFQUFFLHFDQUFxQywwQ0FBMEMsRUFBQztBQUN2SSxnREFBK0MsRUFBRSxxQ0FBcUMsb0NBQW9DLEVBQUM7QUFDM0gsb0RBQW1ELEVBQUUscUNBQXFDLHdDQUF3QyxFQUFDO0FBQ25JLDJEQUEwRCxFQUFFLHFDQUFxQywrQ0FBK0MsRUFBQztBQUNqSiw0REFBMkQsRUFBRSxxQ0FBcUMsZ0RBQWdELEVBQUM7QUFDbkosaUJBQWlCLG1CQUFPLENBQUMsbUlBQWdCO0FBQ3pDLDRDQUEyQyxFQUFFLHFDQUFxQywrQkFBK0IsRUFBQztBQUNsSCxlQUFlLG1CQUFPLENBQUMsK0hBQWM7QUFDckMsdURBQXNELEVBQUUscUNBQXFDLHdDQUF3QyxFQUFDO0FBQ3RJLHNEQUFxRCxFQUFFLHFDQUFxQyx1Q0FBdUMsRUFBQztBQUNwSSx3REFBdUQsRUFBRSxxQ0FBcUMseUNBQXlDLEVBQUM7QUFDeEksaUVBQWdFLEVBQUUscUNBQXFDLGtEQUFrRCxFQUFDO0FBQzFKLGNBQWMsbUJBQU8sQ0FBQyw2SEFBYTtBQUNuQyx1RUFBc0UsRUFBRSxxQ0FBcUMsdURBQXVELEVBQUM7QUFDckssdURBQXNELEVBQUUscUNBQXFDLHVDQUF1QyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2F0aG9uLW5lYXItcmVkYWN0ZWQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrYWNjb3VudHNAMS4zLjEvbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL2xpYi9jb21tb25qcy9pbmRleC5janM/MmUyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTXVsdGlzaWdTdGF0ZVN0YXR1cyA9IGV4cG9ydHMuTXVsdGlzaWdEZWxldGVSZXF1ZXN0UmVqZWN0aW9uRXJyb3IgPSBleHBvcnRzLlVuc3VwcG9ydGVkU2VyaWFsaXphdGlvbkVycm9yID0gZXhwb3J0cy5Vbmtub3duQXJndW1lbnRFcnJvciA9IGV4cG9ydHMuQ29uZmxpY3RpbmdPcHRpb25zID0gZXhwb3J0cy5Bcmd1bWVudFNjaGVtYUVycm9yID0gZXhwb3J0cy5Db250cmFjdCA9IGV4cG9ydHMuTVVMVElTSUdfQ09ORklSTV9NRVRIT0RTID0gZXhwb3J0cy5NVUxUSVNJR19DSEFOR0VfTUVUSE9EUyA9IGV4cG9ydHMuTVVMVElTSUdfREVQT1NJVCA9IGV4cG9ydHMuTVVMVElTSUdfR0FTID0gZXhwb3J0cy5NVUxUSVNJR19BTExPV0FOQ0UgPSBleHBvcnRzLk1VTFRJU0lHX1NUT1JBR0VfS0VZID0gZXhwb3J0cy5Db25uZWN0aW9uID0gZXhwb3J0cy5BY2NvdW50TXVsdGlzaWcgPSBleHBvcnRzLlVybEFjY291bnRDcmVhdG9yID0gZXhwb3J0cy5Mb2NhbEFjY291bnRDcmVhdG9yID0gZXhwb3J0cy5BY2NvdW50Q3JlYXRvciA9IGV4cG9ydHMuQWNjb3VudDJGQSA9IGV4cG9ydHMuQWNjb3VudCA9IHZvaWQgMDtcbnZhciBhY2NvdW50XzEgPSByZXF1aXJlKFwiLi9hY2NvdW50LmNqc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFjY291bnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFjY291bnRfMS5BY2NvdW50OyB9IH0pO1xudmFyIGFjY291bnRfMmZhXzEgPSByZXF1aXJlKFwiLi9hY2NvdW50XzJmYS5janNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBY2NvdW50MkZBXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhY2NvdW50XzJmYV8xLkFjY291bnQyRkE7IH0gfSk7XG52YXIgYWNjb3VudF9jcmVhdG9yXzEgPSByZXF1aXJlKFwiLi9hY2NvdW50X2NyZWF0b3IuY2pzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQWNjb3VudENyZWF0b3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFjY291bnRfY3JlYXRvcl8xLkFjY291bnRDcmVhdG9yOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTG9jYWxBY2NvdW50Q3JlYXRvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYWNjb3VudF9jcmVhdG9yXzEuTG9jYWxBY2NvdW50Q3JlYXRvcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlVybEFjY291bnRDcmVhdG9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhY2NvdW50X2NyZWF0b3JfMS5VcmxBY2NvdW50Q3JlYXRvcjsgfSB9KTtcbnZhciBhY2NvdW50X211bHRpc2lnXzEgPSByZXF1aXJlKFwiLi9hY2NvdW50X211bHRpc2lnLmNqc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFjY291bnRNdWx0aXNpZ1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYWNjb3VudF9tdWx0aXNpZ18xLkFjY291bnRNdWx0aXNpZzsgfSB9KTtcbnZhciBjb25uZWN0aW9uXzEgPSByZXF1aXJlKFwiLi9jb25uZWN0aW9uLmNqc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbm5lY3Rpb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3Rpb25fMS5Db25uZWN0aW9uOyB9IH0pO1xudmFyIGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzLmNqc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1VTFRJU0lHX1NUT1JBR0VfS0VZXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25zdGFudHNfMS5NVUxUSVNJR19TVE9SQUdFX0tFWTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1VTFRJU0lHX0FMTE9XQU5DRVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uc3RhbnRzXzEuTVVMVElTSUdfQUxMT1dBTkNFOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTVVMVElTSUdfR0FTXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25zdGFudHNfMS5NVUxUSVNJR19HQVM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNVUxUSVNJR19ERVBPU0lUXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25zdGFudHNfMS5NVUxUSVNJR19ERVBPU0lUOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTVVMVElTSUdfQ0hBTkdFX01FVEhPRFNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbnN0YW50c18xLk1VTFRJU0lHX0NIQU5HRV9NRVRIT0RTOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTVVMVElTSUdfQ09ORklSTV9NRVRIT0RTXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25zdGFudHNfMS5NVUxUSVNJR19DT05GSVJNX01FVEhPRFM7IH0gfSk7XG52YXIgY29udHJhY3RfMSA9IHJlcXVpcmUoXCIuL2NvbnRyYWN0LmNqc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbnRyYWN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb250cmFjdF8xLkNvbnRyYWN0OyB9IH0pO1xudmFyIGVycm9yc18xID0gcmVxdWlyZShcIi4vZXJyb3JzLmNqc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFyZ3VtZW50U2NoZW1hRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVycm9yc18xLkFyZ3VtZW50U2NoZW1hRXJyb3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb25mbGljdGluZ09wdGlvbnNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVycm9yc18xLkNvbmZsaWN0aW5nT3B0aW9uczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlVua25vd25Bcmd1bWVudEVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfMS5Vbmtub3duQXJndW1lbnRFcnJvcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlVuc3VwcG9ydGVkU2VyaWFsaXphdGlvbkVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfMS5VbnN1cHBvcnRlZFNlcmlhbGl6YXRpb25FcnJvcjsgfSB9KTtcbnZhciB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXMuY2pzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTXVsdGlzaWdEZWxldGVSZXF1ZXN0UmVqZWN0aW9uRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHR5cGVzXzEuTXVsdGlzaWdEZWxldGVSZXF1ZXN0UmVqZWN0aW9uRXJyb3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNdWx0aXNpZ1N0YXRlU3RhdHVzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlc18xLk11bHRpc2lnU3RhdGVTdGF0dXM7IH0gfSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/local-view-execution/index.cjs":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/local-view-execution/index.cjs ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LocalViewExecution = void 0;\nconst utils_1 = __webpack_require__(/*! @near-js/utils */ \"(ssr)/./node_modules/.pnpm/@near-js+utils@1.0.1/node_modules/@near-js/utils/lib/commonjs/index.cjs\");\nconst storage_1 = __webpack_require__(/*! ./storage.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/local-view-execution/storage.cjs\");\nconst runtime_1 = __webpack_require__(/*! ./runtime.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/local-view-execution/runtime.cjs\");\nconst utils_2 = __webpack_require__(/*! ../utils.cjs */ \"(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/utils.cjs\");\nclass LocalViewExecution {\n    connection;\n    storage;\n    constructor(connection) {\n        this.connection = connection.getConnection();\n        this.storage = new storage_1.Storage();\n    }\n    async fetchContractCode(contractId, blockQuery) {\n        const result = await this.connection.provider.query({\n            request_type: 'view_code',\n            account_id: contractId,\n            ...blockQuery,\n        });\n        return result.code_base64;\n    }\n    async fetchContractState(contractId, blockQuery) {\n        return (0, utils_2.viewState)(this.connection, contractId, '', blockQuery);\n    }\n    async fetch(contractId, blockQuery) {\n        const block = await this.connection.provider.block(blockQuery);\n        const blockHash = block.header.hash;\n        const blockHeight = block.header.height;\n        const blockTimestamp = block.header.timestamp;\n        const contractCode = await this.fetchContractCode(contractId, blockQuery);\n        const contractState = await this.fetchContractState(contractId, blockQuery);\n        return {\n            blockHash,\n            blockHeight,\n            blockTimestamp,\n            contractCode,\n            contractState,\n        };\n    }\n    async loadOrFetch(contractId, blockQuery) {\n        const stored = this.storage.load(blockQuery);\n        if (stored) {\n            return stored;\n        }\n        const { blockHash, ...fetched } = await this.fetch(contractId, blockQuery);\n        this.storage.save(blockHash, fetched);\n        return fetched;\n    }\n    /**\n     * Calls a view function on a contract, fetching the contract code and state if needed.\n     * @param options Options for calling the view function.\n     * @param options.contractId The contract account ID.\n     * @param options.methodName The name of the view function to call.\n     * @param options.args The arguments to pass to the view function.\n     * @param options.blockQuery The block query options.\n     * @returns {Promise<any>} - A promise that resolves to the result of the view function.\n     */\n    async viewFunction({ contractId, methodName, args = {}, blockQuery = { finality: 'optimistic' } }) {\n        const methodArgs = JSON.stringify(args);\n        const { contractCode, contractState, blockHeight, blockTimestamp } = await this.loadOrFetch(contractId, blockQuery);\n        const runtime = new runtime_1.Runtime({ contractId, contractCode, contractState, blockHeight, blockTimestamp, methodArgs });\n        const { result, logs } = await runtime.execute(methodName);\n        if (logs) {\n            (0, utils_1.printTxOutcomeLogs)({ contractId, logs });\n        }\n        return JSON.parse(Buffer.from(result).toString());\n    }\n}\nexports.LocalViewExecution = LocalViewExecution;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrYWNjb3VudHNAMS4zLjEvbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL2xpYi9jb21tb25qcy9sb2NhbC12aWV3LWV4ZWN1dGlvbi9pbmRleC5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCLGdCQUFnQixtQkFBTyxDQUFDLDBIQUFnQjtBQUN4QyxrQkFBa0IsbUJBQU8sQ0FBQyxzSkFBZTtBQUN6QyxrQkFBa0IsbUJBQU8sQ0FBQyxzSkFBZTtBQUN6QyxnQkFBZ0IsbUJBQU8sQ0FBQyw4SEFBYztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isd0JBQXdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGNBQWM7QUFDL0I7QUFDQSx5QkFBeUIsaUNBQWlDLGlCQUFpQiwwQkFBMEI7QUFDckc7QUFDQSxnQkFBZ0IsMkRBQTJEO0FBQzNFLGdEQUFnRCxrRkFBa0Y7QUFDbEksZ0JBQWdCLGVBQWU7QUFDL0I7QUFDQSw4Q0FBOEMsa0JBQWtCO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2F0aG9uLW5lYXItcmVkYWN0ZWQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrYWNjb3VudHNAMS4zLjEvbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL2xpYi9jb21tb25qcy9sb2NhbC12aWV3LWV4ZWN1dGlvbi9pbmRleC5janM/Y2Q4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTG9jYWxWaWV3RXhlY3V0aW9uID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCJAbmVhci1qcy91dGlsc1wiKTtcbmNvbnN0IHN0b3JhZ2VfMSA9IHJlcXVpcmUoXCIuL3N0b3JhZ2UuY2pzXCIpO1xuY29uc3QgcnVudGltZV8xID0gcmVxdWlyZShcIi4vcnVudGltZS5janNcIik7XG5jb25zdCB1dGlsc18yID0gcmVxdWlyZShcIi4uL3V0aWxzLmNqc1wiKTtcbmNsYXNzIExvY2FsVmlld0V4ZWN1dGlvbiB7XG4gICAgY29ubmVjdGlvbjtcbiAgICBzdG9yYWdlO1xuICAgIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gY29ubmVjdGlvbi5nZXRDb25uZWN0aW9uKCk7XG4gICAgICAgIHRoaXMuc3RvcmFnZSA9IG5ldyBzdG9yYWdlXzEuU3RvcmFnZSgpO1xuICAgIH1cbiAgICBhc3luYyBmZXRjaENvbnRyYWN0Q29kZShjb250cmFjdElkLCBibG9ja1F1ZXJ5KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuY29ubmVjdGlvbi5wcm92aWRlci5xdWVyeSh7XG4gICAgICAgICAgICByZXF1ZXN0X3R5cGU6ICd2aWV3X2NvZGUnLFxuICAgICAgICAgICAgYWNjb3VudF9pZDogY29udHJhY3RJZCxcbiAgICAgICAgICAgIC4uLmJsb2NrUXVlcnksXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0LmNvZGVfYmFzZTY0O1xuICAgIH1cbiAgICBhc3luYyBmZXRjaENvbnRyYWN0U3RhdGUoY29udHJhY3RJZCwgYmxvY2tRdWVyeSkge1xuICAgICAgICByZXR1cm4gKDAsIHV0aWxzXzIudmlld1N0YXRlKSh0aGlzLmNvbm5lY3Rpb24sIGNvbnRyYWN0SWQsICcnLCBibG9ja1F1ZXJ5KTtcbiAgICB9XG4gICAgYXN5bmMgZmV0Y2goY29udHJhY3RJZCwgYmxvY2tRdWVyeSkge1xuICAgICAgICBjb25zdCBibG9jayA9IGF3YWl0IHRoaXMuY29ubmVjdGlvbi5wcm92aWRlci5ibG9jayhibG9ja1F1ZXJ5KTtcbiAgICAgICAgY29uc3QgYmxvY2tIYXNoID0gYmxvY2suaGVhZGVyLmhhc2g7XG4gICAgICAgIGNvbnN0IGJsb2NrSGVpZ2h0ID0gYmxvY2suaGVhZGVyLmhlaWdodDtcbiAgICAgICAgY29uc3QgYmxvY2tUaW1lc3RhbXAgPSBibG9jay5oZWFkZXIudGltZXN0YW1wO1xuICAgICAgICBjb25zdCBjb250cmFjdENvZGUgPSBhd2FpdCB0aGlzLmZldGNoQ29udHJhY3RDb2RlKGNvbnRyYWN0SWQsIGJsb2NrUXVlcnkpO1xuICAgICAgICBjb25zdCBjb250cmFjdFN0YXRlID0gYXdhaXQgdGhpcy5mZXRjaENvbnRyYWN0U3RhdGUoY29udHJhY3RJZCwgYmxvY2tRdWVyeSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBibG9ja0hhc2gsXG4gICAgICAgICAgICBibG9ja0hlaWdodCxcbiAgICAgICAgICAgIGJsb2NrVGltZXN0YW1wLFxuICAgICAgICAgICAgY29udHJhY3RDb2RlLFxuICAgICAgICAgICAgY29udHJhY3RTdGF0ZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXN5bmMgbG9hZE9yRmV0Y2goY29udHJhY3RJZCwgYmxvY2tRdWVyeSkge1xuICAgICAgICBjb25zdCBzdG9yZWQgPSB0aGlzLnN0b3JhZ2UubG9hZChibG9ja1F1ZXJ5KTtcbiAgICAgICAgaWYgKHN0b3JlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0b3JlZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGJsb2NrSGFzaCwgLi4uZmV0Y2hlZCB9ID0gYXdhaXQgdGhpcy5mZXRjaChjb250cmFjdElkLCBibG9ja1F1ZXJ5KTtcbiAgICAgICAgdGhpcy5zdG9yYWdlLnNhdmUoYmxvY2tIYXNoLCBmZXRjaGVkKTtcbiAgICAgICAgcmV0dXJuIGZldGNoZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxzIGEgdmlldyBmdW5jdGlvbiBvbiBhIGNvbnRyYWN0LCBmZXRjaGluZyB0aGUgY29udHJhY3QgY29kZSBhbmQgc3RhdGUgaWYgbmVlZGVkLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZm9yIGNhbGxpbmcgdGhlIHZpZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIG9wdGlvbnMuY29udHJhY3RJZCBUaGUgY29udHJhY3QgYWNjb3VudCBJRC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5tZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSB2aWV3IGZ1bmN0aW9uIHRvIGNhbGwuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYXJncyBUaGUgYXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIHZpZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYmxvY2tRdWVyeSBUaGUgYmxvY2sgcXVlcnkgb3B0aW9ucy5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSAtIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSByZXN1bHQgb2YgdGhlIHZpZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgYXN5bmMgdmlld0Z1bmN0aW9uKHsgY29udHJhY3RJZCwgbWV0aG9kTmFtZSwgYXJncyA9IHt9LCBibG9ja1F1ZXJ5ID0geyBmaW5hbGl0eTogJ29wdGltaXN0aWMnIH0gfSkge1xuICAgICAgICBjb25zdCBtZXRob2RBcmdzID0gSlNPTi5zdHJpbmdpZnkoYXJncyk7XG4gICAgICAgIGNvbnN0IHsgY29udHJhY3RDb2RlLCBjb250cmFjdFN0YXRlLCBibG9ja0hlaWdodCwgYmxvY2tUaW1lc3RhbXAgfSA9IGF3YWl0IHRoaXMubG9hZE9yRmV0Y2goY29udHJhY3RJZCwgYmxvY2tRdWVyeSk7XG4gICAgICAgIGNvbnN0IHJ1bnRpbWUgPSBuZXcgcnVudGltZV8xLlJ1bnRpbWUoeyBjb250cmFjdElkLCBjb250cmFjdENvZGUsIGNvbnRyYWN0U3RhdGUsIGJsb2NrSGVpZ2h0LCBibG9ja1RpbWVzdGFtcCwgbWV0aG9kQXJncyB9KTtcbiAgICAgICAgY29uc3QgeyByZXN1bHQsIGxvZ3MgfSA9IGF3YWl0IHJ1bnRpbWUuZXhlY3V0ZShtZXRob2ROYW1lKTtcbiAgICAgICAgaWYgKGxvZ3MpIHtcbiAgICAgICAgICAgICgwLCB1dGlsc18xLnByaW50VHhPdXRjb21lTG9ncykoeyBjb250cmFjdElkLCBsb2dzIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKEJ1ZmZlci5mcm9tKHJlc3VsdCkudG9TdHJpbmcoKSk7XG4gICAgfVxufVxuZXhwb3J0cy5Mb2NhbFZpZXdFeGVjdXRpb24gPSBMb2NhbFZpZXdFeGVjdXRpb247XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/local-view-execution/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/local-view-execution/runtime.cjs":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/local-view-execution/runtime.cjs ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Runtime = void 0;\nconst sha256_1 = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/.pnpm/@noble+hashes@1.3.3/node_modules/@noble/hashes/sha256.js\");\nconst notImplemented = (name) => () => {\n    throw new Error('method not implemented: ' + name);\n};\nconst prohibitedInView = (name) => () => {\n    throw new Error('method not available for view calls: ' + name);\n};\nclass Runtime {\n    context;\n    wasm;\n    memory;\n    registers;\n    logs;\n    result;\n    constructor({ contractCode, ...context }) {\n        this.context = context;\n        this.wasm = this.prepareWASM(Buffer.from(contractCode, 'base64'));\n        this.memory = new WebAssembly.Memory({ initial: 1024, maximum: 2048 });\n        this.registers = {};\n        this.logs = [];\n        this.result = Buffer.from([]);\n    }\n    readUTF16CStr(ptr) {\n        const arr = [];\n        const mem = new Uint16Array(this.memory.buffer);\n        let key = Number(ptr) / 2;\n        while (mem[key] != 0) {\n            arr.push(mem[key]);\n            key++;\n        }\n        return Buffer.from(Uint16Array.from(arr).buffer).toString('ucs2');\n    }\n    readUTF8CStr(len, ptr) {\n        const arr = [];\n        const mem = new Uint8Array(this.memory.buffer);\n        let key = Number(ptr);\n        for (let i = 0; i < len && mem[key] != 0; i++) {\n            arr.push(mem[key]);\n            key++;\n        }\n        return Buffer.from(arr).toString('utf8');\n    }\n    storageRead(keyLen, keyPtr) {\n        const storageKey = Buffer.from(new Uint8Array(this.memory.buffer, Number(keyPtr), Number(keyLen)));\n        const stateVal = this.context.contractState.filter((obj) => Buffer.compare(obj.key, storageKey) === 0).map((obj) => obj.value);\n        if (stateVal.length === 0)\n            return null;\n        return stateVal.length > 1 ? stateVal : stateVal[0];\n    }\n    prepareWASM(input) {\n        const parts = [];\n        const magic = input.subarray(0, 4);\n        if (magic.toString('utf8') !== '\\0asm') {\n            throw new Error('Invalid magic number');\n        }\n        const version = input.readUInt32LE(4);\n        if (version != 1) {\n            throw new Error('Invalid version: ' + version);\n        }\n        let offset = 8;\n        parts.push(input.subarray(0, offset));\n        function decodeLEB128() {\n            let result = 0;\n            let shift = 0;\n            let byte;\n            do {\n                byte = input[offset++];\n                result |= (byte & 0x7f) << shift;\n                shift += 7;\n            } while (byte & 0x80);\n            return result;\n        }\n        function decodeLimits() {\n            const flags = input[offset++];\n            const hasMax = flags & 0x1;\n            const initial = decodeLEB128();\n            const max = hasMax ? decodeLEB128() : null;\n            return { initial, max };\n        }\n        function decodeString() {\n            const length = decodeLEB128();\n            const result = input.subarray(offset, offset + length);\n            offset += length;\n            return result.toString('utf8');\n        }\n        function encodeLEB128(value) {\n            const result = [];\n            do {\n                let byte = value & 0x7f;\n                value >>= 7;\n                if (value !== 0) {\n                    byte |= 0x80;\n                }\n                result.push(byte);\n            } while (value !== 0);\n            return Buffer.from(result);\n        }\n        function encodeString(value) {\n            const result = Buffer.from(value, 'utf8');\n            return Buffer.concat([encodeLEB128(result.length), result]);\n        }\n        do {\n            const sectionStart = offset;\n            const sectionId = input.readUInt8(offset);\n            offset++;\n            const sectionSize = decodeLEB128();\n            const sectionEnd = offset + sectionSize;\n            if (sectionId == 5) {\n                // Memory section\n                // Make sure it's empty and only imported memory is used\n                parts.push(Buffer.from([5, 1, 0]));\n            }\n            else if (sectionId == 2) {\n                // Import section\n                const sectionParts = [];\n                const numImports = decodeLEB128();\n                for (let i = 0; i < numImports; i++) {\n                    const importStart = offset;\n                    decodeString();\n                    decodeString();\n                    const kind = input.readUInt8(offset);\n                    offset++;\n                    let skipImport = false;\n                    switch (kind) {\n                        case 0:\n                            // Function import\n                            decodeLEB128(); // index\n                            break;\n                        case 1:\n                            // Table import\n                            offset++; // type\n                            decodeLimits();\n                            break;\n                        case 2:\n                            // Memory import\n                            decodeLimits();\n                            // NOTE: existing memory import is removed (so no need to add it to sectionParts)\n                            skipImport = true;\n                            break;\n                        case 3:\n                            // Global import\n                            offset++; // type\n                            offset++; // mutability\n                            break;\n                        default:\n                            throw new Error('Invalid import kind: ' + kind);\n                    }\n                    if (!skipImport) {\n                        sectionParts.push(input.subarray(importStart, offset));\n                    }\n                }\n                const importMemory = Buffer.concat([\n                    encodeString('env'),\n                    encodeString('memory'),\n                    Buffer.from([2]), // Memory import\n                    Buffer.from([0]),\n                    encodeLEB128(1),\n                ]);\n                sectionParts.push(importMemory);\n                const sectionData = Buffer.concat([\n                    encodeLEB128(sectionParts.length),\n                    ...sectionParts,\n                ]);\n                parts.push(Buffer.concat([\n                    Buffer.from([2]), // Import section\n                    encodeLEB128(sectionData.length),\n                    sectionData\n                ]));\n            }\n            else if (sectionId == 7) {\n                // Export section\n                const sectionParts = [];\n                const numExports = decodeLEB128();\n                for (let i = 0; i < numExports; i++) {\n                    const exportStart = offset;\n                    decodeString();\n                    const kind = input.readUInt8(offset);\n                    offset++;\n                    decodeLEB128();\n                    if (kind !== 2) {\n                        // Pass through all exports except memory\n                        sectionParts.push(input.subarray(exportStart, offset));\n                    }\n                }\n                const sectionData = Buffer.concat([\n                    encodeLEB128(sectionParts.length),\n                    ...sectionParts,\n                ]);\n                parts.push(Buffer.concat([\n                    Buffer.from([7]), // Export section\n                    encodeLEB128(sectionData.length),\n                    sectionData\n                ]));\n            }\n            else {\n                parts.push(input.subarray(sectionStart, sectionEnd));\n            }\n            offset = sectionEnd;\n        } while (offset < input.length);\n        return Buffer.concat(parts);\n    }\n    // Host functions\n    getRegisterLength(registerId) {\n        return BigInt(this.registers[registerId.toString()] ? this.registers[registerId.toString()].length : Number.MAX_SAFE_INTEGER);\n    }\n    readFromRegister(registerId, ptr) {\n        const mem = new Uint8Array(this.memory.buffer);\n        mem.set(this.registers[registerId.toString()] || Buffer.from([]), Number(ptr));\n    }\n    getCurrentAccountId(registerId) {\n        this.registers[registerId.toString()] = Buffer.from(this.context.contractId);\n    }\n    inputMethodArgs(registerId) {\n        this.registers[registerId.toString()] = Buffer.from(this.context.methodArgs);\n    }\n    getBlockHeight() {\n        return BigInt(this.context.blockHeight);\n    }\n    getBlockTimestamp() {\n        return BigInt(this.context.blockTimestamp);\n    }\n    sha256(valueLen, valuePtr, registerId) {\n        const value = new Uint8Array(this.memory.buffer, Number(valuePtr), Number(valueLen));\n        this.registers[registerId.toString()] = (0, sha256_1.sha256)(value);\n    }\n    returnValue(valueLen, valuePtr) {\n        this.result = Buffer.from(new Uint8Array(this.memory.buffer, Number(valuePtr), Number(valueLen)));\n    }\n    panic(message) {\n        throw new Error('panic: ' + message);\n    }\n    abort(msg_ptr, filename_ptr, line, col) {\n        const msg = this.readUTF16CStr(msg_ptr);\n        const filename = this.readUTF16CStr(filename_ptr);\n        const message = `${msg} ${filename}:${line}:${col}`;\n        if (!msg || !filename) {\n            throw new Error('abort: ' + 'String encoding is bad UTF-16 sequence.');\n        }\n        throw new Error('abort: ' + message);\n    }\n    appendToLog(len, ptr) {\n        this.logs.push(this.readUTF8CStr(len, ptr));\n    }\n    readStorage(key_len, key_ptr, register_id) {\n        const result = this.storageRead(key_len, key_ptr);\n        if (result == null) {\n            return 0n;\n        }\n        this.registers[register_id] = result;\n        return 1n;\n    }\n    hasStorageKey(key_len, key_ptr) {\n        const result = this.storageRead(key_len, key_ptr);\n        if (result == null) {\n            return 0n;\n        }\n        return 1n;\n    }\n    getHostImports() {\n        return {\n            register_len: this.getRegisterLength.bind(this),\n            read_register: this.readFromRegister.bind(this),\n            current_account_id: this.getCurrentAccountId.bind(this),\n            input: this.inputMethodArgs.bind(this),\n            block_index: this.getBlockHeight.bind(this),\n            block_timestamp: this.getBlockTimestamp.bind(this),\n            sha256: this.sha256.bind(this),\n            value_return: this.returnValue.bind(this),\n            abort: this.abort.bind(this),\n            log_utf8: this.appendToLog.bind(this),\n            log_utf16: this.appendToLog.bind(this),\n            storage_read: this.readStorage.bind(this),\n            storage_has_key: this.hasStorageKey.bind(this),\n            panic: () => this.panic('explicit guest panic'),\n            panic_utf8: (len, ptr) => this.panic(this.readUTF8CStr(len, ptr)),\n            // Not implemented\n            epoch_height: notImplemented('epoch_height'),\n            storage_usage: notImplemented('storage_usage'),\n            account_balance: notImplemented('account_balance'),\n            account_locked_balance: notImplemented('account_locked_balance'),\n            random_seed: notImplemented('random_seed'),\n            ripemd160: notImplemented('ripemd160'),\n            keccak256: notImplemented('keccak256'),\n            keccak512: notImplemented('keccak512'),\n            ecrecover: notImplemented('ecrecover'),\n            validator_stake: notImplemented('validator_stake'),\n            validator_total_stake: notImplemented('validator_total_stake'),\n            // Prohibited\n            write_register: prohibitedInView('write_register'),\n            signer_account_id: prohibitedInView('signer_account_id'),\n            signer_account_pk: prohibitedInView('signer_account_pk'),\n            predecessor_account_id: prohibitedInView('predecessor_account_id'),\n            attached_deposit: prohibitedInView('attached_deposit'),\n            prepaid_gas: prohibitedInView('prepaid_gas'),\n            used_gas: prohibitedInView('used_gas'),\n            promise_create: prohibitedInView('promise_create'),\n            promise_then: prohibitedInView('promise_then'),\n            promise_and: prohibitedInView('promise_and'),\n            promise_batch_create: prohibitedInView('promise_batch_create'),\n            promise_batch_then: prohibitedInView('promise_batch_then'),\n            promise_batch_action_create_account: prohibitedInView('promise_batch_action_create_account'),\n            promise_batch_action_deploy_contract: prohibitedInView('promise_batch_action_deploy_contract'),\n            promise_batch_action_function_call: prohibitedInView('promise_batch_action_function_call'),\n            promise_batch_action_function_call_weight: prohibitedInView('promise_batch_action_function_call_weight'),\n            promise_batch_action_transfer: prohibitedInView('promise_batch_action_transfer'),\n            promise_batch_action_stake: prohibitedInView('promise_batch_action_stake'),\n            promise_batch_action_add_key_with_full_access: prohibitedInView('promise_batch_action_add_key_with_full_access'),\n            promise_batch_action_add_key_with_function_call: prohibitedInView('promise_batch_action_add_key_with_function_call'),\n            promise_batch_action_delete_key: prohibitedInView('promise_batch_action_delete_key'),\n            promise_batch_action_delete_account: prohibitedInView('promise_batch_action_delete_account'),\n            promise_results_count: prohibitedInView('promise_results_count'),\n            promise_result: prohibitedInView('promise_result'),\n            promise_return: prohibitedInView('promise_return'),\n            storage_write: prohibitedInView('storage_write'),\n            storage_remove: prohibitedInView('storage_remove'),\n        };\n    }\n    async execute(methodName) {\n        const module = await WebAssembly.compile(this.wasm);\n        const instance = await WebAssembly.instantiate(module, { env: { ...this.getHostImports(), memory: this.memory } });\n        const callMethod = instance.exports[methodName];\n        if (callMethod == undefined) {\n            throw new Error(`Contract method '${methodName}' does not exists in contract ${this.context.contractId} for block id ${this.context.blockHeight}`);\n        }\n        callMethod();\n        return {\n            result: this.result,\n            logs: this.logs\n        };\n    }\n}\nexports.Runtime = Runtime;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrYWNjb3VudHNAMS4zLjEvbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL2xpYi9jb21tb25qcy9sb2NhbC12aWV3LWV4ZWN1dGlvbi9ydW50aW1lLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlO0FBQ2YsaUJBQWlCLG1CQUFPLENBQUMsaUhBQXNCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDBCQUEwQjtBQUM1QztBQUNBO0FBQ0EsK0NBQStDLDhCQUE4QjtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsMEJBQTBCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGdCQUFnQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsZ0JBQWdCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLEtBQUssRUFBRSxTQUFTLEdBQUcsS0FBSyxHQUFHLElBQUk7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFLE9BQU8saURBQWlEO0FBQ3pIO0FBQ0E7QUFDQSxnREFBZ0QsV0FBVyxnQ0FBZ0MseUJBQXlCLGVBQWUseUJBQXlCO0FBQzVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2F0aG9uLW5lYXItcmVkYWN0ZWQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrYWNjb3VudHNAMS4zLjEvbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL2xpYi9jb21tb25qcy9sb2NhbC12aWV3LWV4ZWN1dGlvbi9ydW50aW1lLmNqcz8xOTRmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SdW50aW1lID0gdm9pZCAwO1xuY29uc3Qgc2hhMjU2XzEgPSByZXF1aXJlKFwiQG5vYmxlL2hhc2hlcy9zaGEyNTZcIik7XG5jb25zdCBub3RJbXBsZW1lbnRlZCA9IChuYW1lKSA9PiAoKSA9PiB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtZXRob2Qgbm90IGltcGxlbWVudGVkOiAnICsgbmFtZSk7XG59O1xuY29uc3QgcHJvaGliaXRlZEluVmlldyA9IChuYW1lKSA9PiAoKSA9PiB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtZXRob2Qgbm90IGF2YWlsYWJsZSBmb3IgdmlldyBjYWxsczogJyArIG5hbWUpO1xufTtcbmNsYXNzIFJ1bnRpbWUge1xuICAgIGNvbnRleHQ7XG4gICAgd2FzbTtcbiAgICBtZW1vcnk7XG4gICAgcmVnaXN0ZXJzO1xuICAgIGxvZ3M7XG4gICAgcmVzdWx0O1xuICAgIGNvbnN0cnVjdG9yKHsgY29udHJhY3RDb2RlLCAuLi5jb250ZXh0IH0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy53YXNtID0gdGhpcy5wcmVwYXJlV0FTTShCdWZmZXIuZnJvbShjb250cmFjdENvZGUsICdiYXNlNjQnKSk7XG4gICAgICAgIHRoaXMubWVtb3J5ID0gbmV3IFdlYkFzc2VtYmx5Lk1lbW9yeSh7IGluaXRpYWw6IDEwMjQsIG1heGltdW06IDIwNDggfSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJzID0ge307XG4gICAgICAgIHRoaXMubG9ncyA9IFtdO1xuICAgICAgICB0aGlzLnJlc3VsdCA9IEJ1ZmZlci5mcm9tKFtdKTtcbiAgICB9XG4gICAgcmVhZFVURjE2Q1N0cihwdHIpIHtcbiAgICAgICAgY29uc3QgYXJyID0gW107XG4gICAgICAgIGNvbnN0IG1lbSA9IG5ldyBVaW50MTZBcnJheSh0aGlzLm1lbW9yeS5idWZmZXIpO1xuICAgICAgICBsZXQga2V5ID0gTnVtYmVyKHB0cikgLyAyO1xuICAgICAgICB3aGlsZSAobWVtW2tleV0gIT0gMCkge1xuICAgICAgICAgICAgYXJyLnB1c2gobWVtW2tleV0pO1xuICAgICAgICAgICAga2V5Kys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKFVpbnQxNkFycmF5LmZyb20oYXJyKS5idWZmZXIpLnRvU3RyaW5nKCd1Y3MyJyk7XG4gICAgfVxuICAgIHJlYWRVVEY4Q1N0cihsZW4sIHB0cikge1xuICAgICAgICBjb25zdCBhcnIgPSBbXTtcbiAgICAgICAgY29uc3QgbWVtID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5tZW1vcnkuYnVmZmVyKTtcbiAgICAgICAgbGV0IGtleSA9IE51bWJlcihwdHIpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbiAmJiBtZW1ba2V5XSAhPSAwOyBpKyspIHtcbiAgICAgICAgICAgIGFyci5wdXNoKG1lbVtrZXldKTtcbiAgICAgICAgICAgIGtleSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShhcnIpLnRvU3RyaW5nKCd1dGY4Jyk7XG4gICAgfVxuICAgIHN0b3JhZ2VSZWFkKGtleUxlbiwga2V5UHRyKSB7XG4gICAgICAgIGNvbnN0IHN0b3JhZ2VLZXkgPSBCdWZmZXIuZnJvbShuZXcgVWludDhBcnJheSh0aGlzLm1lbW9yeS5idWZmZXIsIE51bWJlcihrZXlQdHIpLCBOdW1iZXIoa2V5TGVuKSkpO1xuICAgICAgICBjb25zdCBzdGF0ZVZhbCA9IHRoaXMuY29udGV4dC5jb250cmFjdFN0YXRlLmZpbHRlcigob2JqKSA9PiBCdWZmZXIuY29tcGFyZShvYmoua2V5LCBzdG9yYWdlS2V5KSA9PT0gMCkubWFwKChvYmopID0+IG9iai52YWx1ZSk7XG4gICAgICAgIGlmIChzdGF0ZVZhbC5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIHN0YXRlVmFsLmxlbmd0aCA+IDEgPyBzdGF0ZVZhbCA6IHN0YXRlVmFsWzBdO1xuICAgIH1cbiAgICBwcmVwYXJlV0FTTShpbnB1dCkge1xuICAgICAgICBjb25zdCBwYXJ0cyA9IFtdO1xuICAgICAgICBjb25zdCBtYWdpYyA9IGlucHV0LnN1YmFycmF5KDAsIDQpO1xuICAgICAgICBpZiAobWFnaWMudG9TdHJpbmcoJ3V0ZjgnKSAhPT0gJ1xcMGFzbScpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBtYWdpYyBudW1iZXInKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2ZXJzaW9uID0gaW5wdXQucmVhZFVJbnQzMkxFKDQpO1xuICAgICAgICBpZiAodmVyc2lvbiAhPSAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmVyc2lvbjogJyArIHZlcnNpb24pO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvZmZzZXQgPSA4O1xuICAgICAgICBwYXJ0cy5wdXNoKGlucHV0LnN1YmFycmF5KDAsIG9mZnNldCkpO1xuICAgICAgICBmdW5jdGlvbiBkZWNvZGVMRUIxMjgoKSB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gMDtcbiAgICAgICAgICAgIGxldCBzaGlmdCA9IDA7XG4gICAgICAgICAgICBsZXQgYnl0ZTtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBieXRlID0gaW5wdXRbb2Zmc2V0KytdO1xuICAgICAgICAgICAgICAgIHJlc3VsdCB8PSAoYnl0ZSAmIDB4N2YpIDw8IHNoaWZ0O1xuICAgICAgICAgICAgICAgIHNoaWZ0ICs9IDc7XG4gICAgICAgICAgICB9IHdoaWxlIChieXRlICYgMHg4MCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGRlY29kZUxpbWl0cygpIHtcbiAgICAgICAgICAgIGNvbnN0IGZsYWdzID0gaW5wdXRbb2Zmc2V0KytdO1xuICAgICAgICAgICAgY29uc3QgaGFzTWF4ID0gZmxhZ3MgJiAweDE7XG4gICAgICAgICAgICBjb25zdCBpbml0aWFsID0gZGVjb2RlTEVCMTI4KCk7XG4gICAgICAgICAgICBjb25zdCBtYXggPSBoYXNNYXggPyBkZWNvZGVMRUIxMjgoKSA6IG51bGw7XG4gICAgICAgICAgICByZXR1cm4geyBpbml0aWFsLCBtYXggfTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBkZWNvZGVTdHJpbmcoKSB7XG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBkZWNvZGVMRUIxMjgoKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGlucHV0LnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICsgbGVuZ3RoKTtcbiAgICAgICAgICAgIG9mZnNldCArPSBsZW5ndGg7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LnRvU3RyaW5nKCd1dGY4Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZW5jb2RlTEVCMTI4KHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBsZXQgYnl0ZSA9IHZhbHVlICYgMHg3ZjtcbiAgICAgICAgICAgICAgICB2YWx1ZSA+Pj0gNztcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYnl0ZSB8PSAweDgwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChieXRlKTtcbiAgICAgICAgICAgIH0gd2hpbGUgKHZhbHVlICE9PSAwKTtcbiAgICAgICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGVuY29kZVN0cmluZyh2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gQnVmZmVyLmZyb20odmFsdWUsICd1dGY4Jyk7XG4gICAgICAgICAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChbZW5jb2RlTEVCMTI4KHJlc3VsdC5sZW5ndGgpLCByZXN1bHRdKTtcbiAgICAgICAgfVxuICAgICAgICBkbyB7XG4gICAgICAgICAgICBjb25zdCBzZWN0aW9uU3RhcnQgPSBvZmZzZXQ7XG4gICAgICAgICAgICBjb25zdCBzZWN0aW9uSWQgPSBpbnB1dC5yZWFkVUludDgob2Zmc2V0KTtcbiAgICAgICAgICAgIG9mZnNldCsrO1xuICAgICAgICAgICAgY29uc3Qgc2VjdGlvblNpemUgPSBkZWNvZGVMRUIxMjgoKTtcbiAgICAgICAgICAgIGNvbnN0IHNlY3Rpb25FbmQgPSBvZmZzZXQgKyBzZWN0aW9uU2l6ZTtcbiAgICAgICAgICAgIGlmIChzZWN0aW9uSWQgPT0gNSkge1xuICAgICAgICAgICAgICAgIC8vIE1lbW9yeSBzZWN0aW9uXG4gICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIGl0J3MgZW1wdHkgYW5kIG9ubHkgaW1wb3J0ZWQgbWVtb3J5IGlzIHVzZWRcbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKEJ1ZmZlci5mcm9tKFs1LCAxLCAwXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2VjdGlvbklkID09IDIpIHtcbiAgICAgICAgICAgICAgICAvLyBJbXBvcnQgc2VjdGlvblxuICAgICAgICAgICAgICAgIGNvbnN0IHNlY3Rpb25QYXJ0cyA9IFtdO1xuICAgICAgICAgICAgICAgIGNvbnN0IG51bUltcG9ydHMgPSBkZWNvZGVMRUIxMjgoKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUltcG9ydHM7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbXBvcnRTdGFydCA9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgZGVjb2RlU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGRlY29kZVN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBraW5kID0gaW5wdXQucmVhZFVJbnQ4KG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCsrO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2tpcEltcG9ydCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGdW5jdGlvbiBpbXBvcnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNvZGVMRUIxMjgoKTsgLy8gaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUYWJsZSBpbXBvcnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQrKzsgLy8gdHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY29kZUxpbWl0cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1lbW9yeSBpbXBvcnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNvZGVMaW1pdHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOT1RFOiBleGlzdGluZyBtZW1vcnkgaW1wb3J0IGlzIHJlbW92ZWQgKHNvIG5vIG5lZWQgdG8gYWRkIGl0IHRvIHNlY3Rpb25QYXJ0cylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwSW1wb3J0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHbG9iYWwgaW1wb3J0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0Kys7IC8vIHR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQrKzsgLy8gbXV0YWJpbGl0eVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW1wb3J0IGtpbmQ6ICcgKyBraW5kKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNraXBJbXBvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb25QYXJ0cy5wdXNoKGlucHV0LnN1YmFycmF5KGltcG9ydFN0YXJ0LCBvZmZzZXQpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBpbXBvcnRNZW1vcnkgPSBCdWZmZXIuY29uY2F0KFtcbiAgICAgICAgICAgICAgICAgICAgZW5jb2RlU3RyaW5nKCdlbnYnKSxcbiAgICAgICAgICAgICAgICAgICAgZW5jb2RlU3RyaW5nKCdtZW1vcnknKSxcbiAgICAgICAgICAgICAgICAgICAgQnVmZmVyLmZyb20oWzJdKSwgLy8gTWVtb3J5IGltcG9ydFxuICAgICAgICAgICAgICAgICAgICBCdWZmZXIuZnJvbShbMF0pLFxuICAgICAgICAgICAgICAgICAgICBlbmNvZGVMRUIxMjgoMSksXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgc2VjdGlvblBhcnRzLnB1c2goaW1wb3J0TWVtb3J5KTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWN0aW9uRGF0YSA9IEJ1ZmZlci5jb25jYXQoW1xuICAgICAgICAgICAgICAgICAgICBlbmNvZGVMRUIxMjgoc2VjdGlvblBhcnRzLmxlbmd0aCksXG4gICAgICAgICAgICAgICAgICAgIC4uLnNlY3Rpb25QYXJ0cyxcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKEJ1ZmZlci5jb25jYXQoW1xuICAgICAgICAgICAgICAgICAgICBCdWZmZXIuZnJvbShbMl0pLCAvLyBJbXBvcnQgc2VjdGlvblxuICAgICAgICAgICAgICAgICAgICBlbmNvZGVMRUIxMjgoc2VjdGlvbkRhdGEubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbkRhdGFcbiAgICAgICAgICAgICAgICBdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzZWN0aW9uSWQgPT0gNykge1xuICAgICAgICAgICAgICAgIC8vIEV4cG9ydCBzZWN0aW9uXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdGlvblBhcnRzID0gW107XG4gICAgICAgICAgICAgICAgY29uc3QgbnVtRXhwb3J0cyA9IGRlY29kZUxFQjEyOCgpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtRXhwb3J0czsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4cG9ydFN0YXJ0ID0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICBkZWNvZGVTdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2luZCA9IGlucHV0LnJlYWRVSW50OChvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQrKztcbiAgICAgICAgICAgICAgICAgICAgZGVjb2RlTEVCMTI4KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChraW5kICE9PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQYXNzIHRocm91Z2ggYWxsIGV4cG9ydHMgZXhjZXB0IG1lbW9yeVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvblBhcnRzLnB1c2goaW5wdXQuc3ViYXJyYXkoZXhwb3J0U3RhcnQsIG9mZnNldCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHNlY3Rpb25EYXRhID0gQnVmZmVyLmNvbmNhdChbXG4gICAgICAgICAgICAgICAgICAgIGVuY29kZUxFQjEyOChzZWN0aW9uUGFydHMubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgLi4uc2VjdGlvblBhcnRzLFxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goQnVmZmVyLmNvbmNhdChbXG4gICAgICAgICAgICAgICAgICAgIEJ1ZmZlci5mcm9tKFs3XSksIC8vIEV4cG9ydCBzZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIGVuY29kZUxFQjEyOChzZWN0aW9uRGF0YS5sZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uRGF0YVxuICAgICAgICAgICAgICAgIF0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goaW5wdXQuc3ViYXJyYXkoc2VjdGlvblN0YXJ0LCBzZWN0aW9uRW5kKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvZmZzZXQgPSBzZWN0aW9uRW5kO1xuICAgICAgICB9IHdoaWxlIChvZmZzZXQgPCBpbnB1dC5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChwYXJ0cyk7XG4gICAgfVxuICAgIC8vIEhvc3QgZnVuY3Rpb25zXG4gICAgZ2V0UmVnaXN0ZXJMZW5ndGgocmVnaXN0ZXJJZCkge1xuICAgICAgICByZXR1cm4gQmlnSW50KHRoaXMucmVnaXN0ZXJzW3JlZ2lzdGVySWQudG9TdHJpbmcoKV0gPyB0aGlzLnJlZ2lzdGVyc1tyZWdpc3RlcklkLnRvU3RyaW5nKCldLmxlbmd0aCA6IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKTtcbiAgICB9XG4gICAgcmVhZEZyb21SZWdpc3RlcihyZWdpc3RlcklkLCBwdHIpIHtcbiAgICAgICAgY29uc3QgbWVtID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5tZW1vcnkuYnVmZmVyKTtcbiAgICAgICAgbWVtLnNldCh0aGlzLnJlZ2lzdGVyc1tyZWdpc3RlcklkLnRvU3RyaW5nKCldIHx8IEJ1ZmZlci5mcm9tKFtdKSwgTnVtYmVyKHB0cikpO1xuICAgIH1cbiAgICBnZXRDdXJyZW50QWNjb3VudElkKHJlZ2lzdGVySWQpIHtcbiAgICAgICAgdGhpcy5yZWdpc3RlcnNbcmVnaXN0ZXJJZC50b1N0cmluZygpXSA9IEJ1ZmZlci5mcm9tKHRoaXMuY29udGV4dC5jb250cmFjdElkKTtcbiAgICB9XG4gICAgaW5wdXRNZXRob2RBcmdzKHJlZ2lzdGVySWQpIHtcbiAgICAgICAgdGhpcy5yZWdpc3RlcnNbcmVnaXN0ZXJJZC50b1N0cmluZygpXSA9IEJ1ZmZlci5mcm9tKHRoaXMuY29udGV4dC5tZXRob2RBcmdzKTtcbiAgICB9XG4gICAgZ2V0QmxvY2tIZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiBCaWdJbnQodGhpcy5jb250ZXh0LmJsb2NrSGVpZ2h0KTtcbiAgICB9XG4gICAgZ2V0QmxvY2tUaW1lc3RhbXAoKSB7XG4gICAgICAgIHJldHVybiBCaWdJbnQodGhpcy5jb250ZXh0LmJsb2NrVGltZXN0YW1wKTtcbiAgICB9XG4gICAgc2hhMjU2KHZhbHVlTGVuLCB2YWx1ZVB0ciwgcmVnaXN0ZXJJZCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IG5ldyBVaW50OEFycmF5KHRoaXMubWVtb3J5LmJ1ZmZlciwgTnVtYmVyKHZhbHVlUHRyKSwgTnVtYmVyKHZhbHVlTGVuKSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJzW3JlZ2lzdGVySWQudG9TdHJpbmcoKV0gPSAoMCwgc2hhMjU2XzEuc2hhMjU2KSh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVyblZhbHVlKHZhbHVlTGVuLCB2YWx1ZVB0cikge1xuICAgICAgICB0aGlzLnJlc3VsdCA9IEJ1ZmZlci5mcm9tKG5ldyBVaW50OEFycmF5KHRoaXMubWVtb3J5LmJ1ZmZlciwgTnVtYmVyKHZhbHVlUHRyKSwgTnVtYmVyKHZhbHVlTGVuKSkpO1xuICAgIH1cbiAgICBwYW5pYyhtZXNzYWdlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncGFuaWM6ICcgKyBtZXNzYWdlKTtcbiAgICB9XG4gICAgYWJvcnQobXNnX3B0ciwgZmlsZW5hbWVfcHRyLCBsaW5lLCBjb2wpIHtcbiAgICAgICAgY29uc3QgbXNnID0gdGhpcy5yZWFkVVRGMTZDU3RyKG1zZ19wdHIpO1xuICAgICAgICBjb25zdCBmaWxlbmFtZSA9IHRoaXMucmVhZFVURjE2Q1N0cihmaWxlbmFtZV9wdHIpO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7bXNnfSAke2ZpbGVuYW1lfToke2xpbmV9OiR7Y29sfWA7XG4gICAgICAgIGlmICghbXNnIHx8ICFmaWxlbmFtZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhYm9ydDogJyArICdTdHJpbmcgZW5jb2RpbmcgaXMgYmFkIFVURi0xNiBzZXF1ZW5jZS4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Fib3J0OiAnICsgbWVzc2FnZSk7XG4gICAgfVxuICAgIGFwcGVuZFRvTG9nKGxlbiwgcHRyKSB7XG4gICAgICAgIHRoaXMubG9ncy5wdXNoKHRoaXMucmVhZFVURjhDU3RyKGxlbiwgcHRyKSk7XG4gICAgfVxuICAgIHJlYWRTdG9yYWdlKGtleV9sZW4sIGtleV9wdHIsIHJlZ2lzdGVyX2lkKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuc3RvcmFnZVJlYWQoa2V5X2xlbiwga2V5X3B0cik7XG4gICAgICAgIGlmIChyZXN1bHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIDBuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVnaXN0ZXJzW3JlZ2lzdGVyX2lkXSA9IHJlc3VsdDtcbiAgICAgICAgcmV0dXJuIDFuO1xuICAgIH1cbiAgICBoYXNTdG9yYWdlS2V5KGtleV9sZW4sIGtleV9wdHIpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5zdG9yYWdlUmVhZChrZXlfbGVuLCBrZXlfcHRyKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gMG47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDFuO1xuICAgIH1cbiAgICBnZXRIb3N0SW1wb3J0cygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlZ2lzdGVyX2xlbjogdGhpcy5nZXRSZWdpc3Rlckxlbmd0aC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgcmVhZF9yZWdpc3RlcjogdGhpcy5yZWFkRnJvbVJlZ2lzdGVyLmJpbmQodGhpcyksXG4gICAgICAgICAgICBjdXJyZW50X2FjY291bnRfaWQ6IHRoaXMuZ2V0Q3VycmVudEFjY291bnRJZC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgaW5wdXQ6IHRoaXMuaW5wdXRNZXRob2RBcmdzLmJpbmQodGhpcyksXG4gICAgICAgICAgICBibG9ja19pbmRleDogdGhpcy5nZXRCbG9ja0hlaWdodC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgYmxvY2tfdGltZXN0YW1wOiB0aGlzLmdldEJsb2NrVGltZXN0YW1wLmJpbmQodGhpcyksXG4gICAgICAgICAgICBzaGEyNTY6IHRoaXMuc2hhMjU2LmJpbmQodGhpcyksXG4gICAgICAgICAgICB2YWx1ZV9yZXR1cm46IHRoaXMucmV0dXJuVmFsdWUuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIGFib3J0OiB0aGlzLmFib3J0LmJpbmQodGhpcyksXG4gICAgICAgICAgICBsb2dfdXRmODogdGhpcy5hcHBlbmRUb0xvZy5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgbG9nX3V0ZjE2OiB0aGlzLmFwcGVuZFRvTG9nLmJpbmQodGhpcyksXG4gICAgICAgICAgICBzdG9yYWdlX3JlYWQ6IHRoaXMucmVhZFN0b3JhZ2UuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHN0b3JhZ2VfaGFzX2tleTogdGhpcy5oYXNTdG9yYWdlS2V5LmJpbmQodGhpcyksXG4gICAgICAgICAgICBwYW5pYzogKCkgPT4gdGhpcy5wYW5pYygnZXhwbGljaXQgZ3Vlc3QgcGFuaWMnKSxcbiAgICAgICAgICAgIHBhbmljX3V0Zjg6IChsZW4sIHB0cikgPT4gdGhpcy5wYW5pYyh0aGlzLnJlYWRVVEY4Q1N0cihsZW4sIHB0cikpLFxuICAgICAgICAgICAgLy8gTm90IGltcGxlbWVudGVkXG4gICAgICAgICAgICBlcG9jaF9oZWlnaHQ6IG5vdEltcGxlbWVudGVkKCdlcG9jaF9oZWlnaHQnKSxcbiAgICAgICAgICAgIHN0b3JhZ2VfdXNhZ2U6IG5vdEltcGxlbWVudGVkKCdzdG9yYWdlX3VzYWdlJyksXG4gICAgICAgICAgICBhY2NvdW50X2JhbGFuY2U6IG5vdEltcGxlbWVudGVkKCdhY2NvdW50X2JhbGFuY2UnKSxcbiAgICAgICAgICAgIGFjY291bnRfbG9ja2VkX2JhbGFuY2U6IG5vdEltcGxlbWVudGVkKCdhY2NvdW50X2xvY2tlZF9iYWxhbmNlJyksXG4gICAgICAgICAgICByYW5kb21fc2VlZDogbm90SW1wbGVtZW50ZWQoJ3JhbmRvbV9zZWVkJyksXG4gICAgICAgICAgICByaXBlbWQxNjA6IG5vdEltcGxlbWVudGVkKCdyaXBlbWQxNjAnKSxcbiAgICAgICAgICAgIGtlY2NhazI1Njogbm90SW1wbGVtZW50ZWQoJ2tlY2NhazI1NicpLFxuICAgICAgICAgICAga2VjY2FrNTEyOiBub3RJbXBsZW1lbnRlZCgna2VjY2FrNTEyJyksXG4gICAgICAgICAgICBlY3JlY292ZXI6IG5vdEltcGxlbWVudGVkKCdlY3JlY292ZXInKSxcbiAgICAgICAgICAgIHZhbGlkYXRvcl9zdGFrZTogbm90SW1wbGVtZW50ZWQoJ3ZhbGlkYXRvcl9zdGFrZScpLFxuICAgICAgICAgICAgdmFsaWRhdG9yX3RvdGFsX3N0YWtlOiBub3RJbXBsZW1lbnRlZCgndmFsaWRhdG9yX3RvdGFsX3N0YWtlJyksXG4gICAgICAgICAgICAvLyBQcm9oaWJpdGVkXG4gICAgICAgICAgICB3cml0ZV9yZWdpc3RlcjogcHJvaGliaXRlZEluVmlldygnd3JpdGVfcmVnaXN0ZXInKSxcbiAgICAgICAgICAgIHNpZ25lcl9hY2NvdW50X2lkOiBwcm9oaWJpdGVkSW5WaWV3KCdzaWduZXJfYWNjb3VudF9pZCcpLFxuICAgICAgICAgICAgc2lnbmVyX2FjY291bnRfcGs6IHByb2hpYml0ZWRJblZpZXcoJ3NpZ25lcl9hY2NvdW50X3BrJyksXG4gICAgICAgICAgICBwcmVkZWNlc3Nvcl9hY2NvdW50X2lkOiBwcm9oaWJpdGVkSW5WaWV3KCdwcmVkZWNlc3Nvcl9hY2NvdW50X2lkJyksXG4gICAgICAgICAgICBhdHRhY2hlZF9kZXBvc2l0OiBwcm9oaWJpdGVkSW5WaWV3KCdhdHRhY2hlZF9kZXBvc2l0JyksXG4gICAgICAgICAgICBwcmVwYWlkX2dhczogcHJvaGliaXRlZEluVmlldygncHJlcGFpZF9nYXMnKSxcbiAgICAgICAgICAgIHVzZWRfZ2FzOiBwcm9oaWJpdGVkSW5WaWV3KCd1c2VkX2dhcycpLFxuICAgICAgICAgICAgcHJvbWlzZV9jcmVhdGU6IHByb2hpYml0ZWRJblZpZXcoJ3Byb21pc2VfY3JlYXRlJyksXG4gICAgICAgICAgICBwcm9taXNlX3RoZW46IHByb2hpYml0ZWRJblZpZXcoJ3Byb21pc2VfdGhlbicpLFxuICAgICAgICAgICAgcHJvbWlzZV9hbmQ6IHByb2hpYml0ZWRJblZpZXcoJ3Byb21pc2VfYW5kJyksXG4gICAgICAgICAgICBwcm9taXNlX2JhdGNoX2NyZWF0ZTogcHJvaGliaXRlZEluVmlldygncHJvbWlzZV9iYXRjaF9jcmVhdGUnKSxcbiAgICAgICAgICAgIHByb21pc2VfYmF0Y2hfdGhlbjogcHJvaGliaXRlZEluVmlldygncHJvbWlzZV9iYXRjaF90aGVuJyksXG4gICAgICAgICAgICBwcm9taXNlX2JhdGNoX2FjdGlvbl9jcmVhdGVfYWNjb3VudDogcHJvaGliaXRlZEluVmlldygncHJvbWlzZV9iYXRjaF9hY3Rpb25fY3JlYXRlX2FjY291bnQnKSxcbiAgICAgICAgICAgIHByb21pc2VfYmF0Y2hfYWN0aW9uX2RlcGxveV9jb250cmFjdDogcHJvaGliaXRlZEluVmlldygncHJvbWlzZV9iYXRjaF9hY3Rpb25fZGVwbG95X2NvbnRyYWN0JyksXG4gICAgICAgICAgICBwcm9taXNlX2JhdGNoX2FjdGlvbl9mdW5jdGlvbl9jYWxsOiBwcm9oaWJpdGVkSW5WaWV3KCdwcm9taXNlX2JhdGNoX2FjdGlvbl9mdW5jdGlvbl9jYWxsJyksXG4gICAgICAgICAgICBwcm9taXNlX2JhdGNoX2FjdGlvbl9mdW5jdGlvbl9jYWxsX3dlaWdodDogcHJvaGliaXRlZEluVmlldygncHJvbWlzZV9iYXRjaF9hY3Rpb25fZnVuY3Rpb25fY2FsbF93ZWlnaHQnKSxcbiAgICAgICAgICAgIHByb21pc2VfYmF0Y2hfYWN0aW9uX3RyYW5zZmVyOiBwcm9oaWJpdGVkSW5WaWV3KCdwcm9taXNlX2JhdGNoX2FjdGlvbl90cmFuc2ZlcicpLFxuICAgICAgICAgICAgcHJvbWlzZV9iYXRjaF9hY3Rpb25fc3Rha2U6IHByb2hpYml0ZWRJblZpZXcoJ3Byb21pc2VfYmF0Y2hfYWN0aW9uX3N0YWtlJyksXG4gICAgICAgICAgICBwcm9taXNlX2JhdGNoX2FjdGlvbl9hZGRfa2V5X3dpdGhfZnVsbF9hY2Nlc3M6IHByb2hpYml0ZWRJblZpZXcoJ3Byb21pc2VfYmF0Y2hfYWN0aW9uX2FkZF9rZXlfd2l0aF9mdWxsX2FjY2VzcycpLFxuICAgICAgICAgICAgcHJvbWlzZV9iYXRjaF9hY3Rpb25fYWRkX2tleV93aXRoX2Z1bmN0aW9uX2NhbGw6IHByb2hpYml0ZWRJblZpZXcoJ3Byb21pc2VfYmF0Y2hfYWN0aW9uX2FkZF9rZXlfd2l0aF9mdW5jdGlvbl9jYWxsJyksXG4gICAgICAgICAgICBwcm9taXNlX2JhdGNoX2FjdGlvbl9kZWxldGVfa2V5OiBwcm9oaWJpdGVkSW5WaWV3KCdwcm9taXNlX2JhdGNoX2FjdGlvbl9kZWxldGVfa2V5JyksXG4gICAgICAgICAgICBwcm9taXNlX2JhdGNoX2FjdGlvbl9kZWxldGVfYWNjb3VudDogcHJvaGliaXRlZEluVmlldygncHJvbWlzZV9iYXRjaF9hY3Rpb25fZGVsZXRlX2FjY291bnQnKSxcbiAgICAgICAgICAgIHByb21pc2VfcmVzdWx0c19jb3VudDogcHJvaGliaXRlZEluVmlldygncHJvbWlzZV9yZXN1bHRzX2NvdW50JyksXG4gICAgICAgICAgICBwcm9taXNlX3Jlc3VsdDogcHJvaGliaXRlZEluVmlldygncHJvbWlzZV9yZXN1bHQnKSxcbiAgICAgICAgICAgIHByb21pc2VfcmV0dXJuOiBwcm9oaWJpdGVkSW5WaWV3KCdwcm9taXNlX3JldHVybicpLFxuICAgICAgICAgICAgc3RvcmFnZV93cml0ZTogcHJvaGliaXRlZEluVmlldygnc3RvcmFnZV93cml0ZScpLFxuICAgICAgICAgICAgc3RvcmFnZV9yZW1vdmU6IHByb2hpYml0ZWRJblZpZXcoJ3N0b3JhZ2VfcmVtb3ZlJyksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUobWV0aG9kTmFtZSkge1xuICAgICAgICBjb25zdCBtb2R1bGUgPSBhd2FpdCBXZWJBc3NlbWJseS5jb21waWxlKHRoaXMud2FzbSk7XG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gYXdhaXQgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUobW9kdWxlLCB7IGVudjogeyAuLi50aGlzLmdldEhvc3RJbXBvcnRzKCksIG1lbW9yeTogdGhpcy5tZW1vcnkgfSB9KTtcbiAgICAgICAgY29uc3QgY2FsbE1ldGhvZCA9IGluc3RhbmNlLmV4cG9ydHNbbWV0aG9kTmFtZV07XG4gICAgICAgIGlmIChjYWxsTWV0aG9kID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb250cmFjdCBtZXRob2QgJyR7bWV0aG9kTmFtZX0nIGRvZXMgbm90IGV4aXN0cyBpbiBjb250cmFjdCAke3RoaXMuY29udGV4dC5jb250cmFjdElkfSBmb3IgYmxvY2sgaWQgJHt0aGlzLmNvbnRleHQuYmxvY2tIZWlnaHR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY2FsbE1ldGhvZCgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdWx0OiB0aGlzLnJlc3VsdCxcbiAgICAgICAgICAgIGxvZ3M6IHRoaXMubG9nc1xuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuUnVudGltZSA9IFJ1bnRpbWU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/local-view-execution/runtime.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/local-view-execution/storage.cjs":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/local-view-execution/storage.cjs ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Storage = void 0;\nconst lru_map_1 = __webpack_require__(/*! lru_map */ \"(ssr)/./node_modules/.pnpm/lru_map@0.4.1/node_modules/lru_map/dist/lru.js\");\nclass Storage {\n    cache;\n    static MAX_ELEMENTS = 100;\n    // map block hash to block height\n    blockHeights;\n    constructor(options = { max: Storage.MAX_ELEMENTS }) {\n        this.cache = new lru_map_1.LRUMap(options.max);\n        this.blockHeights = new Map();\n    }\n    load(blockRef) {\n        const noBlockId = !('blockId' in blockRef);\n        if (noBlockId)\n            return undefined;\n        let blockId = blockRef.blockId;\n        // block hash is passed, so get its corresponding block height\n        if (blockId.toString().length == 44) {\n            blockId = this.blockHeights.get(blockId.toString());\n        }\n        // get cached values for the given block height\n        return this.cache.get(blockId);\n    }\n    save(blockHash, { blockHeight, blockTimestamp, contractCode, contractState }) {\n        this.blockHeights.set(blockHash, blockHeight);\n        this.cache.set(blockHeight, { blockHeight, blockTimestamp, contractCode, contractState });\n    }\n}\nexports.Storage = Storage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrYWNjb3VudHNAMS4zLjEvbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL2xpYi9jb21tb25qcy9sb2NhbC12aWV3LWV4ZWN1dGlvbi9zdG9yYWdlLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlO0FBQ2Ysa0JBQWtCLG1CQUFPLENBQUMsMEZBQVM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiwyQkFBMkI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDBEQUEwRDtBQUNoRjtBQUNBLHNDQUFzQywwREFBMEQ7QUFDaEc7QUFDQTtBQUNBLGVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrYXRob24tbmVhci1yZWRhY3RlZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbmVhci1qcythY2NvdW50c0AxLjMuMS9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbGliL2NvbW1vbmpzL2xvY2FsLXZpZXctZXhlY3V0aW9uL3N0b3JhZ2UuY2pzP2VkNGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN0b3JhZ2UgPSB2b2lkIDA7XG5jb25zdCBscnVfbWFwXzEgPSByZXF1aXJlKFwibHJ1X21hcFwiKTtcbmNsYXNzIFN0b3JhZ2Uge1xuICAgIGNhY2hlO1xuICAgIHN0YXRpYyBNQVhfRUxFTUVOVFMgPSAxMDA7XG4gICAgLy8gbWFwIGJsb2NrIGhhc2ggdG8gYmxvY2sgaGVpZ2h0XG4gICAgYmxvY2tIZWlnaHRzO1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7IG1heDogU3RvcmFnZS5NQVhfRUxFTUVOVFMgfSkge1xuICAgICAgICB0aGlzLmNhY2hlID0gbmV3IGxydV9tYXBfMS5MUlVNYXAob3B0aW9ucy5tYXgpO1xuICAgICAgICB0aGlzLmJsb2NrSGVpZ2h0cyA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgbG9hZChibG9ja1JlZikge1xuICAgICAgICBjb25zdCBub0Jsb2NrSWQgPSAhKCdibG9ja0lkJyBpbiBibG9ja1JlZik7XG4gICAgICAgIGlmIChub0Jsb2NrSWQpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgYmxvY2tJZCA9IGJsb2NrUmVmLmJsb2NrSWQ7XG4gICAgICAgIC8vIGJsb2NrIGhhc2ggaXMgcGFzc2VkLCBzbyBnZXQgaXRzIGNvcnJlc3BvbmRpbmcgYmxvY2sgaGVpZ2h0XG4gICAgICAgIGlmIChibG9ja0lkLnRvU3RyaW5nKCkubGVuZ3RoID09IDQ0KSB7XG4gICAgICAgICAgICBibG9ja0lkID0gdGhpcy5ibG9ja0hlaWdodHMuZ2V0KGJsb2NrSWQudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZ2V0IGNhY2hlZCB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBibG9jayBoZWlnaHRcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGUuZ2V0KGJsb2NrSWQpO1xuICAgIH1cbiAgICBzYXZlKGJsb2NrSGFzaCwgeyBibG9ja0hlaWdodCwgYmxvY2tUaW1lc3RhbXAsIGNvbnRyYWN0Q29kZSwgY29udHJhY3RTdGF0ZSB9KSB7XG4gICAgICAgIHRoaXMuYmxvY2tIZWlnaHRzLnNldChibG9ja0hhc2gsIGJsb2NrSGVpZ2h0KTtcbiAgICAgICAgdGhpcy5jYWNoZS5zZXQoYmxvY2tIZWlnaHQsIHsgYmxvY2tIZWlnaHQsIGJsb2NrVGltZXN0YW1wLCBjb250cmFjdENvZGUsIGNvbnRyYWN0U3RhdGUgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5TdG9yYWdlID0gU3RvcmFnZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/local-view-execution/storage.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/types.cjs":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/types.cjs ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MultisigStateStatus = exports.MultisigDeleteRequestRejectionError = void 0;\nvar MultisigDeleteRequestRejectionError;\n(function (MultisigDeleteRequestRejectionError) {\n    MultisigDeleteRequestRejectionError[\"CANNOT_DESERIALIZE_STATE\"] = \"Cannot deserialize the contract state\";\n    MultisigDeleteRequestRejectionError[\"MULTISIG_NOT_INITIALIZED\"] = \"Smart contract panicked: Multisig contract should be initialized before usage\";\n    MultisigDeleteRequestRejectionError[\"NO_SUCH_REQUEST\"] = \"Smart contract panicked: panicked at 'No such request: either wrong number or already confirmed'\";\n    MultisigDeleteRequestRejectionError[\"REQUEST_COOLDOWN_ERROR\"] = \"Request cannot be deleted immediately after creation.\";\n    MultisigDeleteRequestRejectionError[\"METHOD_NOT_FOUND\"] = \"Contract method is not found\";\n})(MultisigDeleteRequestRejectionError || (exports.MultisigDeleteRequestRejectionError = MultisigDeleteRequestRejectionError = {}));\nvar MultisigStateStatus;\n(function (MultisigStateStatus) {\n    MultisigStateStatus[MultisigStateStatus[\"INVALID_STATE\"] = 0] = \"INVALID_STATE\";\n    MultisigStateStatus[MultisigStateStatus[\"STATE_NOT_INITIALIZED\"] = 1] = \"STATE_NOT_INITIALIZED\";\n    MultisigStateStatus[MultisigStateStatus[\"VALID_STATE\"] = 2] = \"VALID_STATE\";\n    MultisigStateStatus[MultisigStateStatus[\"UNKNOWN_STATE\"] = 3] = \"UNKNOWN_STATE\";\n})(MultisigStateStatus || (exports.MultisigStateStatus = MultisigStateStatus = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrYWNjb3VudHNAMS4zLjEvbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL2xpYi9jb21tb25qcy90eXBlcy5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCLEdBQUcsMkNBQTJDO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywwQ0FBMEMsMkNBQTJDLDJDQUEyQztBQUNqSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDBCQUEwQiwyQkFBMkIsMkJBQTJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2F0aG9uLW5lYXItcmVkYWN0ZWQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrYWNjb3VudHNAMS4zLjEvbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL2xpYi9jb21tb25qcy90eXBlcy5janM/NmQzZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTXVsdGlzaWdTdGF0ZVN0YXR1cyA9IGV4cG9ydHMuTXVsdGlzaWdEZWxldGVSZXF1ZXN0UmVqZWN0aW9uRXJyb3IgPSB2b2lkIDA7XG52YXIgTXVsdGlzaWdEZWxldGVSZXF1ZXN0UmVqZWN0aW9uRXJyb3I7XG4oZnVuY3Rpb24gKE11bHRpc2lnRGVsZXRlUmVxdWVzdFJlamVjdGlvbkVycm9yKSB7XG4gICAgTXVsdGlzaWdEZWxldGVSZXF1ZXN0UmVqZWN0aW9uRXJyb3JbXCJDQU5OT1RfREVTRVJJQUxJWkVfU1RBVEVcIl0gPSBcIkNhbm5vdCBkZXNlcmlhbGl6ZSB0aGUgY29udHJhY3Qgc3RhdGVcIjtcbiAgICBNdWx0aXNpZ0RlbGV0ZVJlcXVlc3RSZWplY3Rpb25FcnJvcltcIk1VTFRJU0lHX05PVF9JTklUSUFMSVpFRFwiXSA9IFwiU21hcnQgY29udHJhY3QgcGFuaWNrZWQ6IE11bHRpc2lnIGNvbnRyYWN0IHNob3VsZCBiZSBpbml0aWFsaXplZCBiZWZvcmUgdXNhZ2VcIjtcbiAgICBNdWx0aXNpZ0RlbGV0ZVJlcXVlc3RSZWplY3Rpb25FcnJvcltcIk5PX1NVQ0hfUkVRVUVTVFwiXSA9IFwiU21hcnQgY29udHJhY3QgcGFuaWNrZWQ6IHBhbmlja2VkIGF0ICdObyBzdWNoIHJlcXVlc3Q6IGVpdGhlciB3cm9uZyBudW1iZXIgb3IgYWxyZWFkeSBjb25maXJtZWQnXCI7XG4gICAgTXVsdGlzaWdEZWxldGVSZXF1ZXN0UmVqZWN0aW9uRXJyb3JbXCJSRVFVRVNUX0NPT0xET1dOX0VSUk9SXCJdID0gXCJSZXF1ZXN0IGNhbm5vdCBiZSBkZWxldGVkIGltbWVkaWF0ZWx5IGFmdGVyIGNyZWF0aW9uLlwiO1xuICAgIE11bHRpc2lnRGVsZXRlUmVxdWVzdFJlamVjdGlvbkVycm9yW1wiTUVUSE9EX05PVF9GT1VORFwiXSA9IFwiQ29udHJhY3QgbWV0aG9kIGlzIG5vdCBmb3VuZFwiO1xufSkoTXVsdGlzaWdEZWxldGVSZXF1ZXN0UmVqZWN0aW9uRXJyb3IgfHwgKGV4cG9ydHMuTXVsdGlzaWdEZWxldGVSZXF1ZXN0UmVqZWN0aW9uRXJyb3IgPSBNdWx0aXNpZ0RlbGV0ZVJlcXVlc3RSZWplY3Rpb25FcnJvciA9IHt9KSk7XG52YXIgTXVsdGlzaWdTdGF0ZVN0YXR1cztcbihmdW5jdGlvbiAoTXVsdGlzaWdTdGF0ZVN0YXR1cykge1xuICAgIE11bHRpc2lnU3RhdGVTdGF0dXNbTXVsdGlzaWdTdGF0ZVN0YXR1c1tcIklOVkFMSURfU1RBVEVcIl0gPSAwXSA9IFwiSU5WQUxJRF9TVEFURVwiO1xuICAgIE11bHRpc2lnU3RhdGVTdGF0dXNbTXVsdGlzaWdTdGF0ZVN0YXR1c1tcIlNUQVRFX05PVF9JTklUSUFMSVpFRFwiXSA9IDFdID0gXCJTVEFURV9OT1RfSU5JVElBTElaRURcIjtcbiAgICBNdWx0aXNpZ1N0YXRlU3RhdHVzW011bHRpc2lnU3RhdGVTdGF0dXNbXCJWQUxJRF9TVEFURVwiXSA9IDJdID0gXCJWQUxJRF9TVEFURVwiO1xuICAgIE11bHRpc2lnU3RhdGVTdGF0dXNbTXVsdGlzaWdTdGF0ZVN0YXR1c1tcIlVOS05PV05fU1RBVEVcIl0gPSAzXSA9IFwiVU5LTk9XTl9TVEFURVwiO1xufSkoTXVsdGlzaWdTdGF0ZVN0YXR1cyB8fCAoZXhwb3J0cy5NdWx0aXNpZ1N0YXRlU3RhdHVzID0gTXVsdGlzaWdTdGF0ZVN0YXR1cyA9IHt9KSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/types.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/utils.cjs":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/utils.cjs ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.viewFunction = exports.viewState = exports.encodeJSContractArgs = exports.validateArgs = void 0;\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/.pnpm/@near-js+types@0.3.1/node_modules/@near-js/types/lib/commonjs/index.cjs\");\nconst utils_1 = __webpack_require__(/*! @near-js/utils */ \"(ssr)/./node_modules/.pnpm/@near-js+utils@1.0.1/node_modules/@near-js/utils/lib/commonjs/index.cjs\");\nfunction parseJsonFromRawResponse(response) {\n    return JSON.parse(Buffer.from(response).toString());\n}\nfunction bytesJsonStringify(input) {\n    return Buffer.from(JSON.stringify(input));\n}\nfunction validateArgs(args) {\n    const isUint8Array = args.byteLength !== undefined && args.byteLength === args.length;\n    if (isUint8Array) {\n        return;\n    }\n    if (Array.isArray(args) || typeof args !== 'object') {\n        throw new types_1.PositionalArgsError();\n    }\n}\nexports.validateArgs = validateArgs;\nfunction encodeJSContractArgs(contractId, method, args) {\n    return Buffer.concat([Buffer.from(contractId), Buffer.from([0]), Buffer.from(method), Buffer.from([0]), Buffer.from(args)]);\n}\nexports.encodeJSContractArgs = encodeJSContractArgs;\n/**\n * Returns the state (key value pairs) of account's contract based on the key prefix.\n * Pass an empty string for prefix if you would like to return the entire state.\n * @see [https://docs.near.org/api/rpc/contracts#view-contract-state](https://docs.near.org/api/rpc/contracts#view-contract-state)\n *\n * @param connection connection to query state from\n * @param accountId account whose state is viewed\n * @param prefix allows to filter which keys should be returned. Empty prefix means all keys. String prefix is utf-8 encoded.\n * @param blockQuery specifies which block to query state at. By default returns last \"optimistic\" block (i.e. not necessarily finalized).\n */\nasync function viewState(connection, accountId, prefix, blockQuery = { finality: 'optimistic' }) {\n    const { values } = await connection.provider.query({\n        request_type: 'view_state',\n        ...blockQuery,\n        account_id: accountId,\n        prefix_base64: Buffer.from(prefix).toString('base64')\n    });\n    return values.map(({ key, value }) => ({\n        key: Buffer.from(key, 'base64'),\n        value: Buffer.from(value, 'base64')\n    }));\n}\nexports.viewState = viewState;\n/**\n * Invoke a contract view function using the RPC API.\n * @see [https://docs.near.org/api/rpc/contracts#call-a-contract-function](https://docs.near.org/api/rpc/contracts#call-a-contract-function)\n *\n * @param options Function call options.\n * @param options.contractId NEAR account where the contract is deployed\n * @param options.methodName The view-only method (no state mutations) name on the contract as it is written in the contract code\n * @param options.args Any arguments to the view contract method, wrapped in JSON\n * @param options.parse Parse the result of the call. Receives a Buffer (bytes array) and converts it to any object. By default result will be treated as json.\n * @param options.stringify Convert input arguments into a bytes array. By default the input is treated as a JSON.\n * @param options.jsContract Is contract from JS SDK, automatically encodes args from JS SDK to binary.\n * @param options.blockQuery specifies which block to query state at. By default returns last \"optimistic\" block (i.e. not necessarily finalized).\n * @returns {Promise<any>}\n */\nasync function viewFunction(connection, { contractId, methodName, args = {}, parse = parseJsonFromRawResponse, stringify = bytesJsonStringify, jsContract = false, blockQuery = { finality: 'optimistic' } }) {\n    let encodedArgs;\n    validateArgs(args);\n    if (jsContract) {\n        encodedArgs = encodeJSContractArgs(contractId, methodName, Object.keys(args).length > 0 ? JSON.stringify(args) : '');\n    }\n    else {\n        encodedArgs = stringify(args);\n    }\n    const result = await connection.provider.query({\n        request_type: 'call_function',\n        ...blockQuery,\n        account_id: jsContract ? connection.jsvmAccountId : contractId,\n        method_name: jsContract ? 'view_js_contract' : methodName,\n        args_base64: encodedArgs.toString('base64')\n    });\n    if (result.logs) {\n        (0, utils_1.printTxOutcomeLogs)({ contractId, logs: result.logs });\n    }\n    return result.result && result.result.length > 0 && parse(Buffer.from(result.result));\n}\nexports.viewFunction = viewFunction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMrYWNjb3VudHNAMS4zLjEvbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL2xpYi9jb21tb25qcy91dGlscy5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CLEdBQUcsaUJBQWlCLEdBQUcsNEJBQTRCLEdBQUcsb0JBQW9CO0FBQzlGLGdCQUFnQixtQkFBTyxDQUFDLDBIQUFnQjtBQUN4QyxnQkFBZ0IsbUJBQU8sQ0FBQywwSEFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVFQUF1RSx3QkFBd0I7QUFDL0YsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHlCQUF5QixZQUFZO0FBQ3JDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsMENBQTBDLGlDQUFpQyx1R0FBdUcsMEJBQTBCO0FBQzVNO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSwwQ0FBMEMsK0JBQStCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2hhY2thdGhvbi1uZWFyLXJlZGFjdGVkLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BuZWFyLWpzK2FjY291bnRzQDEuMy4xL25vZGVfbW9kdWxlcy9AbmVhci1qcy9hY2NvdW50cy9saWIvY29tbW9uanMvdXRpbHMuY2pzP2I5YjEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZpZXdGdW5jdGlvbiA9IGV4cG9ydHMudmlld1N0YXRlID0gZXhwb3J0cy5lbmNvZGVKU0NvbnRyYWN0QXJncyA9IGV4cG9ydHMudmFsaWRhdGVBcmdzID0gdm9pZCAwO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCJAbmVhci1qcy90eXBlc1wiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiQG5lYXItanMvdXRpbHNcIik7XG5mdW5jdGlvbiBwYXJzZUpzb25Gcm9tUmF3UmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShCdWZmZXIuZnJvbShyZXNwb25zZSkudG9TdHJpbmcoKSk7XG59XG5mdW5jdGlvbiBieXRlc0pzb25TdHJpbmdpZnkoaW5wdXQpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oSlNPTi5zdHJpbmdpZnkoaW5wdXQpKTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlQXJncyhhcmdzKSB7XG4gICAgY29uc3QgaXNVaW50OEFycmF5ID0gYXJncy5ieXRlTGVuZ3RoICE9PSB1bmRlZmluZWQgJiYgYXJncy5ieXRlTGVuZ3RoID09PSBhcmdzLmxlbmd0aDtcbiAgICBpZiAoaXNVaW50OEFycmF5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJncykgfHwgdHlwZW9mIGFyZ3MgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRocm93IG5ldyB0eXBlc18xLlBvc2l0aW9uYWxBcmdzRXJyb3IoKTtcbiAgICB9XG59XG5leHBvcnRzLnZhbGlkYXRlQXJncyA9IHZhbGlkYXRlQXJncztcbmZ1bmN0aW9uIGVuY29kZUpTQ29udHJhY3RBcmdzKGNvbnRyYWN0SWQsIG1ldGhvZCwgYXJncykge1xuICAgIHJldHVybiBCdWZmZXIuY29uY2F0KFtCdWZmZXIuZnJvbShjb250cmFjdElkKSwgQnVmZmVyLmZyb20oWzBdKSwgQnVmZmVyLmZyb20obWV0aG9kKSwgQnVmZmVyLmZyb20oWzBdKSwgQnVmZmVyLmZyb20oYXJncyldKTtcbn1cbmV4cG9ydHMuZW5jb2RlSlNDb250cmFjdEFyZ3MgPSBlbmNvZGVKU0NvbnRyYWN0QXJncztcbi8qKlxuICogUmV0dXJucyB0aGUgc3RhdGUgKGtleSB2YWx1ZSBwYWlycykgb2YgYWNjb3VudCdzIGNvbnRyYWN0IGJhc2VkIG9uIHRoZSBrZXkgcHJlZml4LlxuICogUGFzcyBhbiBlbXB0eSBzdHJpbmcgZm9yIHByZWZpeCBpZiB5b3Ugd291bGQgbGlrZSB0byByZXR1cm4gdGhlIGVudGlyZSBzdGF0ZS5cbiAqIEBzZWUgW2h0dHBzOi8vZG9jcy5uZWFyLm9yZy9hcGkvcnBjL2NvbnRyYWN0cyN2aWV3LWNvbnRyYWN0LXN0YXRlXShodHRwczovL2RvY3MubmVhci5vcmcvYXBpL3JwYy9jb250cmFjdHMjdmlldy1jb250cmFjdC1zdGF0ZSlcbiAqXG4gKiBAcGFyYW0gY29ubmVjdGlvbiBjb25uZWN0aW9uIHRvIHF1ZXJ5IHN0YXRlIGZyb21cbiAqIEBwYXJhbSBhY2NvdW50SWQgYWNjb3VudCB3aG9zZSBzdGF0ZSBpcyB2aWV3ZWRcbiAqIEBwYXJhbSBwcmVmaXggYWxsb3dzIHRvIGZpbHRlciB3aGljaCBrZXlzIHNob3VsZCBiZSByZXR1cm5lZC4gRW1wdHkgcHJlZml4IG1lYW5zIGFsbCBrZXlzLiBTdHJpbmcgcHJlZml4IGlzIHV0Zi04IGVuY29kZWQuXG4gKiBAcGFyYW0gYmxvY2tRdWVyeSBzcGVjaWZpZXMgd2hpY2ggYmxvY2sgdG8gcXVlcnkgc3RhdGUgYXQuIEJ5IGRlZmF1bHQgcmV0dXJucyBsYXN0IFwib3B0aW1pc3RpY1wiIGJsb2NrIChpLmUuIG5vdCBuZWNlc3NhcmlseSBmaW5hbGl6ZWQpLlxuICovXG5hc3luYyBmdW5jdGlvbiB2aWV3U3RhdGUoY29ubmVjdGlvbiwgYWNjb3VudElkLCBwcmVmaXgsIGJsb2NrUXVlcnkgPSB7IGZpbmFsaXR5OiAnb3B0aW1pc3RpYycgfSkge1xuICAgIGNvbnN0IHsgdmFsdWVzIH0gPSBhd2FpdCBjb25uZWN0aW9uLnByb3ZpZGVyLnF1ZXJ5KHtcbiAgICAgICAgcmVxdWVzdF90eXBlOiAndmlld19zdGF0ZScsXG4gICAgICAgIC4uLmJsb2NrUXVlcnksXG4gICAgICAgIGFjY291bnRfaWQ6IGFjY291bnRJZCxcbiAgICAgICAgcHJlZml4X2Jhc2U2NDogQnVmZmVyLmZyb20ocHJlZml4KS50b1N0cmluZygnYmFzZTY0JylcbiAgICB9KTtcbiAgICByZXR1cm4gdmFsdWVzLm1hcCgoeyBrZXksIHZhbHVlIH0pID0+ICh7XG4gICAgICAgIGtleTogQnVmZmVyLmZyb20oa2V5LCAnYmFzZTY0JyksXG4gICAgICAgIHZhbHVlOiBCdWZmZXIuZnJvbSh2YWx1ZSwgJ2Jhc2U2NCcpXG4gICAgfSkpO1xufVxuZXhwb3J0cy52aWV3U3RhdGUgPSB2aWV3U3RhdGU7XG4vKipcbiAqIEludm9rZSBhIGNvbnRyYWN0IHZpZXcgZnVuY3Rpb24gdXNpbmcgdGhlIFJQQyBBUEkuXG4gKiBAc2VlIFtodHRwczovL2RvY3MubmVhci5vcmcvYXBpL3JwYy9jb250cmFjdHMjY2FsbC1hLWNvbnRyYWN0LWZ1bmN0aW9uXShodHRwczovL2RvY3MubmVhci5vcmcvYXBpL3JwYy9jb250cmFjdHMjY2FsbC1hLWNvbnRyYWN0LWZ1bmN0aW9uKVxuICpcbiAqIEBwYXJhbSBvcHRpb25zIEZ1bmN0aW9uIGNhbGwgb3B0aW9ucy5cbiAqIEBwYXJhbSBvcHRpb25zLmNvbnRyYWN0SWQgTkVBUiBhY2NvdW50IHdoZXJlIHRoZSBjb250cmFjdCBpcyBkZXBsb3llZFxuICogQHBhcmFtIG9wdGlvbnMubWV0aG9kTmFtZSBUaGUgdmlldy1vbmx5IG1ldGhvZCAobm8gc3RhdGUgbXV0YXRpb25zKSBuYW1lIG9uIHRoZSBjb250cmFjdCBhcyBpdCBpcyB3cml0dGVuIGluIHRoZSBjb250cmFjdCBjb2RlXG4gKiBAcGFyYW0gb3B0aW9ucy5hcmdzIEFueSBhcmd1bWVudHMgdG8gdGhlIHZpZXcgY29udHJhY3QgbWV0aG9kLCB3cmFwcGVkIGluIEpTT05cbiAqIEBwYXJhbSBvcHRpb25zLnBhcnNlIFBhcnNlIHRoZSByZXN1bHQgb2YgdGhlIGNhbGwuIFJlY2VpdmVzIGEgQnVmZmVyIChieXRlcyBhcnJheSkgYW5kIGNvbnZlcnRzIGl0IHRvIGFueSBvYmplY3QuIEJ5IGRlZmF1bHQgcmVzdWx0IHdpbGwgYmUgdHJlYXRlZCBhcyBqc29uLlxuICogQHBhcmFtIG9wdGlvbnMuc3RyaW5naWZ5IENvbnZlcnQgaW5wdXQgYXJndW1lbnRzIGludG8gYSBieXRlcyBhcnJheS4gQnkgZGVmYXVsdCB0aGUgaW5wdXQgaXMgdHJlYXRlZCBhcyBhIEpTT04uXG4gKiBAcGFyYW0gb3B0aW9ucy5qc0NvbnRyYWN0IElzIGNvbnRyYWN0IGZyb20gSlMgU0RLLCBhdXRvbWF0aWNhbGx5IGVuY29kZXMgYXJncyBmcm9tIEpTIFNESyB0byBiaW5hcnkuXG4gKiBAcGFyYW0gb3B0aW9ucy5ibG9ja1F1ZXJ5IHNwZWNpZmllcyB3aGljaCBibG9jayB0byBxdWVyeSBzdGF0ZSBhdC4gQnkgZGVmYXVsdCByZXR1cm5zIGxhc3QgXCJvcHRpbWlzdGljXCIgYmxvY2sgKGkuZS4gbm90IG5lY2Vzc2FyaWx5IGZpbmFsaXplZCkuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICovXG5hc3luYyBmdW5jdGlvbiB2aWV3RnVuY3Rpb24oY29ubmVjdGlvbiwgeyBjb250cmFjdElkLCBtZXRob2ROYW1lLCBhcmdzID0ge30sIHBhcnNlID0gcGFyc2VKc29uRnJvbVJhd1Jlc3BvbnNlLCBzdHJpbmdpZnkgPSBieXRlc0pzb25TdHJpbmdpZnksIGpzQ29udHJhY3QgPSBmYWxzZSwgYmxvY2tRdWVyeSA9IHsgZmluYWxpdHk6ICdvcHRpbWlzdGljJyB9IH0pIHtcbiAgICBsZXQgZW5jb2RlZEFyZ3M7XG4gICAgdmFsaWRhdGVBcmdzKGFyZ3MpO1xuICAgIGlmIChqc0NvbnRyYWN0KSB7XG4gICAgICAgIGVuY29kZWRBcmdzID0gZW5jb2RlSlNDb250cmFjdEFyZ3MoY29udHJhY3RJZCwgbWV0aG9kTmFtZSwgT2JqZWN0LmtleXMoYXJncykubGVuZ3RoID4gMCA/IEpTT04uc3RyaW5naWZ5KGFyZ3MpIDogJycpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZW5jb2RlZEFyZ3MgPSBzdHJpbmdpZnkoYXJncyk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbm5lY3Rpb24ucHJvdmlkZXIucXVlcnkoe1xuICAgICAgICByZXF1ZXN0X3R5cGU6ICdjYWxsX2Z1bmN0aW9uJyxcbiAgICAgICAgLi4uYmxvY2tRdWVyeSxcbiAgICAgICAgYWNjb3VudF9pZDoganNDb250cmFjdCA/IGNvbm5lY3Rpb24uanN2bUFjY291bnRJZCA6IGNvbnRyYWN0SWQsXG4gICAgICAgIG1ldGhvZF9uYW1lOiBqc0NvbnRyYWN0ID8gJ3ZpZXdfanNfY29udHJhY3QnIDogbWV0aG9kTmFtZSxcbiAgICAgICAgYXJnc19iYXNlNjQ6IGVuY29kZWRBcmdzLnRvU3RyaW5nKCdiYXNlNjQnKVxuICAgIH0pO1xuICAgIGlmIChyZXN1bHQubG9ncykge1xuICAgICAgICAoMCwgdXRpbHNfMS5wcmludFR4T3V0Y29tZUxvZ3MpKHsgY29udHJhY3RJZCwgbG9nczogcmVzdWx0LmxvZ3MgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQucmVzdWx0ICYmIHJlc3VsdC5yZXN1bHQubGVuZ3RoID4gMCAmJiBwYXJzZShCdWZmZXIuZnJvbShyZXN1bHQucmVzdWx0KSk7XG59XG5leHBvcnRzLnZpZXdGdW5jdGlvbiA9IHZpZXdGdW5jdGlvbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+accounts@1.3.1/node_modules/@near-js/accounts/lib/commonjs/utils.cjs\n");

/***/ })

};
;